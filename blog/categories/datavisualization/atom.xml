<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: DataVisualization | Jacky and MSC]]></title>
  <link href="http://jackycode.github.io/blog/categories/datavisualization/atom.xml" rel="self"/>
  <link href="http://jackycode.github.io/"/>
  <updated>2014-08-18T17:10:00+08:00</updated>
  <id>http://jackycode.github.io/</id>
  <author>
    <name><![CDATA[Jacky Code]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[R语言绘图4：R中的绘图系统]]></title>
    <link href="http://jackycode.github.io/blog/2014/06/08/plotting-system/"/>
    <updated>2014-06-08T15:48:27+08:00</updated>
    <id>http://jackycode.github.io/blog/2014/06/08/plotting-system</id>
    <content type="html"><![CDATA[<p><img src="/images/article/article39.jpg" alt="article 39" />
<!-- more --></p>

<p>图片为本文中的某一张~~</p>

<p><em>“文章原创，转载请注明出处”</em></p>

<hr />

<p>前面三篇大致介绍了绘图的基础以及一些基础图形的绘制，其中重点使用R自带的基础绘图系统实现，部分也使用了<code>ggplot2</code>做了简单地演示。其实，在R中存在四套绘图系统，分别是：<strong>基础绘图系统</strong>(The Base Plotting System)、<strong>grid图形系统</strong>、<strong>Lattice绘图系统</strong>(The Lattice System)以及<strong>ggplot2绘图系统</strong>(The ggplot2 System)。</p>

<p>grid图形系统提供了一种比标准图形系统更低水平的方法，使用者可以在图形设备上随意创建矩形区域，然后再该区域定义坐标系统，其后使用绘图的基础单元来控制图形！由此可见，grid图形非常的灵活，但是grid包没有提供生成统计图形，甚至没有提供完整绘图的函数，所以，一般来说，我们不会直接使用grid。</p>

<p>Lattice绘图系统是基于grid图形系统的，我们在使用Lattice的时候，其实就会使用grid，只是不会直接去调用而已。这一篇，就简单看看这三个绘图系统：基础绘图系统、Lattice绘图系统以及ggplot2绘图系统。</p>

<h3 id="section">1. 基础绘图系统</h3>
<hr />

<p>基础绘图系统，即是R语言自带的绘图系统。R中核心的绘图系统主要基于以下两个包：</p>

<ol>
  <li><strong>graphics</strong>包：此包包含了基础绘图系统的绘图函数，比如：<code>plot()</code>，<code>hist()</code>等等；</li>
  <li><strong>grDevices</strong>包：此包包含了各类型的图形设备(graphics devices)，包括：<em>X11</em>, <em>PDF</em>, <em>PNG</em>等等。</li>
</ol>

<p>基础绘图系统总是从一幅空画布开始绘制图形，<strong>首先使用<code>plot()</code>这样的函数在空画布上画出图形，然后使用注释函数对图形进行添加或者修改</strong>，一般来说就是添加或者修改显示的文本、辅助线、辅助点以及标题等等。对于这样的一个流程，很显然，它可以很方便我们去使用，因为这样的流程可以完全将我们的思路反应出来。<strong>它就是通过一系列的R语言命令，一步一步地按照心中预想的绘图方式将其绘制出来</strong>。</p>

<p>这样的绘图方式在给予我们方便的同时，也带来了一些弊端。首先，我们必须事先安排好图形应该如何绘制，因为一旦我们开始绘制就不能后退了；此外，当一副图形绘制完成，我们就不能再对其进行修改了，因为基础绘图系统没有绘图语言(graphical “language”)（这个可以跟ggplot2进行一个比对，就能明白其中的意思了！）。</p>

<p>基础绘图一般来说：<strong>就是使用一系列单独的函数调用，将图形的各个零散的部分组合起来</strong>。这种方式比较简单，也比较切合自己的思路。正因为如此，我个人比较喜欢在分析问题的最开始，使用它进行一些简单地图形绘制，将其绘制到屏幕上，让我能够直观先去看看数据的基本状况。</p>

<p>利用<code>mtcar</code>数据集，做个示例：</p>

<p>```r
## 取出感兴趣的数据
dataSet &lt;- mtcars[c(“mpg”, “disp”, “carb”)]</p>

<h2 id="section-1">转换数据的格式</h2>
<p>dataSet &lt;- transform(dataSet, carb = factor(carb))</p>

<h2 id="section-2">绘图查看数据 散点图</h2>
<p>plot(dataSet$mpg, dataSet$disp, xlab = “mpg”, ylab = “disp”)
title(“The Scatter Plot”)
model &lt;- lm(disp ~ mpg, data = dataSet)
abline(model, col = “red”)
```</p>

<p><img src="/images/a39/4base1.png" alt="plot of chunk 4base" /></p>

<p>```r</p>

<h2 id="section-3">加上条件</h2>
<p>with(dataSet, plot(mpg, disp, type = “n”))
for (i in unique(dataSet$carb)) {
    with(subset(dataSet, carb == i), points(mpg, disp, col = i))
}
## 对于carb == 4的数据，添加拟合直线
model1 &lt;- lm(disp ~ mpg, data = subset(dataSet, carb == 4))
abline(model1, lty = 2, lwd = 2)
```</p>

<p><img src="/images/a39/4base2.png" alt="plot of chunk 4base" /></p>

<h3 id="lattice">2. Lattice</h3>
<hr />

<p>Lattice一般会使用以下两个包：</p>

<ol>
  <li><strong>lattice</strong>包：包含与基础绘图独立的，能够生成Trellis graphics的代码，包括<code>xyplot</code>,<code>bwplot</code>等等；</li>
  <li><strong>grid</strong>包：lattice包建立在此包之上，在使用中很少直接调用这个包。</li>
</ol>

<p>Lattice与基础绘图系统的一个非常明显的区别在于：<strong>所有的绘图以及注释都在一次函数调用中完成</strong>。</p>

<p>Lattice很擅长绘制需要分类的图形，比如说，想要根据不同的level，绘制y与x的散点图。这个在基础绘制系统中还是蛮麻烦的，但是在Lattice中就比较容易。也就是说，<strong>lattice通过一维、二维或三维的条件绘图(即是Trellis)，对多元变量关系进行直观展示</strong>。</p>

<p>由于其所有的绘图与注释都需要在一次函数调用中完成，所以在使用之前就需要做好准备，因为一旦图形绘制好，就什么也不能添加了。</p>

<p>接着上面的数据集做示例：</p>

<p><code>r
xyplot(disp ~ mpg, data = dataSet)
</code></p>

<p><img src="/images/a39/4lattice1.png" alt="plot of chunk 4lattice" /></p>

<p><code>r
xyplot(disp ~ mpg | carb, data = dataSet, layout = c(6, 1))
</code></p>

<p><img src="/images/a39/4lattice2.png" alt="plot of chunk 4lattice" /></p>

<p><code>r
## 使用panel function
xyplot(disp ~ mpg | carb, data = dataSet, panel = function(x, y, ...) {
    panel.xyplot(x, y, ...)
    panel.abline(h = median(y), lty = 2, col = "gray")
    panel.lmline(x, y, col = "red")
})
</code></p>

<p><img src="/images/a39/4lattice3.png" alt="plot of chunk 4lattice" /></p>

<p><strong>更多有关Lattice的内容可以看Springer出的这本书：’Lattice: Multivariate Data Visualization with R’。</strong></p>

<h3 id="ggplot2">3. ggplot2</h3>
<hr />

<p>以前就说过，ggplot2是基于一种全面的图形语法，提供了一种全新的图形创建方法。能够自动处理位置、文本等等注释，也能够按照需求自定义设置。默认情况下有很多选项以供选择，在不设置时会直接使用默认值。</p>

<p>在ggplot2中，最简单最基础的绘图函数就是<code>qplot()</code>，我们可以来试试这个函数：</p>

<p><code>r
## 查看qplot函数
str(qplot)
</code></p>

<p><code>
## function (x, y = NULL, ..., data, facets = NULL, margins = FALSE,
##     geom = "auto", stat = list(NULL), position = list(NULL), xlim = c(NA,
##         NA), ylim = c(NA, NA), log = "", main = NULL, xlab = deparse(substitute(x)),
##     ylab = deparse(substitute(y)), asp = NA)
</code></p>

<p><code>r
## 散点图
qplot(mpg, disp, data = dataSet)
</code></p>

<p><img src="/images/a39/4ggplot21.png" alt="plot of chunk 4ggplot2" /></p>

<p><code>r
## 按carb区分 按颜色
qplot(mpg, disp, data = dataSet, color = carb)
</code></p>

<p><img src="/images/a39/4ggplot22.png" alt="plot of chunk 4ggplot2" /></p>

<p><code>r
### 按形状
qplot(mpg, disp, data = dataSet, shape = carb)
</code></p>

<p><img src="/images/a39/4ggplot23.png" alt="plot of chunk 4ggplot2" /></p>

<p><code>r
## 添加拟合直线
qplot(mpg, disp, data = dataSet, geom = c("point", "smooth"), method = "lm")
</code></p>

<p><img src="/images/a39/4ggplot24.png" alt="plot of chunk 4ggplot2" /></p>

<p><code>r
## 使用facets
qplot(mpg, disp, data = dataSet, facets = . ~ carb)
</code></p>

<p><img src="/images/a39/4ggplot25.png" alt="plot of chunk 4ggplot2" /></p>

<p><code>r
### 添加颜色和形状
qplot(mpg, disp, data = dataSet, facets = . ~ carb, color = carb, shape = carb)
</code></p>

<p><img src="/images/a39/4ggplot26.png" alt="plot of chunk 4ggplot2" /></p>

<p>当然，ggpplot2中不止这一点东西。<strong>更多有关ggplot2的内容可以参看Spinger出的这本书：ggplot2:Elegant Graphics for Data Analysis’。</strong></p>

<h3 id="section-4">总结</h3>
<hr />

<p>一般来说，使用R绘制图形就是使用以上的三种绘图系统。基础的绘图系统跟人的思路相仿，你可以边思考边画图，边做边画，比较方便。Lattice擅长绘制Trellis图形，并且其所有的绘图注释都只能在一个函数中实现。ggplot2则是集中了前两者的元素，更加富有创造性，当然学习成本就稍微高一些。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[R语言绘图3：基础图形2]]></title>
    <link href="http://jackycode.github.io/blog/2014/06/04/basic-graph2/"/>
    <updated>2014-06-04T16:53:08+08:00</updated>
    <id>http://jackycode.github.io/blog/2014/06/04/basic-graph2</id>
    <content type="html"><![CDATA[<p><img src="/images/article/article38.jpg" alt="article 38" />
<!-- more --></p>

<p>图片为本文中的某一张~~</p>

<p><em>“文章原创，转载请注明出处”</em></p>

<hr />

<h3 id="section">三、直方图</h3>
<hr />

<p>前面介绍的两种图形，一般都是用来处理离散数据的。那么对于连续数据，常用的图形就有这里所说的直方图。直方图在横轴上将数据值域划分成若干个组别，然后在纵轴上显示其频数。通过这种方式，可以将连续的点离散化，从而来描述连续型变量的分布。</p>

<p>在R语言中，可以使用<code>hist()</code>函数来绘制直方图：</p>

<p><code>r
## 构造数据
set.seed(1234)
x &lt;- rnorm(100, 0, 1)
## 设置画布
par(mfrow = c(2, 2))
## 1
hist(x)
box()
## 2 修改颜色，组数
hist(x, breaks = 10, col = "gray")
box()
## 3 添加核密度曲线
hist(x, breaks = 10, freq = FALSE, col = "gray")
lines(density(x), col = "red", lwd = 2)
box()
## 4 添加正态密度曲线
h &lt;- hist(x, breaks = 10, col = "gray")
xfit &lt;- seq(min(x), max(x), length = 100)
yfit &lt;- dnorm(xfit, mean = mean(x), sd = sd(x))
yfit &lt;- yfit * diff(h$mids[1:2]) * length(x)
lines(xfit, yfit, col = "blue", lwd = 2)
box()
</code></p>

<p><img src="/images/a38/hist.png" alt="plot of chunk hist" /></p>

<p>当然，可以使用<code>ggplot2</code>包中的函数绘制直方图：</p>

<p>先试试<code>qplot()</code>函数：</p>

<p><code>r
qplot(x, geom = "histogram", binwidth = 0.5, fill = ..count..)
</code></p>

<p><img src="/images/a38/hist_qplot.png" alt="plot of chunk hist_qplot" /></p>

<p>再试试<code>ggplot()</code>函数：</p>

<p><code>r
dataSet &lt;- data.frame(x)
h &lt;- ggplot(data = dataSet, aes(x = x))
h + geom_histogram(aes(fill = ..count..), binwidth = 0.5)
</code></p>

<p><img src="/images/a38/hist_ggplot1.png" alt="plot of chunk hist_ggplot" /></p>

<p><code>r
## 添加核密度曲线
h + geom_histogram(aes(y = ..density.., fill = ..count..), binwidth = 0.5) +
    geom_density(color = "red")
</code></p>

<p><img src="/images/a38/hist_ggplot2.png" alt="plot of chunk hist_ggplot" /></p>

<p><code>r
## 添加正态密度曲线
dataSet2 &lt;- data.frame(xfit, yfit)
h + geom_histogram(aes(fill = ..count..), binwidth = 0.5) + geom_line(data = dataSet2,
    aes(x = xfit, y = yfit), color = "red")
</code></p>

<p><img src="/images/a38/hist_ggplot3.png" alt="plot of chunk hist_ggplot" /></p>

<p>直方图在统计中是非常重要的，我自己的感觉是：散点图用的最多最广泛，其次就是直方图！散点图之前已经说过，直方图的话，它可以直观地显示出样本数据大致的分布情况（经验分布函数），对选择什么样的分布、什么样的模型等等都有一定的作用。使用核函数以及正态密度曲线与之结合，能够更好地观察出样本数据的一些分布特征，所以，学会绘制直方图是十分重要的。</p>

<h3 id="section-1">四、箱线图</h3>
<hr />

<p>还有一种常用的图形，就是<strong>箱线图</strong>，也称<strong>盒须图</strong>。它通过绘制连续型变量的五个分位数（最大最小值、25%和75%分位数以及中位数），描述变量的分布。</p>

<p><code>r
## 构造数据
x1 &lt;- x
x2 &lt;- rnorm(100, 1, 2)
x3 &lt;- rnorm(100, 2, 4)
all_x &lt;- c(x1, x2, x3)
label &lt;- rep(1:3, each = 100)
dataSet3 &lt;- data.frame(x = all_x, label = label)
</code></p>

<p>下面开始绘制箱线图：</p>

<p><code>r
boxplot(dataSet3$x)
</code></p>

<p><img src="/images/a38/boxplot1.png" alt="plot of chunk boxplot" /></p>

<p><code>r
## 考虑类别
boxplot(x ~ label, data = dataSet3)
</code></p>

<p><img src="/images/a38/boxplot2.png" alt="plot of chunk boxplot" /></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[R语言绘图2：基础图形1]]></title>
    <link href="http://jackycode.github.io/blog/2014/05/29/basic-graph1/"/>
    <updated>2014-05-29T14:50:05+08:00</updated>
    <id>http://jackycode.github.io/blog/2014/05/29/basic-graph1</id>
    <content type="html"><![CDATA[<p><img src="/images/article/article37.jpg" alt="article 37" />
<!-- more --></p>

<p>图片为本文中的某一张~~</p>

<p><em>“文章原创，转载请注明出处”</em></p>

<hr />

<h3 id="section">一、 饼图</h3>
<hr />

<p>饼图，简单来说，就是将一个圆（或者圆饼）按分类变量分成几块，每一块所占的面积比例就是相对应的变量在总体中所占的比例。</p>

<p>饼图在统计上，其实并不被看好。一般都会推荐使用条形图去代替，因为相比较面积，长度更能让人产生直观的判断。</p>

<p>```r
## 构造一批数据
year &lt;- 2001:2010
set.seed(1234)
counts &lt;- sample(100:500, 10)</p>

<h2 id="parpar">绘图 在同一张画布上绘制4幅图，对于<code>par</code>的使用，可以<code>?par</code></h2>
<p>par(mfrow = c(2, 2))</p>

<h3 id="section-1">1</h3>
<p>pie(counts, labels = year)</p>

<h3 id="section-2">2</h3>
<p>pie(counts, labels = year, col = gray(seq(0.1, 1, length = 10)), clockwise = TRUE)</p>

<h3 id="section-3">3</h3>
<p>lb &lt;- paste(year, counts, sep = “:”)
pie(counts, labels = lb, col = rainbow(10))</p>

<h3 id="section-4">4</h3>
<p>library(plotrix)
pie3D(counts, labels = year, explode = 0.1)
```</p>

<p><img src="/images/a37/1.png" alt="plot of chunk 1" /></p>

<h3 id="section-5">二、 条形图</h3>
<hr />

<p>刚才我们就提到，很多时候，我们会使用条形图替代饼图。实际上，<strong>条形图就是通过垂直或者水平的条形去展示分类变量的频数</strong>。</p>

<p>对于上面的数据，可以绘制：</p>

<p><code>r
par(mfrow = c(2, 2))
barplot(counts, names.arg = year)
barplot(counts, names.arg = year, horiz = TRUE)
barplot(counts, names.arg = year, col = rainbow(10))
barplot(counts, names.arg = year, col = grey(seq(0.1, 1, length = 10)), horiz = TRUE)
</code></p>

<p><img src="/images/a37/2.png" alt="plot of chunk 2" /></p>

<p>当每一年有两个变量指标时，可以绘制堆砌条形图和分组条形图：</p>

<p>```r
## 构造新的数据
set.seed(4321)
counts2 &lt;- sample(100:500, 10)
count &lt;- cbind(c1 = counts, c2 = counts2)
rownames(count) &lt;- year</p>

<h1 id="section-6">#</h1>
<p>par(mfrow = c(1, 1))
barplot(count, col = rainbow(10), legend = rownames(count))
```</p>

<p><img src="/images/a37/31.png" alt="plot of chunk 3" /></p>

<p><code>r
barplot(count, col = rainbow(10), besid = TRUE, legend = rownames(count))
</code></p>

<p><img src="/images/a37/32.png" alt="plot of chunk 3" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[R语言绘图1：绘图基础]]></title>
    <link href="http://jackycode.github.io/blog/2014/05/24/basic-plotting-tools/"/>
    <updated>2014-05-24T14:48:02+08:00</updated>
    <id>http://jackycode.github.io/blog/2014/05/24/basic-plotting-tools</id>
    <content type="html"><![CDATA[<p><img src="/images/article/article36.jpg" alt="article 36" />
<!-- more --></p>

<p>图片为本文中的某一张~~</p>

<p><em>“文章原创，转载请注明出处”</em></p>

<hr />

<p>以数字和文字展示统计分析的结果，很多时候并不直观，也不能吸引人！而且，从数字和文字中寻找规律、异常等等的东西也并不容易。但是，对于图形来说，这些就容易解决得多了。</p>

<p>图形的作用不言而喻，就不想多说了。R语言具有强大的绘图功能，这篇就从最基础的绘图工具讲起，谈谈如何在R中绘制各种各样的图形。</p>

<h4 id="section">一、点</h4>
<hr />

<p>散点图，无论是在处理数据之前，还是在处理数据的过程中，它都显得非常的重要。在R语言中，绘制散点图非常简单，这就需要使用到函数<strong><code>plot()</code></strong>。</p>

<p>构造以下的数据以作演示使用：</p>

<p><code>r
set.seed(1234)
x &lt;- sample(1:100, 80, replace = FALSE)
y &lt;- 2 * x + 20 + rnorm(80, 0, 10)
</code></p>

<h6 id="section-1">1. 首先绘制一个最简单的散点图：</h6>

<p><code>r
plot(x = x, y = y)  ## 或者使用: plot(x, y)
</code></p>

<p><img src="/images/a36/2.png" alt="plot of chunk 2" /></p>

<p>其中，<code>x = x</code>左侧的<code>x</code>表示横坐标，右侧的是数据名，<code>y</code>的相同。当然，左侧的<code>x</code>和<code>y</code>都是可以省略的。也可以使用<code>plot(&lt;formula&gt;)</code>这样的形式去绘制散点图：</p>

<p><code>r
plot(y ~ x)
</code></p>

<p><img src="/images/a36/3.png" alt="plot of chunk 3" /></p>

<h5 id="section-2">2. 添加标题和标签</h5>

<p><code>r
plot(x, y, xlab = "name of x", ylab = "name of y", main = "Scatter Plot")
</code></p>

<p><img src="/images/a36/4.png" alt="plot of chunk 4" /></p>

<h5 id="section-3">3. 设置坐标界限</h5>

<p><code>r
## 可先用以下函数查看x和y的取值范围 range(x) range(y)
plot(x, y, xlab = "name of x", ylab = "name of y", main = "Scatter Plot", xlim = c(1,
    100), ylim = c(0, 250))
</code></p>

<p><img src="/images/a36/5.png" alt="plot of chunk 5" /></p>

<h5 id="section-4">4. 更改字符</h5>

<p>默认情形下，绘图字符为空心点，可以使用<code>pch</code>选项参数进行更改：</p>

<p><code>r
plot(x, y, xlab = "name of x", ylab = "name of y", main = "Scatter Plot", xlim = c(1,
    100), ylim = c(0, 250), pch = 19)
</code></p>

<p><img src="/images/a36/6.png" alt="plot of chunk 6" /></p>

<p><code>pch</code>的取值与其对应的图形字符，也可以使用<code>plot</code>绘制：</p>

<p><code>r
a &lt;- rep(1:5, each = 5)
b &lt;- rep(1:5, 5)
plot(a, b, pch = 1:25)
text(a, b, 1:25, pos = 2)
</code></p>

<p><img src="/images/a36/7.png" alt="plot of chunk 7" /></p>

<h5 id="section-5">5. 更改颜色</h5>

<p>默认情况下，R绘制的图像是黑白的。但其实，R中有若干和颜色相关的参数：</p>

<p><code>r
plot(x, y, main = "Plot", sub = "Scatter Plot", col = "red", col.axis = "green",
    col.lab = "blue", col.main = "#999000", col.sub = "#000999", fg = "gray",
    bg = "white")
</code></p>

<p><img src="/images/a36/8.png" alt="plot of chunk 8" /></p>

<p>其中：</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">参数</th>
      <th style="text-align: center">作用</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">col</td>
      <td style="text-align: center">绘图字符的颜色</td>
    </tr>
    <tr>
      <td style="text-align: center">col.axis</td>
      <td style="text-align: center">坐标轴文字颜色</td>
    </tr>
    <tr>
      <td style="text-align: center">col.lab</td>
      <td style="text-align: center">坐标轴标签颜色</td>
    </tr>
    <tr>
      <td style="text-align: center">col.main</td>
      <td style="text-align: center">标题颜色</td>
    </tr>
    <tr>
      <td style="text-align: center">col.sub</td>
      <td style="text-align: center">副标题颜色</td>
    </tr>
    <tr>
      <td style="text-align: center">fg</td>
      <td style="text-align: center">前景色</td>
    </tr>
    <tr>
      <td style="text-align: center">bg</td>
      <td style="text-align: center">背景色</td>
    </tr>
  </tbody>
</table>

<h5 id="section-6">6. 更改尺寸</h5>

<p>与颜色类似，存在若干参数可以用来设置图形中元素的尺寸，而且与上表中设置颜色的参数相对应，只需将<code>col</code>更换成<code>cex</code>即可：</p>

<p><code>r
plot(x, y, main = "Plot", sub = "Scatter Plot", cex = 0.5, cex.axis = 1, cex.lab = 0.8,
    cex.main = 2, cex.sub = 1.5)
</code></p>

<p><img src="/images/a36/9.png" alt="plot of chunk 9" /></p>

<h4 id="section-7">二、线</h4>

<p>有时候，我们不仅需要散点图，更需要折线图，比如在时间序列当中：</p>

<p><code>r
t &lt;- 1:50
set.seed(1234)
v &lt;- rnorm(50, 0, 10)
plot(t, v, type = "l")
</code></p>

<p><img src="/images/a36/10.png" alt="plot of chunk 10" /></p>

<h5 id="section-8">1. 更改线条类型</h5>

<p>R中提供了很多类型的线条，可以通过<code>lty</code>选项来设定，如下：</p>

<p><code>r
a &lt;- c()
plot(a, xlim = c(0, 10), ylim = c(1, 6), xlab = "", ylab = "lty")
for (i in 1:6) {
    abline(h = i, lty = i)
}
</code></p>

<p><img src="/images/a36/11.png" alt="plot of chunk 11" /></p>

<h5 id="section-9">2. 更改颜色</h5>

<p>与前面更改点的颜色方法相同！</p>

<h5 id="section-10">3. 线条宽度</h5>

<p><code>r
plot(t, v, type = "l", lwd = 2)
</code></p>

<p><img src="/images/a36/12.png" alt="plot of chunk 12" /></p>

<h5 id="section-11">4. 点与线</h5>

<p>有时候，我们还需要将点突出出来，此时需要利用<code>type</code>选项：</p>

<p><code>r
plot(t, v, type = "b")
</code></p>

<p><img src="/images/a36/13.png" alt="plot of chunk 13" /></p>

<p><code>type</code>选项可以指定<code>plot()</code>函数绘制的类型，可以使用<code>help(plot)</code>查看。</p>

<h4 id="section-12">三、散点图与平滑线</h4>

<p>在做线性回归时，我们常常会在散点图中添加一条拟合直线以查看效果：</p>

<p><code>r
model &lt;- lm(y ~ x)
plot(x, y)
abline(model, col = "blue")
</code></p>

<p><img src="/images/a36/14.png" alt="plot of chunk 14" /></p>

<p>有时候，我们需要在散点图上画一条拟合的平滑线，一般使用loess：</p>

<p><code>r
plot(x, y)
model_loess &lt;- loess(y ~ x)
fit &lt;- fitted(model_loess)
ord &lt;- order(x)
lines(x[ord], fit[ord], lwd = 2, lty = 2, col = "blue")
</code></p>

<p><img src="/images/a36/15.png" alt="plot of chunk 15" /></p>

<p>当然，在R语言中要实现上面的图形有很多简单地方法，这里介绍两个：</p>

<h5 id="carscatterplot">1. 使用<code>car</code>包中的<code>scatterplot()</code>函数</h5>

<p><code>r
library(car)
scatterplot(y ~ x, spread = FALSE, lty = 1, lwd = 2, smoother.args = list(lty = 2,
    lwd = 2), smoother = loessLine)
</code></p>

<p><img src="/images/a36/16.png" alt="plot of chunk 16" /></p>

<p>其中，直线为线性拟合，虚线为loess曲线拟合，边界为箱线图！</p>

<p>在函数中<code>smoother.args</code>选项指定曲线拟合的参数；<code>smoother</code>选项指定是否使用曲线拟合，以及用什么方法进行曲线拟合。当然，如果不需要曲线平滑拟合，那么可以将<code>smoother = FALSE</code>。</p>

<h5 id="ggplot2">2. 使用<code>ggplot2</code>包</h5>

<p><code>ggplot2</code>是学习R语言制图的一座大山，它提供了一个基于全面而连贯的语法的绘图系统。功能非常强大，而且弥补了R中自带图形绘制的很多缺点。唯一的问题，学习<code>ggplot2</code>的成本比较大，需要理解很多概念，也需要学习新的语法。</p>

<p><strong>如果你是刚刚入门R语言，对于R语言基础的绘图工具还不是很熟的话，建议先跳过这一段，不要去弄懂其中的意思，试试效果就可以了！等对R语言基础绘图有了一定的了解之后，再来学习ggplot2，个人觉得会比较好一些！</strong></p>

<p><strong><em>当然，如果你跟我一样喜欢折腾，不怕纠结，我不介意你一块学！不过，你遇到什么样的问题，那我就不保证了，反正我当时好长一段时间是蛮惨的！</em></strong></p>

<p>使用这个包，实现的方法一般有两种，就是使用<code>qplot()</code>函数和<code>ggplot()</code>函数：</p>

<p><code>r
qplot(x, y, geom = c("point", "smooth"), method = "lm", se = FALSE) + geom_smooth(method = "loess",
    color = "red", se = FALSE, lty = 2)
</code></p>

<p><img src="/images/a36/17.png" alt="plot of chunk 17" /></p>

<p>或者：</p>

<p><code>r
dataSet &lt;- data.frame(x = x, y = y)
ggplot(aes(x, y), data = dataSet) + geom_point() + geom_smooth(method = "lm",
    color = "green", lty = 1, se = FALSE) + geom_smooth(method = "loess", color = "red",
    lty = 2, se = FALSE)
</code></p>

<p><img src="/images/a36/18.png" alt="plot of chunk 18" /></p>
]]></content>
  </entry>
  
</feed>
