<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Regression | Jacky and MSC]]></title>
  <link href="http://jackycode.github.io/blog/categories/regression/atom.xml" rel="self"/>
  <link href="http://jackycode.github.io/"/>
  <updated>2014-05-04T10:42:14+08:00</updated>
  <id>http://jackycode.github.io/</id>
  <author>
    <name><![CDATA[Jacky Code]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[数据科学之机器学习12: Logisic回归]]></title>
    <link href="http://jackycode.github.io/blog/2014/04/27/logistic-regression/"/>
    <updated>2014-04-27T10:34:11+08:00</updated>
    <id>http://jackycode.github.io/blog/2014/04/27/logistic-regression</id>
    <content type="html"><![CDATA[<p><img src="/images/artical/artical27.jpg" alt="artical 27" />
<!-- more --></p>

<p><em>“文章原创，转载请注明出处”</em></p>

<hr />

<p>在数据科学系列的开头，花了三篇介绍了线性回归。线性回归模型应该是定量分析中最常用的一种统计分析方法。但是线性回归处理数据时，要求因变量是连续型变量。但是很多时候，需要处理的数据，其因变量并不是连续的。像性别、对错等等，这种离散的因变量，一般称为分类响应变量。</p>

<p>在机器学习的<a href="http://jackycode.github.io/blog/2014/03/30/data-science-an-introduction-to-machine-learning/">介绍篇</a>中，已经介绍了监督学习与非监督学习。在监督学习中，最主要的两类问题，一个就是回归，另一个就是分类。而Logistic回归就是处理二元分类的一种方法，当然其也存在自身的问题，这个后面再讲。</p>

<h4 id="sigmoid">Sigmoid函数</h4>
<hr />

<p>要了解Logistic回归，首先需要了解一下Sigmoid函数。为什么呢？</p>

<p>一般来说，我们会定义二元分类变量的输出为0和1，这种函数叫做单位阶跃函数，也称Heaviside step function。这个函数的特点就是其取值可以从0突变到1，反之也可。学过数分的话就知道，这种函数有时候会非常难以处理，因为带跳突变，导致了不可微不可导。在这里，就可以借助Sigmoid函数，因为这个函数可以近似地描述单位阶跃函数的特点。首先看看Sigmoid函数：</p>

<script type="math/tex; mode=display"> p = \frac{exp(y)}{1+exp(y)} = \frac{1}{1 + exp(-y)}</script>

<p>简单看一下这个函数，当$y=0$时，$p=0.5$；当$y$变大，趋近于无穷时，$y$趋近1；反之，$y$趋近0。而且，这种趋近的速度是非常快的。正是因为这个趋近速度非常快，我们可以使用Sigmoid函数来处理这边的单位阶跃函数。</p>

<h4 id="logistic">Logistic回归</h4>
<hr />

<p>利用Sigmoid函数可以将单位阶跃函数做个近似，而Sigmoid函数是连续的，那么就可以利用之前的线性回归来建立模型。</p>

<p>令$ y = X\beta $，又<script type="math/tex"> p = \frac{1}{1 + exp(-y)} </script>，变形可得Logistic回归模型：</p>

<script type="math/tex; mode=display"> logit(p) = ln(\frac{p}{1-p}) = X\beta </script>

<p>上述的$logit(p)$称为$logit$变换，此时$p$就是响应变量，$X$就是自变量。到这，我们就可以利用线性模型对参数进行估计了。</p>

<h5 id="section">统计中的解释</h5>
<hr />

<p>这里面的$p$除了利用Sigmoid函数来解释之外，还可以利用统计中的二项分布来解释，而且从某种角度来说，这个解释会更便于理解。试想，我们这边需要处理的二元分类变量就是0和1。我们考虑0就是“不发生”，1就是“发生”，那么我们可以将前面的$p$理解成发生的概率。通过对已知数据建立模型，估计出参数，我们就可以利用模型去预测在不同的自变量条件下，“发生”的概率是多大，从而达到一个分类的目的。</p>

<p>从这边的分析就可以看到，Logistic回归的缺点：那就是欠拟合，会导致分类的精度下降。</p>

<h5 id="r">R语言实现</h5>
<hr />

<p>因为这个属于线性回归的一种变形，所以求解的方式直接<strong>借用线性回归</strong>即可。</p>

<p>当然，也存在其它的方法。因为Logistic回归是属于广义线性回归模型的，在R中有专门处理广义线性模型的函数<code>glm</code>：</p>

<p><code>
model &lt;- glm(formula, family=binominal(link = logit), data=data.frame)
</code></p>

<p>这里处理的方式中，利用了连接函数(link=logit)，感兴趣的话可以找找广义线性模型的内容看看，当然，以后如果介绍统计模型的话，这个肯定也是必讲得内容。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[数据科学之机器学习4：线性回归3]]></title>
    <link href="http://jackycode.github.io/blog/2014/04/02/linear-regression3/"/>
    <updated>2014-04-02T18:51:29+08:00</updated>
    <id>http://jackycode.github.io/blog/2014/04/02/linear-regression3</id>
    <content type="html"><![CDATA[<p><img src="/images/artical/artical18.jpg" alt="artical 18" />
<!-- more --></p>

<p><em>“文章原创，转载请注明出处”</em></p>

<hr />

<p>这是介绍线性回归的最后一篇，首先回顾一下之前的两篇。第一篇主要就是介绍了如何去估计回归系数得到回归方程，以及在R语言中如何使用自带的函数去实现。第二篇主要介绍了对于回归方程和回归系数的显著性检验，以及给出了我自己写的一个处理线性回归的函数。</p>

<p>这一篇介绍线性回归中回归诊断的一些问题，也就是估计出回归方程，检验了回归方程的显著性以及回归系数的显著性后，对这个模型所做的进一步的诊断分析。然后对存在的问题进行探讨，选择不同的方式去解决这些问题。这大致可以分成三块：残差分析，影响分析以及共线性问题。</p>

<hr />

<h4 id="section">一、残差分析</h4>

<hr />

<h5 id="section-1">1. 残差</h5>

<hr />

<p>首先看一看残差的定义，常用的残差大致有三种：残差，标准化残差以及学生化残差：</p>

<ul>
  <li>残差：<script type="math/tex">\hat{\varepsilon} = y - \hat{y} = (1-H)y</script>,其中<script type="math/tex">H=X(X^TX)^{-1}X</script>称作帽子矩阵；</li>
  <li>标准化残差：<script type="math/tex">ZRE = \hat{\varepsilon} / \hat{\sigma}</script></li>
  <li>学生化残差：<script type="math/tex">SRE_i = \hat{\varepsilon}_i / (\hat{\sigma}\sqrt{1-h_{ii}})</script>，其中<script type="math/tex">h_{ii}</script>为帽子矩阵对角线上第$i$个元素。</li>
</ul>

<hr />

<p><strong>R语言中</strong></p>

<p>使用<code>residuals(),rstandard(),rstudent()</code>函数计算残差，标准化残差以及学生化残差。具体用法，请使用<code>help</code>函数查看。</p>

<hr />

<h5 id="section-2">2. 残差图</h5>

<hr />

<p>以残差为纵坐标，观测值、预测值活则观测时间等等作为横坐标的散点图，称为<strong>残差图</strong>。</p>

<hr />

<p><strong>R语言中</strong></p>

<p><code>r
model = lm(y~x1+x2)
y_pred = predict(model)
y_res = residuals(model)
plot(y_res ~ y_pred)
</code>
***</p>

<h5 id="section-3">3. 异方差问题</h5>

<hr />

<h6 id="a-">a. 问题的提出</h6>

<hr />

<p>在进行回归方程估计之前，一般都会假设误差的方差是齐性的。如果残差图出现类似下面的情况，则这批数据可能存在异方差问题，即方差非齐性。</p>

<ol>
  <li>随着横坐标的增大，纵坐标的值波动越来越大；</li>
  <li>随着横坐标的增大，纵坐标的值波动越来越小；</li>
  <li>随着横坐标的增大，纵坐标的值波动复杂多变，没有系统关系；</li>
</ol>

<p>大部分时候，考虑前两种就可以了。那么具体如何数值化地检验异方差呢，一般使用的是等级相关系数法，这里不做介绍(可到线性回归的书籍中寻找)。</p>

<hr />

<h6 id="b-">b. 问题的解决</h6>

<hr />

<p>一般有两种方式解决异方差问题，一种是加权最小二乘；另一种是对因变量作适当的变化。</p>

<ol>
  <li>
    <p>加权最小二乘</p>

    <p>即是将回归系数的估计转化成：<script type="math/tex">\hat{\beta}=(X^TWX)^{-1}X^TWy</script>，其中<script type="math/tex">W</script>是一个对角矩阵，用于给每一个数据点加上一个权重。一般使用“核”来对附近的点赋予较高的权重，常用的核就是高斯核，其对应的权重为：</p>

<script type="math/tex; mode=display">w_{ii}=exp(\frac{\|x^{(i)}-x\|}{-2k^2})</script>

    <p>从上式可以看出，点$x$离$x^{(i)}$越近，所得到的权重越高。</p>
  </li>
  <li>
    <p>对因变量作适当变化</p>

    <p>常用的变换有：</p>

    <ul>
      <li>$z = \sqrt{y}$</li>
      <li>$z = ln(y)$（对数变换）</li>
      <li>$z = 1/y$</li>
      <li>$z = \frac{x^{\lambda}-1}{\lambda}$(Box-Cox变换)，其中$\lambda=0$时，即是对数变换</li>
    </ul>
  </li>
</ol>

<hr />

<h5 id="section-4">4. 异常点</h5>

<hr />

<h6 id="a--1">a. 问题的提出</h6>

<hr />

<p>一般将标准化残差的绝对值大于等于2的称为可疑点；将标准化残差的绝对值大于等于3的称为异常点。</p>

<hr />

<h6 id="b--1">b. 问题的解决</h6>

<hr />

<p>一般来说，剔除异常数据即可。</p>

<hr />

<h5 id="section-5">5. 自相关问题</h5>

<hr />

<p>在作回归之前，总是会假设<script type="math/tex">cov(\varepsilon_i, \varepsilon_j)=0,\forall i \neq j</script>。但是实际情况下，可能并不满足这个假设，这就是存在了自相关问题。对于自相关问题，一般使用残差图，自相关系数以及DW检验去进行检验；而处理的方式一般是：迭代法和差分法。这里不做详细介绍，感兴趣的可以去找找相关材料。</p>

<hr />

<h4 id="section-6">二、影响分析</h4>

<hr />

<p>分析观测值对回归结果的影响，从而找出对回归结果影响较大的观测点的分析方法叫做影响分析。一般使用Cook距离去度量第$i$个观测值对回归影响大小，Cook距离的定义如下：</p>

<script type="math/tex; mode=display">D_i(M,MSE) = \frac{(\hat{\beta}_{(i)}-\hat{\beta})^TM(\hat{\beta}_{(i)}-\hat{\beta})}{MSE}</script>

<p>其中，$M$为观测数据的离差阵，$MSE$为回归模型的均方误差。一般<script type="math/tex">\|D_i\| \geqslant 4/n</script>时，称其为强影响点。</p>

<hr />

<p><strong>R语言中</strong></p>

<p>使用<code>cooks.distance()</code>函数计算Cook距离。</p>

<hr />

<h4 id="section-7">三、共线性诊断</h4>

<hr />

<p>共线性是指，在多元线性回归中，自变量之间存在线性关系或者近似线性关系。如果出现这种情况，那么在模型内部就会隐藏部分变量的显著性，也会导致参数估计的误差增大，影响模型的稳定性。</p>

<hr />

<h5 id="a--2">a. 检验方法</h5>

<hr />

<p>常用的检验方法有特征值法，条件数和方差膨胀因子（VIF）。</p>

<hr />

<h6 id="section-8">特征值法</h6>

<hr />

<p>首先介绍一个结论：当矩阵$X^TX$至少有一个特征根为0时，$X$的列向量间必存在多重共线性。</p>

<p>即可证：$X^TX$有多少个特征根接近于零，设计阵$X$就有多少个多重共线性。</p>

<hr />

<p><strong>在R语言中</strong></p>

<p>可以使用<code>eigen()</code>函数去计算特征值和特征向量。</p>

<hr />

<h6 id="section-9">条件数</h6>

<hr />

<p>上述的特征值法中，特征根近似为0，这个标准好想并不明确。那么这边就给出一个条件数的定义：</p>

<script type="math/tex; mode=display">k_i = \frac{\lambda_m}{\lambda_i}</script>

<p>其中，<script type="math/tex">\lambda_m</script>为最大的那个特征根。一般认为，若$k_i$介于10到30之间为弱相关；在30到100之间为中等相关；超过100为强相关。</p>

<hr />

<p><strong>在R语言中</strong></p>

<p>可以使用<code>kappa()</code>函数计算条件数。</p>

<hr />

<h6 id="vif">VIF</h6>

<hr />

<p>定义VIF为：</p>

<script type="math/tex; mode=display">VIF_i = \frac{\text{第i个回归系数的方差}}{\text{自变量不相关时第i个回归系数的方差}} = \frac{1}{1-R^2_i} = \frac{1}{TOL_i}</script>

<p>其中$TOL_i$称为容忍度；$R^2_i$为自变量$x_i$对其余自变量的复决定系数。一般认为，VIF超过10，模型就存在共线性问题。</p>

<hr />

<p><strong>在R语言中</strong></p>

<p>可以使用<code>vif()</code>函数计算VIF的值。</p>

<hr />

<h5 id="b--2">b. 多重共线性的处理</h5>

<hr />

<p>一般有这样几种处理方式：</p>

<ol>
  <li>
    <p>剔除一些不重要的解释变量</p>

    <ol>
      <li>使用变量选择的方式剔除部分变量，作回归；</li>
      <li>检验VIF，若存在共线性，删除VIF值最大的变量，作回归；</li>
      <li>再次检验VIF，若还存在共线性，再删除其中VIF值最大的那个；</li>
      <li>重复直至消除共线性。</li>
    </ol>
  </li>
  <li>
    <p>增大样本容量</p>

    <p>当变量的个数接近样本容量的数值时，自变量间容易产生多重共线性。所以增大样本容量是解决多重共线性的一种方式，但是在现实中，这种做法基本不可能。</p>
  </li>
  <li>
    <p>主成分回归</p>

    <p>这是一个比较大的主题，这里不做介绍。</p>
  </li>
  <li>
    <p>有偏估计等等。</p>
  </li>
</ol>

<hr />

<h3 id="section-10">最后</h3>

<hr />

<p>到这里，除了变量选择问题，线性回归的内容基本上就已经梳理了一遍。变量选择问题，方法简单的非常简单，难的非常难（像lasso），所以暂时还不想写这些内容。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[数据科学之机器学习3：线性回归2]]></title>
    <link href="http://jackycode.github.io/blog/2014/04/01/linear-regression2/"/>
    <updated>2014-04-01T16:56:57+08:00</updated>
    <id>http://jackycode.github.io/blog/2014/04/01/linear-regression2</id>
    <content type="html"><![CDATA[<p><img src="/images/artical/artical17.jpg" alt="artical 17" />
<!-- more --></p>

<p><em>“文章原创，转载请注明出处”</em></p>

<hr />

<p>上一篇简单介绍了线性回归中系数估计的问题，给出了一元以及多元情况下，系数估计值的表达式！此外，还给出了在R语言中如何使用自带的函数计算系数估计值。</p>

<p>这一篇，打算介绍一下线性回归中的一些显著性检验问题。这个就是完全属于统计学中的理论内容，不过依旧有着很强的实际意义。简单来说，显著性检验不能通过，说明你的线性回归的效果不好，可能你就需要选择其它的方式去处理你手头的数据，而不是选择线性回归了。</p>

<hr />

<h4 id="section">一、回归方程的显著性检验</h4>

<hr />

<p>考虑回归方程是否显著，意思就是查看自变量<script type="math/tex">x_1,x_2,\dots,x_p</script>从整体上是否对因变量<script type="math/tex">y</script>有显著的影响。则，我们可以考虑这样的假设检验问题：</p>

<script type="math/tex; mode=display"> H_0:\beta_0=\beta_1=\dots=\beta_p=0;~H_1:\beta_0,\beta_1,\dots,\beta_p\text{不全为0}</script>

<p>显然，如果原假设成立的话，自变量对因变量的影响不大，也就是用线性回归模型来解释就显得不合适了。</p>

<p>在正态假设下，原假设<script type="math/tex">H_0</script>成立时，有<script type="math/tex">F</script>检验统计量：</p>

<script type="math/tex; mode=display"> F = \frac{SSR/p}{SSE/(n-p-1)} \sim F(p,n-p-1) </script>

<p>其中<script type="math/tex">SSR=\sum_{i=1}^{n}{(\hat{y}_i-\overline{y})^2}</script>为回归平方和，<script type="math/tex">SSE=\sum_{i=1}^{n}{(y_i-\hat{y}_i)^2}</script>为残差平方和。对于给定的显著性水平$\alpha$，拒绝域为：<script type="math/tex">\{F \geqslant F_{1-\alpha}(p,n-p-1)\}</script>。</p>

<hr />

<h4 id="section-1">二、回归系数的显著性检验</h4>

<hr />

<p>显然，线性回归中很有可能就存在某个自变量对因变量的影响很小，那么它的回归系数就会接近0.因此有如下的假设检验问题：</p>

<script type="math/tex; mode=display">H_{0j}:\beta_j = 0; ~ H_{1j}:\beta_j \neq 0, ~ j=0,1,\dots,p</script>

<p>在原假设成立的条件下，$t$统计量有：</p>

<script type="math/tex; mode=display">t_j = \frac{\hat{\beta}_j}{\sqrt{c_{jj}}\hat{\sigma}} \sim t(n-p-1)</script>

<p>其中，<script type="math/tex">(c_{ij})=(X^TX)^{-1},i,j=0,1,\dots,p;~\hat{\sigma}=\sqrt{\frac{1}{n-p-1}\sum_{i=1}^{n}{(y_i-\hat{y}_i)^2}}</script>。对于给定的显著性水平$\alpha$，拒绝域为：<script type="math/tex">\{\|t_j\| \geqslant t_{\alpha/2}\}</script>。</p>

<hr />

<h4 id="r">三、R语言中的实现</h4>

<hr />

<p>在上一篇中可以看到，<code>lm</code>函数加上<code>summary</code>函数会有很多的输出内容。其实，那些输出中就含有上述的假设检验的结果，很容易就可以找到，这里不做阐述！</p>

<p>我自己也写了一个关于线性回归的R语言函数，托管在<a href="https://github.com/JackyCode/Data_Science/tree/master/Linear_Regression">我的github</a>上面，函数内部对于线性回归的过程大都涉及到了，有兴趣可以看看。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[数据科学之机器学习2：线性回归1]]></title>
    <link href="http://jackycode.github.io/blog/2014/03/30/machine-learning1/"/>
    <updated>2014-03-30T19:02:30+08:00</updated>
    <id>http://jackycode.github.io/blog/2014/03/30/machine-learning1</id>
    <content type="html"><![CDATA[<p><img src="/images/artical/artical16.jpg" alt="artical 16" />
<!-- more --></p>

<p><em>“文章原创，转载请注明出处”</em></p>

<hr />

<h4 id="section">一、回归分析</h4>

<hr />

<p>在统计分析中，最大的两支应该算是相关分析和回归分析。而回归分析应该是统计学的核心。回归分析，就是研究因变量$y$与自变量$x$之间的关系，存在条件数学期望：$f(x)=E(y|x)$。此时有：$y=f(x)+\varepsilon$，一般假设$\varepsilon \sim N(0,\sigma^2)$。</p>

<p>回归分析有很多变种：简单线性回归；多项式回归；Logistic回归；非参数回归；非线性回归等等。本篇就介绍最简单的线性回归，首先来看看一元线性回归。</p>

<hr />

<h4 id="section-1">二、一元线性回归</h4>

<hr />

<p>对于一元线性回归来说，$f(x)$就是线性的，则有：$f(x)=E(y|x)=\beta_0 + \beta_1 x$。通过已知的数据，可以估计出$\beta_0,\beta_1$的估计值：$\hat{\beta}_0,\hat{\beta}_1$。那么就有$y$的预测值：$\hat{y} = \hat{\beta}_0 + \hat{\beta}_1 x$。</p>

<hr />

<h5 id="beta0beta1hatbeta0hatbeta1">1. 如何计算$\beta_0,\beta_1$的估计值$\hat{\beta}_0,\hat{\beta}_1$呢？</h5>

<hr />

<p>定义离差平方和：</p>

<script type="math/tex; mode=display">Q(\beta_0,\beta_1) = \sum_{i=1}^{n}(y_i-f(x_i))^2</script>

<p>显然，我们希望$f(x_i)$的值与真实值$y_i$越接近越好。那么就是需要离差平方和越小越好。则得到目标：</p>

<script type="math/tex; mode=display"> \min_{\beta_0,\beta_1}{\sum_{i=1}^{n}(y_i-f(x_i))^2} </script>

<p>如何寻找$\hat{\beta}_0,\hat{\beta}_1$使得上面方程达到最小呢？这个就需要对其对$\hat{\beta}_0,\hat{\beta}_1$求偏导，得到：</p>

<script type="math/tex; mode=display">\frac{\partial Q}{\partial \beta_0}=-2\sum_{i=1}^{n}{(y_i-\beta_0-\beta_1x_i)}</script>

<script type="math/tex; mode=display">\frac{\partial Q}{\partial \beta_1}=-2\sum_{i=1}^{n}{(y_i-\beta_0-\beta_1x_i)x_i}</script>

<p>令上述两式都等于0，计算得到：</p>

<script type="math/tex; mode=display">\hat{\beta}_0=\overline{y}-\hat{\beta}_1\overline{x}</script>

<script type="math/tex; mode=display">\hat{\beta}_1=\frac{\sum_{i=1}^{n}{(x_i-\overline{x})(y_i-\overline{x})}}{\sum_{i=1}^{n}{(x-\overline{x})^2}}</script>

<p>这样就得到$\beta_0,\beta_1$的估计值$\hat{\beta}_0,\hat{\beta}_1$。这个方法就叫做OLS，即普通最小二乘(ordinary least squares)。</p>

<hr />

<h5 id="r">2. R语言实现</h5>

<hr />

<p>在R语言中有自带的函数可以处理线性回归，那就是<code>lm</code>函数。这里使用自带的数据<code>cars</code>做演示：</p>

<p>``` r
&gt; attach(cars) # 使用数据集cars，与with函数类似
&gt; lingre &lt;- lm(dist ~ speed)
&gt; summary(lingre)</p>

<p>Call:
lm(formula = dist ~ speed)</p>

<p>Residuals:
    Min      1Q  Median      3Q     Max 
-29.069  -9.525  -2.272   9.215  43.201 </p>

<p>Coefficients:
            Estimate Std. Error t value Pr(&gt;|t|)  <br />
(Intercept) -17.5791     6.7584  -2.601   0.0123 *<br />
speed         3.9324     0.4155   9.464 1.49e-12 <strong>*
—
Signif. codes:  0 ‘</strong><em>’ 0.001 ‘**’ 0.01 ‘</em>’ 0.05 ‘.’ 0.1 ‘ ’ 1</p>

<p>Residual standard error: 15.38 on 48 degrees of freedom
Multiple R-squared:  0.6511,	Adjusted R-squared:  0.6438 
F-statistic: 89.57 on 1 and 48 DF,  p-value: 1.49e-12</p>

<blockquote>
  <p>plot(dist ~ speed, pch=4) # 画出散点图
abline(lingre, col=’red’) # 添加拟合直线
detach(cars) # 使用完记得释放
```</p>
</blockquote>

<p>从这里可以得到回归方程：$\hat{dist} = -17.5791 + 3.9324 \times speed$。（对于其它的结果是什么意思，可以去查看线性回归的相关书籍）</p>

<p>另外，得到拟合直线的图像：</p>

<p><img src="\images\a16\lingre_one.jpg" alt="lingre_one" /></p>

<hr />

<h4 id="section-2">三、多元线性回归</h4>

<hr />

<p>对于多元线性回归来说，其计算方式与一元线性回归类似，区别在于，多元的时候需要利用矩阵来处理。首先看一下回归模型：</p>

<script type="math/tex; mode=display"> y = \beta_0 + \beta_1 x_1 + \beta_2 x_2 + \dots + \beta_p x_p + \varepsilon </script>

<p>其中$p$代表自变量的个数。</p>

<p>若取$x^T_0=[1, 1, \dots, 1]_{1 \times n}$，则可将上述模型改写成：<script type="math/tex">y=X\beta+\varepsilon</script>。其中：</p>

<script type="math/tex; mode=display">y^T=[y_1,y_2,\dots,y_n], X=[x_0,x_1,\dots,x_p], \beta^T=[\beta_0,\beta_1,\dots,\beta_p], \varepsilon^T=[\varepsilon_1,\varepsilon_2,\dots,\varepsilon_n]</script>

<p>其中<script type="math/tex">x^T_i=[x_{1i},x_{2i},\dots,x_{ni}]</script>。</p>

<p>这样我们就可以将离差平方和<script type="math/tex">\sum_{i=1}^{n}{(y_i-\beta_0 + \beta_1 x_1 + \beta_2 x_2 + \dots + \beta_p x_p)^2}</script>写成矩阵形式：</p>

<script type="math/tex; mode=display">(y-X\beta)^T(y-X\beta)</script>

<p>求导可得：<script type="math/tex">-2X^T(y-X\beta)</script>(这里用到矩阵求导的知识，一般介绍<strong>线性模型</strong>的书籍中会讲到；当然也可以直接对上面不是矩阵形式的离差平和求导)。令其等于0，可得：</p>

<script type="math/tex; mode=display">\hat{\beta} = (X^TX)^{-1}X^Ty</script>

<hr />

<h5 id="r-1">R语言实现</h5>

<hr />

<p>对于R语言的实现，依旧使用<code>lm</code>函数：</p>

<p><code>r
lingre_mul &lt;- lm(y ~ x1 + x2, data=datasets)
summary(lingre_mul)
</code></p>

<p>这里就不再用实际数据去演示了。</p>

<hr />

<h4 id="section-3">四、最后</h4>

<hr />

<p>至此，就把线性回归的基础内容介绍完了。但其实线性回归还存在很多其它的问题。比如说回归诊断（就是检查回归的效果），变量选择等等等等。感兴趣的话，可以找本讲线性回归的书看看，有很多！</p>
]]></content>
  </entry>
  
</feed>
