<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: RSeries | Jacky and MSC]]></title>
  <link href="http://jackycode.github.io/blog/categories/rseries/atom.xml" rel="self"/>
  <link href="http://jackycode.github.io/"/>
  <updated>2014-05-04T10:42:14+08:00</updated>
  <id>http://jackycode.github.io/</id>
  <author>
    <name><![CDATA[Jacky Code]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[R语言记录7：相关分析]]></title>
    <link href="http://jackycode.github.io/blog/2014/03/17/rseries7/"/>
    <updated>2014-03-17T16:46:47+08:00</updated>
    <id>http://jackycode.github.io/blog/2014/03/17/rseries7</id>
    <content type="html"><![CDATA[<p><img src="/images/artical/artical10.jpg" alt="aritical 10" />
<!-- more --></p>

<p><em>“文章原创，转载请注明出处”</em></p>

<hr />

<p>变量之间的关系，大致可分为两种：<em>函数关系</em>和<em>相关关系</em>。</p>

<p>函数关系，简单来说就是可以将变量之间的关系用方程(其实就是函数)来描述：$y=f(x)$，处理这种关系对应的统计方法就是<strong><em>回归分析</em></strong>。</p>

<p>相关关系，就是指变量之间存在不完全确定的依赖关系，其数值不能够使用函数表示出来，这个对应的就是<strong><em>相关分析</em></strong>。</p>

<p>判断变量之间是否存在相关关系，最直接简单的方法就是画出两个变量之间的散点图。</p>

<h4 id="section">1. 散点图</h4>
<p>我们使用<code>cars</code>数据集中的数据进行演示,<code>cars</code>数据集中包含了汽车速度与制动距离的数据，显然直观感觉这两个变量之间肯定存在相关关系。画个散点图看看：</p>

<p><code>r Correlation_Analysis.r https://github.com/JackyCode/RSeries
&gt; head(cars)
  speed dist
1     4    2
2     4   10
3     7    4
4     7   22
5     8   16
6     9   10
&gt; with (cars, {
+ 	plot(speed, dist)
+ })
</code></p>

<p>得到如下图形：</p>

<p><img src="/images/RSeries7/scatter.jpg" alt="scatter" /></p>

<p>从散点图看，汽车速度与其制动距离存在相关关系。但是，仅仅从图像来看，我们只能得到大概是否相关，而不能给出一个确切的描述。那么就希望能够找到一个方法，能够描述变量之间有多相关，程度有多大。</p>

<h4 id="section-1">2. 相关的种类</h4>
<p>根据相关程度，我们可以给相关进行分类：完全相关，不完全相关，完全不相关；而根据相关方向的不同，又可以分类：正相关(一个变大另一个也变大)，负相关。那么怎么用数学的方式去描述这些种类呢，那就需要用到相关系数。</p>

<h5 id="section-2">(1). 相关系数</h5>
<p>相关系数的符号用来代表正负相关($+$ -&gt; 正；$-$ -&gt; 负)，其值的大小用来描述相关程度的大小(0~1:完全不相关~完全相关)。相关系数的定义有很多，常用的有Person相关系数、Spearman相关系数等等。这里给出最常用的Person相关系数的计算方法：</p>

<script type="math/tex; mode=display">\gamma=\frac{\sum_{i=1}^{n}{(x_i-\overline{x})(y_i-\overline{y})}}{\sqrt{\sum_{i=1}^{n}{(x_i-\overline{x})^2}\sum_{i=1}^{n}{(y_i-\overline{y})^2}}}</script>

<p>当样本个数充分大时，样本相关系数可以作为总体相关系数的估计。</p>

<p>在R中，可以使用<code>cor</code>函数来得到变量间的相关系数矩阵：</p>

<p><code>r Correlation_Analysis.r https://github.com/JackyCode/RSeries
&gt; cor(cars)
          speed      dist
speed 1.0000000 0.8068949
dist  0.8068949 1.0000000
</code></p>

<p>可以看到，$corr(speed, dist)=0.8068949$，说明汽车速度与其制动距离之间存在较强的正相关关系。</p>

<h6 id="section-3">注：</h6>
<p>可以指定<code>cor</code>的参数得到不同的相关系数：</p>

<p><code>r Correlation_Analysis.r https://github.com/JackyCode/RSeries
&gt; cor(cars, method='spearman')
          speed      dist
speed 1.0000000 0.8303568
dist  0.8303568 1.0000000
</code></p>

<h5 id="section-4">(2). 相关性的显著性检验</h5>
<p>得到了两个变量之间的相关系数，那就需要检验，得到的结果是否能够通过显著性检验。即相关性到底显著与否。</p>

<p>这里需要建立假设检验：$H_0:$ 变量X和Y不相关；那么可以构造检验统计量如下：</p>

<script type="math/tex; mode=display">T = \frac{\gamma(X,Y)\sqrt{n-2}}{\sqrt{1-\gamma(X,Y)^2}}</script>

<p>在零假设成立的条件下，<script type="math/tex">T \sim t(n-2)</script>。那么若有$T &gt; t_{1-\alpha}(n-2)$，则拒绝原假设，说明变量X和Y存在显著的相关关系。</p>

<h6 id="section-5">注：这里提到的内容可以到参数统计的书籍上寻找。</h6>

<p>在R中，我们可以使用<code>cor.test</code>函数很轻松地对此进行检验：</p>

<p>``` r Correlation_Analysis.r https://github.com/JackyCode/RSeries
&gt; with(cars, {
+ 	cor.test(speed, dist)
+ })</p>

<pre><code>Pearson's product-moment correlation
</code></pre>

<p>data:  speed and dist
t = 9.464, df = 48, p-value = 1.49e-12
alternative hypothesis: true correlation is not equal to 0
95 percent confidence interval:
 0.6816422 0.8862036
sample estimates:
      cor 
0.8068949 
```</p>

<p>从结果可以看到，$t=9.464$这个不容易看出来结果，因为还需要查表。我们可以选择直接看$p$值：1.49e-12，比0.05小太多了。故而拒绝原假设，认为汽车速度与制动距离存在高度相关关系。</p>

<h6 id="spearman">注：这里如何修改，使得其使用spearman相关系数呢？</h6>

<p>到此，就将相关分析的大致内容进行了阐述。但是，相关分析也还有很多其它内容，比如偏相关等等。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[R语言记录6：描述统计2]]></title>
    <link href="http://jackycode.github.io/blog/2014/03/14/rseries6/"/>
    <updated>2014-03-14T16:31:26+08:00</updated>
    <id>http://jackycode.github.io/blog/2014/03/14/rseries6</id>
    <content type="html"><![CDATA[<p><img src="/images/artical/artical9.jpg" alt="aritical 9" />
<!-- more --></p>

<p><em>“文章原创，转载请注明出处”</em></p>

<hr />

<h4 id="section">二. 可视化</h4>
<p>开头我们就说过，描述性统计分析包括计算统计量的值，也可以进行制表画图。首先我们看看如何在R中绘制列联表：</p>

<h5 id="section-1">1. 频数表和列联表</h5>
<p>如果数据集中对应的变量都是定性变量，即是上一节中我们所说的分类数据（还记得分组数据的描述性统计量的计算吗）。对于这种数据，作图很多时候并没有太大的意义。一般，我们会采取绘制列联表的方式去描述数据。</p>

<p>在数据集<code>mtcars</code>中，有不少定性变量，这里取出其中的<code>am</code>,<code>gear</code>和<code>carb</code>作演示。首先看看一维的情况：</p>

<p>``` r descriptvie_statistics2.R https://github.com/JackyCode/RSeries
&gt; dataSub &lt;- data.frame(am=mtcars$am, gear=mtcars$gear, carb=mtcars$carb)
&gt; head(dataSub)
  am gear carb
1  1    4    4
2  1    4    4
3  1    4    1
4  0    3    1
5  0    3    2
6  0    3    1
&gt; with(dataSub, {
+ 	mytable &lt;- list(table(am), table(gear), table(carb))
+ 	mytable
+ })
[[1]]
am
 0  1 
19 13 </p>

<p>[[2]]
gear
 3  4  5 
15 12  5 </p>

<p>[[3]]
carb
 1  2  3  4  6  8 
 7 10  3 10  1  1 
```</p>

<p>一维的情况，其实就是统计频数，把每个类别各自的频数计算出来就可以了。像<code>am</code>变量，其结果告诉我们，用自动挡的有19人，用手动挡的是13人(0 -&gt; 19; 1 -&gt; 13)。再来看看二维的：</p>

<p>``` r descriptvie_statistics2.R https://github.com/JackyCode/RSeries
&gt; with(dataSub, {
+ 	mytable2 &lt;- list(table(am, carb), table(carb, am))
+ 	mytable2
+ })
[[1]]
   carb
am  1 2 3 4 6 8
  0 3 6 3 7 0 0
  1 4 4 0 3 1 1</p>

<p>[[2]]
    am
carb 0 1
   1 3 4
   2 6 4
   3 3 0
   4 7 3
   6 0 1
   8 0 1
```</p>

<p>可以看到，对于二维来说，绘制的方法与一维类似。但是，这里有个可以深入的东西，那就是边际列表。也就是利用二维列联表得到一维列联表：</p>

<p>``` r descriptvie_statistics2.R https://github.com/JackyCode/RSeries
&gt; with(dataSub, {
+ 	mytable2 &lt;- list(table(am, carb), table(carb, am))
+ 	mytableConvert &lt;- list(margin.table(mytable2[[1]], 1), 
+ 		margin.table(mytable2[[1]], 2)) # 选项1和2控制按行和按列
+ 	mytableConvert
+ })
[[1]]
am
 0  1 
19 13 </p>

<p>[[2]]
carb
 1  2  3  4  6  8 
 7 10  3 10  1  1 
```</p>

<p>可以看到，使用<code>margin.table</code>函数可以很容易得到一个列表的边际列表。下面看看三维的情况：</p>

<p>``` r descriptvie_statistics2.R https://github.com/JackyCode/RSeries
&gt; with(dataSub, {
+ 	mytable3 &lt;- table(am, carb, gear)
+ 	mytable3
+ })
, , gear = 3</p>

<p>carb
am  1 2 3 4 6 8
  0 3 4 3 5 0 0
  1 0 0 0 0 0 0</p>

<p>, , gear = 4</p>

<p>carb
am  1 2 3 4 6 8
  0 0 2 0 2 0 0
  1 4 2 0 2 0 0</p>

<p>, , gear = 5</p>

<p>carb
am  1 2 3 4 6 8
  0 0 0 0 0 0 0
  1 0 2 0 1 1 1
```</p>

<p>其实<code>table</code>函数可以处理三维以及三维以上的列联表，你可以自己试一试。现在我们已经能够使用R轻松地绘制出频数表了，但很多时候，我们希望得到的是频率表，那应该怎么绘制呢？试试这个函数<code>prop.table()</code>：</p>

<p><code>r descriptvie_statistics2.R https://github.com/JackyCode/RSeries
&gt; with(dataSub, {
+ 	mytable &lt;- list(table(am), table(gear), table(carb))
+ 	prop.table(mytable[[1]])
+ })
am
      0       1 
0.59375 0.40625 
</code></p>

<p>二维以及以上都可以这么处理。那么，如果需要求的是全局相对频率列联表呢？想想，那不就是频数除以总数嘛，直接一句代码不就搞定了嘛：</p>

<p><code>r descriptvie_statistics2.R https://github.com/JackyCode/RSeries
&gt; with(dataSub, {
+ 	mytable2 &lt;- list(table(am, carb), table(carb, am))
+ 	mytable2[[1]]/sum(mytable2[[1]])
+ })
   carb
am        1       2       3       4       6       8
  0 0.09375 0.18750 0.09375 0.21875 0.00000 0.00000
  1 0.12500 0.12500 0.00000 0.09375 0.03125 0.03125
</code></p>

<h5 id="section-2">2. 图形</h5>
<p>常用的图形一般有：直方图，散点图，框须图等等。我们一个一个来看一下：</p>

<h6 id="a-">a. 直方图</h6>
<p>我们使用<code>mtcars$mpg</code>数据作演示，首先你可以检查一下<code>mpg</code>的范围，然后确定频数直方图的分割大小(使用参数<code>break</code>设定)，这里我们不设定，让R自动生成：</p>

<p><code>r descriptvie_statistics2.R https://github.com/JackyCode/RSeries
&gt; range(mtcars$mpg)
[1] 10.4 33.9
&gt; hist(mtcars$mpg)
</code></p>

<p>得到如下的图形：</p>

<p><img src="/images/RSeries6/Histogram1.jpg" alt="Histogram1" /></p>

<p>其实更多地，我们希望得到频率直方图，并且给出其核密度曲线以及正态密度曲线。</p>

<p><code>r descriptvie_statistics2.R https://github.com/JackyCode/RSeries
&gt; hist(mtcars$mpg, probability=TRUE)
&gt; dens &lt;- density(mtcars$mpg)
&gt; mean &lt;- mean(mtcars$mpg)
&gt; sd &lt;- sd(mtcars$mpg)
&gt; lines(dens, col='red', lty=2)
&gt; curve(dnorm(x, mean, sd), col='blue', add=TRUE)
&gt; legend("topright", inset = 0.05, c("density", "normal"),
+   lty = c(2, 1), col = c("red", "blue"))
</code></p>

<p>得到图形如下：</p>

<p><img src="/images/RSeries6/Histogram2.jpg" alt="Histogram2" /></p>

<h6 id="b-">b. 散点图</h6>
<p>我们可以使用<code>plot</code>函数直接画出散点图，此外，我这里还给散点图加上了一条拟合曲线。<code>lowess()</code>函数可以用特殊的曲线对二维数据进行非线性拟合(多维的情况需要使用<code>loess()</code>函数)。</p>

<p><code>r descriptvie_statistics2.R https://github.com/JackyCode/RSeries
&gt; plot(mtcars$disp ~ mtcars$mpg)
&gt; lines(lowess(mtcars$mpg, mtcars$disp), lwd=2, col='blue')
</code></p>

<p><img src="/images/RSeries6/Scatter.jpg" alt="Scatter" /></p>

<h6 id="c-">c. 框须图</h6>
<p>框须图,也称为盒形图、箱线图。其通过绘制连续型变量的五数(最小最大值，中位数以及上下侧四分位数)来描述变量的分布。可以使用<code>boxplot</code>函数来得到：</p>

<p><code>r descriptvie_statistics2.R https://github.com/JackyCode/RSeries
&gt; boxplot(mtcars$mpg)
</code></p>

<p><img src="/images/RSeries6/box1.jpg" alt="box1" /></p>

<p>也可以使用<code>boxplot</code>函数展示分组变量，例如这里<code>mtcars</code>中有<code>am</code>变量，可以使用该函数画出不同的<code>am</code>值对应的箱线图：</p>

<p><code>r descriptvie_statistics2.R https://github.com/JackyCode/RSeries
&gt; boxplot(mpg ~ am, data=mtcars)
</code></p>

<p><img src="/images/RSeries6/box2.jpg" alt="box2" /></p>

<p>到这边，就基本上把描述统计的一些主体内容说了一下。不过，描述统计并不是只有这点东西，此外，我讲的这些作图啊，制表啊其实都没有深入地去讲。而且对于R语言的研究学习来说，我上面做的图还太简单了，没有给图起名称，也没有横纵轴的名称等等。这些在R语言的帮助文档里有详细的讲解说明，有兴趣的话可以看看。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[R语言记录5：描述统计1]]></title>
    <link href="http://jackycode.github.io/blog/2014/03/12/rseries5/"/>
    <updated>2014-03-12T15:57:02+08:00</updated>
    <id>http://jackycode.github.io/blog/2014/03/12/rseries5</id>
    <content type="html"><![CDATA[<p><img src="/images/artical/artical8.jpg" alt="aritical 8" />
<!-- more --></p>

<p><em>“文章原创，转载请注明出处”</em></p>

<hr />

<p>数据的统计分析分为：<strong><em>描述性统计分析</em></strong>和<strong><em>统计推断</em></strong>两个部分。描述性统计分析，一般又称为探索性统计分析。简单来讲，描述统计就是用简单直观的方法给出数据的一种易于理解的描述，比如说散点图，频率直方图；又或者计算简单的统计量，如均值方差等等。下面先来看看如何计算常用的描述性统计量：</p>

<h4 id="section">一. 描述性统计量</h4>

<h5 id="section-1">1. 单组数据</h5>
<p>常用的描述性统计量大致有这么几个：</p>

<h6 id="n">1. 样本大小。即样本的个数，一般用$n$表示；</h6>

<h6 id="overlinexfrac1nsumi1nxi">2. 样本均值。即$\overline{X}=\frac{1}{n}\sum_{i=1}^{n}{X_i}$；</h6>

<h6 id="s2frac1nsumi1nxi-overlinex2">3. 样本方差。即$s^2=\frac{1}{n}\sum_{i=1}^{n}{(X_i-\overline{X})^2}$;</h6>

<h6 id="section-2">4. 样本分位数、偏度、峰度等等。</h6>

<p>在R语言中，<code>summary()</code>函数可以得到样本数据的最小值、最大值、四分位数以及均值。这里我们使用R语言自带的数据集<code>mtcars</code>作演示，你可以使用我们之前教过的方法先看看<code>mtcars</code>中的数据长什么样子(<code>head</code>函数，<code>??</code>得到帮助)。</p>

<p><code>r descriptive_statistics1.R https://github.com/JackyCode/RSeries
&gt; str(mtcars) # 可以查看数据集的一些基本信息
'data.frame':	32 obs. of  11 variables:
 $ mpg : num  21 21 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 ...
 $ cyl : num  6 6 4 6 8 6 8 4 4 6 ...
 $ disp: num  160 160 108 258 360 ...
 $ hp  : num  110 110 93 110 175 105 245 62 95 123 ...
 $ drat: num  3.9 3.9 3.85 3.08 3.15 2.76 3.21 3.69 3.92 3.92 ...
 $ wt  : num  2.62 2.88 2.32 3.21 3.44 ...
 $ qsec: num  16.5 17 18.6 19.4 17 ...
 $ vs  : num  0 0 1 1 0 1 0 1 1 1 ...
 $ am  : num  1 1 1 0 0 0 0 0 0 0 ...
 $ gear: num  4 4 4 3 3 3 3 4 4 4 ...
 $ carb: num  4 4 1 1 2 1 4 2 2 4 ...
&gt; summary(mtcars$mpg)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  10.40   15.42   19.20   20.09   22.80   33.90 
</code></p>

<p>可以使用<code>mean</code>和<code>sd</code>函数得到样本均值和样本标准差，<code>quantile</code>函数计算样本分位数：</p>

<p><code>r descriptive_statistics1.R https://github.com/JackyCode/RSeries
&gt; mean(mtcars$mpg)
[1] 20.09062
&gt; sd(mtcars$mpg)
[1] 6.026948
&gt; quantile(mtcars$mpg, 0.25)
   25% 
15.425 
&gt; quantile(mtcars$mpg, c(0.25, 0.75))
   25%    75% 
15.425 22.800 
</code></p>

<p>但是在R的基础包里面并没有计算偏度(skewness)和峰度(kurtosis)的函数，我们可以自定义一个函数，用来计算常用的描述性统计量：</p>

<p>首先给出偏度$\beta_s$与峰度$\beta_k$的计算公式：</p>

<script type="math/tex; mode=display">\beta_s = \frac{E(X-E(X))^3}{[E(X-E(X))^2]^{3/2}}</script>

<script type="math/tex; mode=display">\beta_k = \frac{E(X-E(X))^4}{[E(X-E(X))^2]^2} - 3</script>

<p>``` r descriptive_statistics1.R https://github.com/JackyCode/RSeries
&gt; desc.stats &lt;- function(x, na.omit=FALSE) { # na.omit=TRUE 表示忽略缺失值
+ 	if (na.omit)
+ 		x &lt;- x[!is.na(x)]
+ 	
+ 	n &lt;- length(x)
+ 	mean &lt;- mean(x)
+ 	var &lt;- var(x)
+ 	sd &lt;- sd(x)
+ 	skew &lt;- sum((x-mean)^3/sd^3)/n
+ 	kurt &lt;- sum((x-mean)^4/sd^4)/n - 3
+ 	
+ 	return(list(mean=mean, Variance=var, skewness=skew, kurtosis=kurt))
+ }
&gt; desc.stats(mtcars$mpg)
$mean
[1] 20.09062</p>

<p>$Variance
[1] 36.3241</p>

<p>$skewness
[1] 0.610655</p>

<p>$kurtosis
[1] -0.372766
```</p>

<p>到此为止，我们就可以使用R语言对一组数据进行简单的探索性分析了。其实，在R语言的很多扩展包里面，都有计算描述性统计量的函数，例如Hmisc包中有<code>describe()</code>函数，可以返回变量数目，缺失值数目，均值，分位数等等信息；在fBasic包中有<code>skewness()</code>和<code>kurtosis()</code>函数，可以分别求偏度与峰度，在该包内还有一个函数，<code>basicStats()</code>可以得到大部分的描述性统计量。</p>

<h5 id="section-3">2. 多组数据</h5>
<p>若是存在多组数据，那么在R中如何对数据进行统计量的计算呢？我们不妨先来试试<code>summary</code>函数能否对多组数据做出很好的处理：</p>

<p><code>r descriptive_statistics1.R https://github.com/JackyCode/RSeries
&gt; mtcars.sub &lt;- data.frame(mpg=mtcars$mpg, wt=mtcars$wt) # 取出两个变量
&gt; summary(mtcars.sub)
      mpg              wt       
 Min.   :10.40   Min.   :1.513  
 1st Qu.:15.43   1st Qu.:2.581  
 Median :19.20   Median :3.325  
 Mean   :20.09   Mean   :3.217  
 3rd Qu.:22.80   3rd Qu.:3.610  
 Max.   :33.90   Max.   :5.424
</code></p>

<p>显然，<code>summary</code>函数能够直接对多组数据进行计算。那么怎么批量地对多组数据使用我们自定义的函数<code>desc.stats</code>呢？还记得我们曾经介绍过<code>sapply</code>函数吗，想想它的功能就知道如何解决这个问题了吧。</p>

<p><code>r descriptive_statistics1.R https://github.com/JackyCode/RSeries
&gt; sapply(mtcars.sub, desc.stats)
         mpg       wt         
mean     20.09062  3.21725    
Variance 36.3241   0.957379   
skewness 0.610655  0.4231465  
kurtosis -0.372766 -0.02271075
</code></p>

<h5 id="section-4">3. 分组数据</h5>
<p>我们知道，很多时候我们会对数据进行分类。像这里的数据<code>mtcars</code>，其有变量<code>am</code>用来表示自动挡(0)和手动挡(1)。那么我们就需要对其进行分组，然后求出各组的描述性统计量。还记得<code>tapply()</code>,<code>by()</code>和<code>aggregate()</code>函数吗?试试看：</p>

<p>``` r descriptive_statistics1.R https://github.com/JackyCode/RSeries
&gt; mtcars.sub2 &lt;- data.frame(mpg=mtcars$mpg, am=mtcars$am, carb=mtcars$carb)
&gt; tapply(mtcars.sub2$mpg, mtcars.sub2$am, summary)
$<code>0</code>
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  10.40   14.95   17.30   17.15   19.20   24.40 </p>

<p>$<code>1</code>
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  15.00   21.00   22.80   24.39   30.40   33.90 </p>

<blockquote>
  <p>by(mtcars.sub2$mpg, mtcars.sub2$am, summary)
mtcars.sub2$am: 0
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  10.40   14.95   17.30   17.15   19.20   24.40 
———————————————————— 
mtcars.sub2$am: 1
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  15.00   21.00   22.80   24.39   30.40   33.90 </p>

  <p>aggregate(mpg ~ am, mtcars.sub2, summary)
  am mpg.Min. mpg.1st Qu. mpg.Median mpg.Mean mpg.3rd Qu. mpg.Max.
1  0    10.40       14.95      17.30    17.15       19.20    24.40
2  1    15.00       21.00      22.80    24.39       30.40    33.90
```
同样的，如果存在多个分类，我们依旧可以使用上面的函数作出处理：</p>
</blockquote>

<p><code>r descriptive_statistics1.R https://github.com/JackyCode/RSeries
&gt; aggregate(mpg ~ am+carb, mtcars.sub2, summary)
  am carb mpg.Min. mpg.1st Qu. mpg.Median mpg.Mean mpg.3rd Qu. mpg.Max.
1  0    1    18.10       19.75      21.40    20.33       21.45    21.50
2  1    1    22.80       26.18      29.85    29.10       32.78    33.90
3  0    2    15.20       16.30      18.95    19.30       21.90    24.40
4  1    2    21.40       24.85      28.20    27.05       30.40    30.40
5  0    3    15.20       15.80      16.40    16.30       16.85    17.30
6  0    4    10.40       11.85      14.30    14.30       16.25    19.20
7  1    4    15.80       18.40      21.00    19.27       21.00    21.00
8  1    6    19.70       19.70      19.70    19.70       19.70    19.70
9  1    8    15.00       15.00      15.00    15.00       15.00    15.00
</code></p>

<p>到此为止，就介绍完了如何使用R计算描述性统计量的内容。下一次我们讲看看如何将数据可视化，也就是如何在R中作图以及制表。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[R语言记录4：自定义函数的深入]]></title>
    <link href="http://jackycode.github.io/blog/2014/03/10/rseries4/"/>
    <updated>2014-03-10T16:50:29+08:00</updated>
    <id>http://jackycode.github.io/blog/2014/03/10/rseries4</id>
    <content type="html"><![CDATA[<p><img src="/images/artical/artical7.jpg" alt="aritical 7" />
<!-- more --></p>

<p><em>“文章原创，转载请注明出处”</em></p>

<hr />

<p>在第一份笔记中，已经介绍过控制语句以及自定义函数。但是当时讲的很简单，只是讲了语法。这次打算深入介绍一下，如何在R中写出一个稳健的自定义函数。首先先介绍一个常用的控制语句<code>ifelse</code>。</p>

<h4 id="ifelse">一. 善用<code>ifelse</code></h4>

<h6 id="section">1. 首先生成一组成绩数据</h6>
<p><code>r ifelse_use https://github.com/JackyCode/RSeries
&gt; scoreList &lt;- list()
&gt; scoreList$name &lt;- c("Wang", "Li", "Sun")
&gt; scoreList$score &lt;- c(90, 50, 70)
</code></p>

<h6 id="section-1">2. 然后对成绩进行分级</h6>
<p>一般来说，可能我们会想到利用循环，在学生成绩中一个一个比较。大于$60$及格，小于就不及格。但是循环相对而言是费资源的，在R语言中，处理像这种问题，完全可以避开循环去做。回想一下，之前讲<code>any</code>和<code>all</code>函数时，可以使用<code>which</code>函数取出满足条件的元素的位置。当然这也是一个不错的方式，但其实还有更好的方法，那就是利用<code>ifelse</code>函数：</p>

<p><code>r ifelse_use https://github.com/JackyCode/RSeries
&gt; con &lt;- scoreList$score &gt; 60
&gt; scoreList$level &lt;- ifelse(con, "good", "not good")
</code></p>

<p>如果使用<code>which</code>函数的话，也不复杂：</p>

<p><code>r ifelse_use https://github.com/JackyCode/RSeries
&gt; scoreList$level2 &lt;- rep("good", 3)
&gt; scoreList$level2[which(scoreList$score&lt;60)] &lt;- "not good"
</code></p>

<p>上面两种方式比较起来的话，当然个人更喜欢第一种啦。便于理解逻辑性也强。不过第二种方式怎么看怎么觉得牛，哈哈。</p>

<h4 id="section-2">二. 自定义函数的深入</h4>

<h6 id="section-3">1. 首先先设计一个计算简单的函数</h6>
<p>R语言是统计软件，那么就设计一个函数，能够输出一组值的均值，方差好了。</p>

<p><code>r custome_function https://github.com/JackyCode/RSeries
Summary.MeanAndSd &lt;- function (x) {
  mean &lt;- mean(x)
  sd &lt;- sd(x)
}
</code>
这样看起来程序已经写好了，但其实是有问题的。我们来测试一下。</p>

<h6 id="n01">2. 生成一组服从$N(0,1)$的随机数用来测试</h6>

<p>``` r custom_function https://github.com/JackyCode/RSeries
&gt; set.seed(10)	# 设定种子
&gt; x &lt;- rnorm(20, 0, 1)</p>

<p>Summary.MeanAndSd(x)
result &lt;- Summary.MeanAndSd(x)
```
运行可以发现，直接调用函数<code>Summary.MeanAndSd</code>函数没有任何输出；即使赋值给<code>result</code>，<code>result</code>也只得到了方差。</p>

<h6 id="return">3. 选择返回值(<code>return</code>函数):</h6>

<p>``` r custom_function https://github.com/JackyCode/RSeries
Summary.MeanAndSd &lt;- function (x) {
  mean &lt;- mean(x)
  sd &lt;- sd(x)</p>

<p>return(c(mean, sd))
}</p>

<blockquote>
  <p>Summary.MeanAndSd(x)
[1] -0.06053267  0.79990931
```</p>
</blockquote>

<p>这次就可以得到输出，赋值给<code>result</code>也就可以成功了。下面我们来将程序加一个功能，那就是计算置信区间。</p>

<h6 id="section-4">4. 函数参数：</h6>
<p>计算置信区间，那就需要知道置信度$\alpha$的大小。这个时候函数就必须能够接受参数：</p>

<p>``` r custom_function https://github.com/JackyCode/RSeries
Summary.MeanAndSd &lt;- function (x, alpha) {
  mean &lt;- mean(x)
  sd &lt;- sd(x)
  upper &lt;- 1 - alpha/2
  ci &lt;- mean + c(-1, 1) * qnorm(alpha/2, 0, 1)*sd/sqrt(length(x)) # qnorm计算正态分布的分位数</p>

<p>return(list(mean = mean, sd = sd, ci = ci)) # 使用列表输出结果是常用方式
}</p>

<p>Summary.MeanAndSd(x, 0.05)
```
运行上面的程序能够很轻松地得到结果。但是，如果我们运行<code>Summary.MeanAndSd(x)</code>，程序就会报错，它会提醒你没有键入<code>alpha</code>。但实际上，大部分默认情况下，$\alpha=0.05$，完全可以将其设定成默认值：</p>

<p>``` r custom_function https://github.com/JackyCode/RSeries
Summary.MeanAndSd &lt;- function (x, alpha=0.05) {
  mean &lt;- mean(x)
  sd &lt;- sd(x)
  upper &lt;- 1 - alpha/2
  ci &lt;- mean + c(-1, 1) * qnorm(alpha/2, 0, 1)*sd/sqrt(length(x)) # qnorm计算正态分布的分位数</p>

<p>return(list(mean = mean, sd = sd, ci = ci)) # 使用列表输出结果是常用方式
}
```</p>

<p>这回再运行<code>Summary.MeanAndSd(x)</code>可以发现没有问题了。这里我们选取了列表作为输出的方式，这是一个常用的方式，利于查看保存。</p>

<h6 id="section-5">5. 参数的合法性：</h6>
<p>我们知道$\alpha$是介于$(0,1)$之间的值，而且一般来说，$\alpha&lt;0.5$。但上面的程序并不能够处理这类的问题，当参数不合法时，它依然能够计算出一个结果：</p>

<p>``` r custom_function https://github.com/JackyCode/RSeries
&gt; Summary.MeanAndSd(x, 1.5)
$mean
[1] -0.06053267</p>

<p>$sd
[1] 0.7999093</p>

<p>$ci
[1] -0.18117539  0.06011005</p>

<blockquote>
  <p>Summary.MeanAndSd(x, 0.8)
$mean
[1] -0.06053267</p>
</blockquote>

<p>$sd
[1] 0.7999093</p>

<p>$ci
[1] -0.0152177 -0.1058476
```</p>

<p>这样的结果显然是不合理的，函数并不具备一定的报错能力。对于用户不合法的输入参数，程序要能够及时停止程序的运行，并且告诉用户哪里错了。</p>

<p>``` r custom_function https://github.com/JackyCode/RSeries
Summary.MeanAndSd &lt;- function (x, alpha=0.05) {
  if (alpha &lt;= 0 || alpha &gt;= 1) {
    stop(“The argument ‘alpha’ should be between 0 and 1!” )
  } else if (alpha &gt; 0.5) {
    warning(“The argument ‘alpha’ is often smaller than 0.5 and  close to 0!”)
  }</p>

<p>mean &lt;- mean(x)
  sd &lt;- sd(x)
  upper &lt;- 1 - alpha/2
  ci &lt;- mean + c(-1, 1) * qnorm(alpha/2, 0, 1)*sd/sqrt(length(x)) # qnorm计算正态分布的分位数</p>

<p>return(list(mean = mean, sd = sd, ci = ci)) # 使用列表输出结果是常用方式
}
```</p>

<p>运行一下：</p>

<p>``` r custom_function https://github.com/JackyCode/RSeries
&gt; Summary.MeanAndSd(x, 1.5)
Error in Summary.MeanAndSd(x, 1.5) : 
  The argument ‘alpha’ should be between 0 and 1!
&gt; Summary.MeanAndSd(x, 0.8)
$mean
[1] -0.06053267</p>

<p>$sd
[1] 0.7999093</p>

<p>$ci
[1] -0.0152177 -0.1058476</p>

<p>Warning message:
In Summary.MeanAndSd(x, 0.8) :
  The argument ‘alpha’ is often smaller than 0.5 and  close to 0!
```</p>

<p>这样程序就具备了一定的稳健性，能够具备一些报错的能力。但是在实际处理数据的时候，往往还会遇到一种情况，那就是缺失值。想想看，上面写的程序能够很好地应付存在缺失值的数据吗？显然是不行的。</p>

<h6 id="section-6">6. 注意缺失值</h6>

<p><code>r custom_function https://github.com/JackyCode/RSeries
# 生成一组具有缺失值的数据
&gt; set.seed(10)
&gt; y &lt;- rnorm(20, 0, 1)
&gt; y &lt;- c(y, NA)
</code></p>

<p>试试上面的程序，能否得到结果:</p>

<p>``` r custom_function https://github.com/JackyCode/RSeries
&gt; Summary.MeanAndSd(y)
$mean
[1] NA</p>

<p>$sd
[1] NA</p>

<p>$ci
[1] NA NA
```</p>

<p>显然上面的程序无法处理存在缺失值的数据。回想一下，我们之前学过<code>na.rm</code>参数，我们可以通过设定此参数剔除缺失值：</p>

<p>``` r custom_function https://github.com/JackyCode/RSeries
Summary.MeanAndSd &lt;- function (x, alpha=0.05) {
  if (alpha &lt;= 0 || alpha &gt;= 1) {
    stop(“The argument ‘alpha’ should be between 0 and 1!” )
  } else if (alpha &gt; 0.5) {
    warning(“The argument ‘alpha’ is often smaller than 0.5 and  close to 0!”)
  }
  if (any(is.na(y))) {
    warning(“There are any ‘NA’ in the data, we’ll ignore these datas!”)
  }</p>

<p>mean &lt;- mean(x, na.rm=TRUE)
  sd &lt;- sd(x, na.rm=TRUE)
  n &lt;- ifelse(any(is.na(y)), length(x)-sum(is.na(x)), length(x)) # n &lt;- length(x)-sum(is.na(x)) 也可以
  upper &lt;- 1 - alpha/2
  ci &lt;- mean + c(-1, 1) * qnorm(alpha/2, 0, 1)*sd/sqrt(n) # qnorm计算正态分布的分位数</p>

<p>return(list(mean = mean, sd = sd, ci = ci)) # 使用列表输出结果是常用方式
}
```</p>

<p>现在运行一下：</p>

<p>``` r custom_function https://github.com/JackyCode/RSeries
&gt; Summary.MeanAndSd(y)
$mean
[1] -0.06053267</p>

<p>$sd
[1] 0.7999093</p>

<p>$ci
[1]  0.2900366 -0.4111019</p>

<p>Warning message:
In Summary.MeanAndSd(y) :
  There are any ‘NA’ in the data, we’ll ignore these datas!
```</p>

<p>这样上面的程序就具备了处理缺失值的能力，它能够自动识别数据中是否存在缺失值，如果存在的话就剔除缺失值再进行计算，并且提醒用户存在缺失值。</p>

<p>但其实R语言中存在另外一个方式，可以使得程序具备处理缺失值等等的问题。可以使用使用<code>...</code>参数，使得自定义函数能够接受其它某些函数的参数，想象一下，如果可以这样调用我们的函数，<code>Summary.MeanAndSd(y, na.rm=TRUE)</code>，是不是perfect。</p>

<p>``` r custom_function https://github.com/JackyCode/RSeries
Summary.MeanAndSd &lt;- function (x, alpha=0.05, …) {
  if (alpha &lt;= 0 || alpha &gt;= 1) {
    stop(“The argument ‘alpha’ should be between 0 and 1!” )
  } else if (alpha &gt; 0.5) {
    warning(“The argument ‘alpha’ is often smaller than 0.5 and  close to 0!”)
  }
  # ellipsis.arguments &lt;- list(…)</p>

<p>mean &lt;- mean(x, …)
  sd &lt;- sd(x, …)
  n &lt;- ifelse(any(is.na(y)), length(x)-sum(is.na(x)), length(x))
  upper &lt;- 1 - alpha/2
  ci &lt;- mean + c(-1, 1) * qnorm(alpha/2, 0, 1)*sd/sqrt(n) # qnorm计算正态分布的分位数</p>

<p>return(list(mean = mean, sd = sd, ci = ci)) # 使用列表输出结果是常用方式
}
```</p>

<p>这样就可以直接使用<code>Summary.MeanAndSd(y, na.rm=TRUE)</code>来计算了。</p>

<h6 id="section-7">7. 递归函数</h6>
<p>递归函数即自调用函数，有些时候我们会使用到，这里举个例子：</p>

<p><code>r Recall_use https://github.com/JackyCode/RSeries
plusFun1 &lt;- function (x) {
  return(ifelse(x &lt; 10, plusFun(x + 1), x))
}
</code></p>

<p>当然也可以使用R的内置函数<code>Recall</code>：</p>

<p><code>r Recall_use https://github.com/JackyCode/RSeries
plusFun2 &lt;- function (x) {
  return(ifelse(x &lt; 10, Recall(x+1), x))
}
</code></p>

<h4 id="section-8">三. 小结</h4>
<p>今天讲了如何在R语言里面构造一个稳健的函数，以及<code>ifelse</code>和<code>Recall</code>函数的使用。写完这些，基本上R语言的基础就结束了。下面就开始写如何使用R语言去解决统计问题。由于我是概率统计专业的，而且是数学系出生，所以写的东西会有不少的理论。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[R语言记录3:数据的导入及复杂操作]]></title>
    <link href="http://jackycode.github.io/blog/2014/03/09/rseries3/"/>
    <updated>2014-03-09T11:16:58+08:00</updated>
    <id>http://jackycode.github.io/blog/2014/03/09/rseries3</id>
    <content type="html"><![CDATA[<p><img src="/images/artical/artical6.jpg" alt="aritical 6" />
<!-- more --></p>

<p><em>“文章原创，转载请注明出处”</em></p>

<hr />

<p>上一节介绍了R语言中常用的数据类型，并且介绍了R语言中对数据的一些简单操作，如创建查看向量或者矩阵等等。今天就介绍一下如何从文件中导入数据，以及对数据进行一些较为复杂的操作。</p>

<h4 id="section">一. 读取数据</h4>

<p>R语言读取数据有很多方式，如<code>scan</code>函数，<code>read.table</code>函数等等。我这里还想介绍另外两个函数，<code>read.csv</code>和<code>read.delim</code>函数，因为处理数据，大部分时候遇到的文件是csv文件或者txt文件，而这两个函数可以很好的读取此类型的文件。</p>

<h5 id="scan">1. <code>scan</code>函数</h5>
<p>首先简单说说<code>scan</code>函数，这个函数在默认的情况下，希望所有输入的数据都是数值型的。<code>scan</code>函数读取的数据必须是同一模式的，如果没有指定参数，scan将从R控制台读取数据，直到遇到一个空白行停止。</p>

<p><code>r loadData https://github.com/JackyCode/RSeries
&gt; x &lt;- scan()
1: 1 2 3
4: 2 3 4
7: 
Read 6 items
&gt; x
[1] 1 2 3 2 3 4
</code></p>

<p>也可以通过设定参数，设定读取的数据类型：</p>

<p><code>r loadData https://github.com/JackyCode/RSeries
&gt; y &lt;- scan(what="") # 读取字符型数据
1: 1 2 3
4: 2 3 4
7: 
Read 6 items
&gt; y
[1] "1" "2" "3" "2" "3" "4"
</code></p>

<p>也可以直接读取一个同一模式的数据文件：</p>

<p><code>r loadData https://github.com/JackyCode/RSeries
&gt; z &lt;- scan("example.txt")
Read 9 items
&gt; z
[1] 1 2 3 4 5 6 7 8 9
</code></p>

<p>其中<code>example.txt</code>的内容如下：</p>

<pre><code>1	2	3
4	5	6
7	8	9
</code></pre>

<p>注意最后留一个空白行，以便R读取数据时可以找到终止位置(否则会出现<code>warning</code>)。</p>

<h5 id="readtable">2. <code>read.table</code>函数</h5>
<p>顾名思义，<code>read.table</code>函数即是以<strong>数据框</strong>的格式在R中读取数据。这里就涉及到一个新的概念，<strong>数据框</strong>。前一节我们提到过，可以使用列表和数据框去存储具有不同模式的数据。<strong>数据框</strong>可以存储具有相同长度的变量，并且在统计中，其每一行就是样本的一个观测值，有多少行就有多少次观测。我们可以使用<code>data.frame</code>函数来生成一个数据框：</p>

<p><code>r loadData https://github.com/JackyCode/RSeries
&gt; name &lt;- c("Li", "Wang", "Sun")
&gt; age &lt;- c(21, 22, 23)
&gt; Datafr &lt;- data.frame(name = name, age = age)
&gt; Datafr
  name age
1   Li  21
2 Wang  22
3  Sun  23
</code></p>

<p>此外，数据框还有一个优点：可以在不影响原始数据的情况下，改变数据。比如我想知道，数据里面每个人的年龄比18大多少：</p>

<p><code>r loadData https://github.com/JackyCode/RSeries
&gt; Datafr2 &lt;- data.frame(name = name, age = age, age.u = age-18)
&gt; Datafr2
  name age age.u
1   Li  21     3
2 Wang  22     4
3  Sun  23     5
</code></p>

<p>那么如何使用<code>read.table</code>函数呢，看看如下示例：</p>

<p><code>r loadData https://github.com/JackyCode/RSeries
&gt; example &lt;- read.table("example.txt", header=FALSE)
&gt; example
  V1 V2 V3
1  1  2  3
2  4  5  6
3  7  8  9
</code></p>

<p>其中<code>header</code>参数指定数据文件的第一行是否为变量名。当没有变量名时，可以使用参数<code>col.names</code>来指定：</p>

<p><code>r loadData https://github.com/JackyCode/RSeries
&gt; example &lt;- read.table("example.txt", header=FALSE, col.names=c("x1", "x2", "x3"))
&gt; example
  x1 x2 x3
1  1  2  3
2  4  5  6
3  7  8  9
</code></p>

<p>当然<code>read.table</code>函数读取数据时，可以使用<code>sep=参数</code>指定分隔符。这些可以使用<code>?read.table</code>查看。</p>

<h5 id="readcsvreaddelim">3. <code>read.csv</code>和<code>read.delim</code>函数</h5>

<p>使用方法与<code>read.table</code>函数类似，可以直接读取csv文件和txt文件。</p>

<p><code>r loadData https://github.com/JackyCode/RSeries
dataCsv &lt;- read.csv("example.csv", header=FALSE)
dataTxt &lt;- read.delim("example.txt", header=FALSE)
</code></p>

<h4 id="section-1">二. 数据操作</h4>
<p>上一节介绍了一些简单的数据操作，这次讲一讲较为复杂的数据操作。</p>

<h6 id="sample">1. 首先从$-5$到$5$中随机取出不重复的$10$个数据(<code>sample</code>函数)：</h6>

<p><code>r dataManipulation https://github.com/JackyCode/RSeries
&gt; x &lt;- sample(-5:5, 10)
&gt; y &lt;- sample(-5:5, 10)
&gt; x
 [1] -2  3 -3  0 -5  5  1  4 -1  2
&gt; y
 [1] -1  3 -3  1 -4  5  0  2 -5 -2
</code></p>

<h6 id="x0allany">2. 判断$x$中的数据是否大于$0$(<code>all</code>和<code>any</code>函数)：</h6>

<p><code>r dataManipulation https://github.com/JackyCode/RSeries
&gt; x&gt;0
[1] FALSE  TRUE FALSE FALSE FALSE  TRUE  TRUE  TRUE FALSE  TRUE
&gt; all(x&gt;0)
[1] FALSE
&gt; any(x&gt;0)
[1] TRUE
</code></p>

<h6 id="section-2">3. 试试更多的逻辑运算(<code>&amp;, |, !</code>)：</h6>

<p><code>r dataManipulation https://github.com/JackyCode/RSeries
&gt; x &gt; 0 &amp; y &gt; 0
	 [1] FALSE  TRUE FALSE FALSE FALSE  TRUE FALSE  TRUE FALSE FALSE
&gt; x &gt; 0 | y &gt; 0
 [1] FALSE  TRUE FALSE  TRUE FALSE  TRUE  TRUE  TRUE FALSE  TRUE
&gt; !(x&gt;0)
	 [1]  TRUE FALSE  TRUE  TRUE  TRUE FALSE FALSE FALSE  TRUE FALSE
</code></p>

<h6 id="xywhich">4. 找出$x$与$y$相等的元素(<code>which</code>函数):</h6>

<p><code>r dataManipulation https://github.com/JackyCode/RSeries
&gt; x == y
 [1] FALSE  TRUE  TRUE FALSE FALSE  TRUE FALSE FALSE FALSE FALSE
&gt; which(x == y) # 取出满足条件的位置
 [1] 2 3 6
</code></p>

<h6 id="sample-1">5. 从$-5$到$5$中随机取出允许重复的$10$个数据(<code>sample</code>函数)：</h6>

<p><code>r dataManipulation https://github.com/JackyCode/RSeries
&gt; z &lt;- sample(-5:5, 10, replace=TRUE)
&gt; z
 [1]  4 -4 -1 -2  4  5 -3 -3  1  2
</code></p>

<h6 id="zunique">6. 取出$z$中不同的元素(<code>unique</code>函数)：</h6>

<p><code>r dataManipulation https://github.com/JackyCode/RSeries
&gt; z.unique &lt;- unique(z)
&gt; z.unique
[1]  4 -4 -1 -2  5 -3  1  2
</code></p>

<h6 id="na">7. 生成存在缺失数据的一列数据(<code>NA</code>)：</h6>

<p><code>r dataManipulation https://github.com/JackyCode/RSeries
&gt; x.na &lt;- c(1:5, NA, 2, NA, 3:5)
&gt; x.na
 [1]  1  2  3  4  5 NA  2 NA  3  4  5
</code></p>

<h6 id="xisna">8. 对$x$求和(<code>is.na</code>函数):</h6>

<p><code>r dataManipulation https://github.com/JackyCode/RSeries
&gt; sum(x.na) # 带着缺失数据计算
[1] NA
&gt; sum(is.na(x.na)) # 统计缺失数据的个数
[1] 2
&gt; sum(x.na, na.rm=TRUE) # 剔除缺失数据后求和
[1] 29
</code></p>

<h6 id="xappend">9. 向变量$x$中添加数据(<code>append</code>函数)：</h6>

<p><code>r dataManipulation https://github.com/JackyCode/RSeries
&gt; x &lt;- append(x, sample(-5:5, 2))
&gt; x
[1] -2  3 -3  0 -5  5  1  4 -1  2 -1 -5
</code></p>

<h6 id="xascharacterasfactorasnumeric">10. 更改$x$的数据类型(<code>as.character</code>,<code>as.factor</code>,<code>as.numeric</code>函数)：</h6>

<p><code>r dataManipulation https://github.com/JackyCode/RSeries
&gt; x &lt;- as.character(x)
&gt; x
 [1] "2"  "8"  "3"  "5"  "4"  "10" "6"  "9"  "1"  "7"  "1"  "4" 
&gt; x &lt;- as.factor(x)
&gt; x
 [1] 2  8  3  5  4  10 6  9  1  7  1  4 
Levels: 1 10 2 3 4 5 6 7 8 9
&gt; x &lt;- as.numeric(as.character(x)) # 如果一组因子变量是用数字表示，一般先将数字因子转换成字符后再转换成数值。
&gt; x
 [1]  2  8  3  5  4 10  6  9  1  7  1  4
</code></p>

<h6 id="unlistasdataframe">11. 数据类型更改(<code>unlist</code>,<code>as.data.frame</code>)：</h6>

<p>``` r dataManipulation https://github.com/JackyCode/RSeries
&gt; myList &lt;- list()
&gt; myList$x1 &lt;- c(1, 2, 3)
&gt; myList$x2 &lt;- c(2, 4, 6)
&gt; myList
$x1
[1] 1 2 3</p>

<p>$x2
[1] 2 4 6</p>

<h1 id="unlist">unlist</h1>
<blockquote>
  <p>uList &lt;- unlist(myList)
uList
x11 x12 x13 x21 x22 x23 
  1   2   3   2   4   6 </p>
</blockquote>

<h1 id="matrix">matrix</h1>
<blockquote>
  <p>mList &lt;- matrix(uList, 2, 3, byrow=TRUE)
mList
     [,1] [,2] [,3]
[1,]    1    2    3
[2,]    2    4    6</p>
</blockquote>

<h1 id="dataframe">dataframe</h1>
<blockquote>
  <p>dfList &lt;- as.data.frame(mList)
dfList
  V1 V2 V3
1  1  2  3
2  2  4  6
colnames(dfList) &lt;- c(“x1”, “x2”, “x3”)
dfList
  x1 x2 x3
1  1  2  3
2  2  4  6
rownames(dfList) &lt;- c(“o1”, “o2”)
dfList
   x1 x2 x3
o1  1  2  3
o2  2  4  6
```</p>
</blockquote>

<h6 id="tabletapplybyaggregate">12. 按条件整理计算数据(<code>table</code>,<code>tapply</code>,<code>by</code>,<code>aggregate</code>函数)：</h6>

<p>``` r dataManipulation https://github.com/JackyCode/RSeries
&gt; x &lt;- list()
&gt; x$a &lt;- sample(-10:10, 20, replace=TRUE)
&gt; x$b &lt;- as.factor(sample(1:4, 20, replace=TRUE))
&gt; x$c &lt;- as.factor(sample(-3:-1, 20, replace=TRUE))
&gt; x</p>

<h1 id="section-3">统计因子出现的频数</h1>
<blockquote>
  <p>table(x$b)</p>
</blockquote>

<p>1  2  3  4 
 5  3  1 11 
&gt; table(x$c)</p>

<p>-3 -2 -1 
 9  7  4
&gt; table(x$b, x$c)</p>

<pre><code>-3 -2 -1   1  1  3  1   2  1  2  0   3  0  1  0   4  7  1  3
</code></pre>

<h1 id="tapplybyaggregate">使用tapply，by以及aggregate函数根据不同因子对数据进行计算</h1>
<blockquote>
  <p>tapply(x$a, x$b, sum)
 1  2  3  4 
 8 11  2 -5 
tapply(x$a, x$c, sum)
-3 -2 -1 
-7 16  7
tapply(x$a, list(x$b, x$c), sum) # 可以看到，由于b=2且c=-1的数据不存在，所有计算结果为NA(其它类似)
  -3 -2 -1
1 -3  6  5
2  5  6 NA
3 NA  2 NA
4 -9  2  2</p>
</blockquote>

<blockquote>
  <p>by(x$a, list(x$b, x$c), sum) # 输出结果太长就不给出了，可以观察一下与tapply输出的区别</p>
</blockquote>

<blockquote>
  <p>aggregate(a ~ b+c, x, sum) # 第一个参数为要计算的量，中间的参数为条件，第三个参数为数据集名称，最后一个为函数
  b  c  a
1 1 -3 -3
2 2 -3  5
3 4 -3 -9
4 1 -2  6
5 2 -2  6
6 3 -2  2
7 4 -2  2
8 1 -1  5
9 4 -1  2
```</p>
</blockquote>

<h4 id="section-4">三. 小节</h4>
<p>这次我们介绍了R语言如何从外部读取数据，以及对得到的数据如何进行一些复杂点的操作。当然这还不是全部，比如我这里还没有讲到如何将数据集按行按列去进行合并(<code>rbind</code>,<code>cbind</code>函数)等等，这些都可以通过help文档得到。我觉得学习一门语言一定要学会使用<code>help</code>，还有善用Google很重要。</p>
]]></content>
  </entry>
  
</feed>
