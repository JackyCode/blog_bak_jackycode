<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Jacky and MSC]]></title>
  <link href="http://jackycode.github.io/atom.xml" rel="self"/>
  <link href="http://jackycode.github.io/"/>
  <updated>2014-05-07T19:31:45+08:00</updated>
  <id>http://jackycode.github.io/</id>
  <author>
    <name><![CDATA[Jacky Code]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[数据科学之机器学习14: 关联分析之apriori算法]]></title>
    <link href="http://jackycode.github.io/blog/2014/05/07/apriori/"/>
    <updated>2014-05-07T17:00:48+08:00</updated>
    <id>http://jackycode.github.io/blog/2014/05/07/apriori</id>
    <content type="html"><![CDATA[<p><img src="http://jackycode.github.io/images/artical/artical31.jpg" alt="artical 31" />
<!-- more --></p>

<p><em>“文章原创，转载请注明出处”</em></p>

<hr />

<p>在上一篇中，我们介绍了关联分析相关的概念，这一节来看看如何使用Apriori算法去寻找满足条件的项集。</p>

<p>首先回顾一个概念，<strong>一个项集的支持度</strong>就是数据集中该项集所占的比例。Apriori算法就是用于寻找数据集中，支持度和可信度超过某一给定值的项集和关联规则。</p>

<hr />

<h4 id="section">一、原理</h4>
<hr />

<p>在介绍算法之前，首先了解一个集合论中的性质定理：集合的向下封闭性。</p>

<p>我们通过一个例子来看看这个定理，见下图：</p>

<p><img src="http://jackycode.github.io/images/a31/apriori_1.jpg" alt="" /></p>

<p>集合的向下封闭性，在这边解释的话，也就是说，<strong>如果一个项集的支持度低于某一个值，那么该项集超集的支持度也必定低于这个值。如果一个项集的支持度高于某一个值，那么该项集子集的支持度也必定高于某一个值。</strong></p>

<p><strong>超集</strong>：就是指包含这个集合中所以元素的集合（不包括自身），比如集合ABC就是集合AB的超集。</p>

<p>那么这个定理放在上一个图当中，就有这样的含义：</p>

<p><img src="http://jackycode.github.io/images/a31/apriori_2.jpg" alt="" /></p>

<hr />

<h4 id="section-1">二、算法构成</h4>
<hr />

<p>有了上面这个原理，那么就可以利用这个原理去减少我们寻找频繁集的计算量。因为，只要我们找到一个项集，其支持度低于给定的值，那么这个项集的所有超集就可以直接忽略不计了。如上图，项集A的支持度低于指定的值，那么其超集就都不用再考虑了。</p>

<p><strong>Apriori算法由两部分构成：</strong></p>

<ol>
  <li>找到满足最小支持度的项集；</li>
  <li>找到可信度超过最小可信度的关联规则。</li>
</ol>

<p>下面，我们一个一个地解决：</p>

<hr />

<h5 id="section-2">2.1. 寻找频繁项集</h5>
<hr />

<p>利用上面所讲的原理，我们来整理一下这个步骤的流程：</p>

<ol>
  <li>从数据集中构造集合C1，C1满足：大小为1的所有候选项集的集合，例如上图中的：C1 = {A, B, C};</li>
  <li>计算C1中所有项集（单元素项集）是否满足最小支持度，满足的项集构成集合L1，例如上图中的：L1 = {B, C};</li>
  <li>利用L1生成新的候选项集C2，C2满足：大小为2的所有候选项集的集合，例如上图中得：C2 = {BC};</li>
  <li>计算C2中所有项集（双元素项集）是否满足最小支持度，满足的项集构成集合L2；</li>
  <li>重复直到Lk中得元素个数为1。</li>
</ol>

<hr />

<h5 id="section-3">2.2. 寻找关联规则</h5>
<hr />

<p>在得到频繁项集之后，要寻找关联规则就容易多了。可以直接从频繁项集中构造初始的关联规则，计算该关联规则的可信度，然后与给定的最小可信度作比较，若值大于最小可信度，则记录该关联规则。</p>

<p>在实际编程时，需要注意使用<strong>集合的向下封闭性</strong>！！！想想看，在关联规则中，这个性质应该怎样去实现？(可以到Machine Learning in Action中找答案！)</p>

<h4 id="r">三、R语言实现</h4>

<h5 id="section-4">1. 使用自带的程序</h5>

<p>在R语言的<code>arules</code>这个包里面，提供了一个实现Apriori算法的函数：<code>apriori()</code>：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class="r"><span class="line"><span class="c1"># 构造数据集</span>
</span><span class="line">dataSet <span class="o">&lt;-</span> matrix<span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="m">5</span><span class="p">,</span> <span class="m">3</span><span class="p">)</span>
</span><span class="line">rownames<span class="p">(</span>dataSet<span class="p">)</span> <span class="o">&lt;-</span> paste<span class="p">(</span><span class="s">&quot;item&quot;</span><span class="p">,</span> <span class="m">1</span><span class="o">:</span><span class="m">5</span><span class="p">,</span> sep<span class="o">=</span><span class="s">&#39;&#39;</span><span class="p">)</span>
</span><span class="line">colnames<span class="p">(</span>dataSet<span class="p">)</span> <span class="o">&lt;-</span> c<span class="p">(</span><span class="s">&quot;A&quot;</span><span class="p">,</span> <span class="s">&quot;B&quot;</span><span class="p">,</span> <span class="s">&quot;C&quot;</span><span class="p">)</span>
</span><span class="line">dataSet<span class="p">[</span><span class="m">1</span><span class="p">,]</span> <span class="o">&lt;-</span> c<span class="p">(</span><span class="m">1</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="m">0</span><span class="p">)</span>
</span><span class="line">dataSet<span class="p">[</span><span class="m">2</span><span class="p">,]</span> <span class="o">&lt;-</span> c<span class="p">(</span><span class="m">1</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">1</span><span class="p">)</span>
</span><span class="line">dataSet<span class="p">[</span><span class="m">3</span><span class="p">,]</span> <span class="o">&lt;-</span> c<span class="p">(</span><span class="m">1</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">1</span><span class="p">)</span>
</span><span class="line">dataSet<span class="p">[</span><span class="m">4</span><span class="p">,]</span> <span class="o">&lt;-</span> c<span class="p">(</span><span class="m">1</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="m">1</span><span class="p">)</span>
</span><span class="line">dataSet<span class="p">[</span><span class="m">5</span><span class="p">,]</span> <span class="o">&lt;-</span> c<span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="m">1</span><span class="p">)</span>
</span><span class="line">dataSet
</span><span class="line"><span class="c1"># 转换数据格式(可以?apriori查看数据格式)</span>
</span><span class="line">dataSet_class <span class="o">&lt;-</span> as<span class="p">(</span>dataSet<span class="p">,</span><span class="s">&quot;transactions&quot;</span><span class="p">)</span>
</span><span class="line"><span class="c1"># 构造频繁项集</span>
</span><span class="line">rules<span class="o">&lt;-</span>apriori<span class="p">(</span>dataSet_class<span class="p">,</span>parameter<span class="o">=</span>list<span class="p">(</span>supp<span class="o">=</span><span class="m">0.5</span><span class="p">,</span>conf<span class="o">=</span><span class="m">0.6</span><span class="p">,</span>target<span class="o">=</span><span class="s">&quot;rules&quot;</span><span class="p">))</span>
</span><span class="line"><span class="c1"># 查看结果</span>
</span><span class="line">summary<span class="p">(</span>rules<span class="p">)</span>
</span><span class="line"><span class="c1"># 构造关联规则</span>
</span><span class="line">inspect<span class="p">(</span>rules<span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h5 id="section-5">2. 自定义函数解决</h5>

<p>相对而言，Apriori算法的函数比较难以编写，原因可想而知，肯定是因为数据结构的问题！但是也只是比其他函数难编一点，毕竟其自带的数据结构功能还是非常强大的。我在<a href="http://jackycode.github.io/datascience">我的项目</a>中给出的一种编写方式，是利用R语言的list来实现的。不过，我想，利用Matrix或者data.frame，当然如果你还懂<code>data.table</code>的话，那么肯定也是可以编写的，而且我想应该会比用list简单！(没有亲手编写，只是猜想！)</p>

<p>详见<a href="http://jackycode.github.io/datascience">我的项目</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[R语言记录8：Loop Functions]]></title>
    <link href="http://jackycode.github.io/blog/2014/05/04/loop-functions/"/>
    <updated>2014-05-04T14:56:40+08:00</updated>
    <id>http://jackycode.github.io/blog/2014/05/04/loop-functions</id>
    <content type="html"><![CDATA[<p><img src="http://jackycode.github.io/images/artical/artical30.jpg" alt="aritical 30" />
<!-- more --></p>

<p><em>“文章原创，转载请注明出处”</em></p>

<hr />

<p>循环对于编程的重要性不言而喻，但是大量的使用<code>for</code>语句、<code>while</code>语句在R语言这种交互式命令行上，其实并不和谐。而且，很多时候，我们希望使用更短更少的代码去完成一个事情。这就需要用到R语言中自带的一些函数，使用这些函数可以把循环变得容易表述。不过，这当然是有学习成本的，要想掌握得多尝试多思考。</p>

<p>在RSeries系列中，我之前也介绍过<code>tapply</code>这样的Loop function，但是并没有很全面地去说这个问题。没有介绍这块内容呢，总觉得对于R语言编程来说缺少了点什么，今天就来详细地说说R语言中的Loop Functions。</p>

<p>在R语言中，处理循环的函数常用的大致有这么几个：<code>lapply</code>, <code>sapply</code>, <code>apply</code>, <code>tapply</code>, <code>mapply</code>。每一个函数都有其自身的特性与用途，下面我们来一个一个地说。</p>

<hr />

<h4 id="lapply">1. <code>lapply</code>函数</h4>
<hr />

<p><code>lapply</code>函数：<strong>对list的每一个元素(list[[i]])执行指定的函数操作，其返回值总是一个列表</strong>。举个简单地例子，比如：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="r"><span class="line">x <span class="o">&lt;-</span> list<span class="p">(</span><span class="m">1</span><span class="o">:</span><span class="m">4</span><span class="p">,</span> <span class="m">2</span><span class="o">:</span><span class="m">5</span><span class="p">,</span> <span class="m">10</span><span class="o">:</span><span class="m">14</span><span class="p">)</span>
</span><span class="line">lapply<span class="p">(</span>x<span class="p">,</span> mean<span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="r"><span class="line"><span class="c1">## [[1]]</span>
</span><span class="line"><span class="c1">## [1] 2.5</span>
</span><span class="line"><span class="c1">## </span>
</span><span class="line"><span class="c1">## [[2]]</span>
</span><span class="line"><span class="c1">## [1] 3.5</span>
</span><span class="line"><span class="c1">## </span>
</span><span class="line"><span class="c1">## [[3]]</span>
</span><span class="line"><span class="c1">## [1] 12</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>也就是对列表x的每一个元素<code>x[[i]]</code>执行指定的函数操作，这边就是求均值<code>mean</code>。</p>

<p>当然，<code>lapply</code>函数不仅仅可以对列表做出处理，也可以是向量，不过这个情况并不适用于任何地方。比如，你想生成随机数，第一次生成1个，第二次生成3个，第三次5个，那么可以试试这个函数：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="r"><span class="line">lapply<span class="p">(</span>c<span class="p">(</span><span class="m">1</span><span class="p">,</span> <span class="m">3</span><span class="p">,</span> <span class="m">5</span><span class="p">),</span> rnorm<span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="r"><span class="line"><span class="c1">## [[1]]</span>
</span><span class="line"><span class="c1">## [1] -0.5622</span>
</span><span class="line"><span class="c1">## </span>
</span><span class="line"><span class="c1">## [[2]]</span>
</span><span class="line"><span class="c1">## [1] -0.8519  0.3671  0.4243</span>
</span><span class="line"><span class="c1">## </span>
</span><span class="line"><span class="c1">## [[3]]</span>
</span><span class="line"><span class="c1">## [1]  0.09395 -1.19474  1.52337 -1.97529  0.47370</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这样使用的情况非常少，使用时需要特别注意一下。</p>

<p>当然，在<code>lapply</code>中你也可以使用自定义的函数，比如：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="r"><span class="line">x <span class="o">&lt;-</span> list<span class="p">(</span><span class="m">1</span><span class="o">:</span><span class="m">4</span><span class="p">,</span> <span class="m">2</span><span class="o">:</span><span class="m">5</span><span class="p">,</span> <span class="m">10</span><span class="o">:</span><span class="m">14</span><span class="p">)</span>
</span><span class="line">lapply<span class="p">(</span>x<span class="p">,</span> <span class="kr">function</span><span class="p">(</span>item<span class="p">)</span> any<span class="p">(</span>item <span class="o">==</span> <span class="m">5</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="r"><span class="line"><span class="c1">## [[1]]</span>
</span><span class="line"><span class="c1">## [1] FALSE</span>
</span><span class="line"><span class="c1">## </span>
</span><span class="line"><span class="c1">## [[2]]</span>
</span><span class="line"><span class="c1">## [1] TRUE</span>
</span><span class="line"><span class="c1">## </span>
</span><span class="line"><span class="c1">## [[3]]</span>
</span><span class="line"><span class="c1">## [1] FALSE</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这边，自定义函数中使用<code>item</code>代表<code>x</code>的每一个元素，你也可以使用任何你想用的字符表示。</p>

<hr />

<h4 id="sapply">2. <code>sapply</code>函数</h4>
<hr />

<p><code>sapply</code>函数与<code>lapply</code>函数使用与处理上完全相同，唯一不同的是，<code>sapply</code>会尽可能地简化输出地结果。如果可能，<code>sapply</code>会输出向量或者矩阵；当然，如果实在不行，它就会输出列表，这个时候就与<code>lapply</code>函数一模一样了。接着上面一个例子看看：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="r"><span class="line">x <span class="o">&lt;-</span> list<span class="p">(</span><span class="m">1</span><span class="o">:</span><span class="m">4</span><span class="p">,</span> <span class="m">2</span><span class="o">:</span><span class="m">5</span><span class="p">,</span> <span class="m">10</span><span class="o">:</span><span class="m">14</span><span class="p">)</span>
</span><span class="line">sapply<span class="p">(</span>x<span class="p">,</span> <span class="kr">function</span><span class="p">(</span>item<span class="p">)</span> any<span class="p">(</span>item <span class="o">==</span> <span class="m">5</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="r"><span class="line"><span class="c1">## [1] FALSE  TRUE FALSE</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<hr />

<h4 id="apply">3. <code>apply</code>函数</h4>
<hr />

<p><code>apply</code>函数：对数组或矩阵，按行或者按列进行指定的函数操作。看个简单地例子：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="r"><span class="line">x <span class="o">&lt;-</span> matrix<span class="p">(</span><span class="m">1</span><span class="o">:</span><span class="m">12</span><span class="p">,</span> <span class="m">4</span><span class="p">,</span> <span class="m">3</span><span class="p">)</span>
</span><span class="line">x
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="r"><span class="line"><span class="c1">##      [,1] [,2] [,3]</span>
</span><span class="line"><span class="c1">## [1,]    1    5    9</span>
</span><span class="line"><span class="c1">## [2,]    2    6   10</span>
</span><span class="line"><span class="c1">## [3,]    3    7   11</span>
</span><span class="line"><span class="c1">## [4,]    4    8   12</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="r"><span class="line">apply<span class="p">(</span>x<span class="p">,</span> <span class="m">1</span><span class="p">,</span> mean<span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="r"><span class="line"><span class="c1">## [1] 5 6 7 8</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="r"><span class="line">apply<span class="p">(</span>x<span class="p">,</span> <span class="m">2</span><span class="p">,</span> mean<span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="r"><span class="line"><span class="c1">## [1]  2.5  6.5 10.5</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>其中，<code>apply(data, margin, fun)</code>，<code>margin=1</code>即是按行求；<code>margin=2</code>即是按列求。</p>

<hr />

<h4 id="tapply">4. <code>tapply</code>函数</h4>
<hr />

<p><code>tapply</code>函数：对向量的一个子集执行指定的函数。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="r"><span class="line">str<span class="p">(</span>tapply<span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="r"><span class="line"><span class="c1">## function (X, INDEX, FUN = NULL, ..., simplify = TRUE)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>其中<code>x</code>是需要处理的向量，<code>INDEX</code>是因子(因子列表)，<code>FUN</code>是需要执行的函数，<code>simplify</code>指是否简化输入结果(考虑sapply对于lapply的简化)。</p>

<p>看个简单地例子：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="r"><span class="line">x <span class="o">&lt;-</span> <span class="m">1</span><span class="o">:</span><span class="m">12</span>
</span><span class="line">x
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="r"><span class="line"><span class="c1">##  [1]  1  2  3  4  5  6  7  8  9 10 11 12</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="r"><span class="line">Index <span class="o">&lt;-</span> gl<span class="p">(</span><span class="m">3</span><span class="p">,</span> <span class="m">4</span><span class="p">)</span>
</span><span class="line">Index
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="r"><span class="line"><span class="c1">##  [1] 1 1 1 1 2 2 2 2 3 3 3 3</span>
</span><span class="line"><span class="c1">## Levels: 1 2 3</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="r"><span class="line">Index2 <span class="o">&lt;-</span> gl<span class="p">(</span><span class="m">4</span><span class="p">,</span> <span class="m">3</span><span class="p">)</span>
</span><span class="line">Index2
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="r"><span class="line"><span class="c1">##  [1] 1 1 1 2 2 2 3 3 3 4 4 4</span>
</span><span class="line"><span class="c1">## Levels: 1 2 3 4</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="r"><span class="line">tapply<span class="p">(</span>x<span class="p">,</span> Index<span class="p">,</span> sum<span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="r"><span class="line"><span class="c1">##  1  2  3 </span>
</span><span class="line"><span class="c1">## 10 26 42</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="r"><span class="line">tapply<span class="p">(</span>x<span class="p">,</span> Index2<span class="p">,</span> sum<span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="r"><span class="line"><span class="c1">##  1  2  3  4 </span>
</span><span class="line"><span class="c1">##  6 15 24 33</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>不简化输出结果：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="r"><span class="line">tapply<span class="p">(</span>x<span class="p">,</span> Index2<span class="p">,</span> sum<span class="p">,</span> simplify <span class="o">=</span> <span class="kc">FALSE</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="r"><span class="line"><span class="c1">## $`1`</span>
</span><span class="line"><span class="c1">## [1] 6</span>
</span><span class="line"><span class="c1">## </span>
</span><span class="line"><span class="c1">## $`2`</span>
</span><span class="line"><span class="c1">## [1] 15</span>
</span><span class="line"><span class="c1">## </span>
</span><span class="line"><span class="c1">## $`3`</span>
</span><span class="line"><span class="c1">## [1] 24</span>
</span><span class="line"><span class="c1">## </span>
</span><span class="line"><span class="c1">## $`4`</span>
</span><span class="line"><span class="c1">## [1] 33</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="mapply">5. <code>mapply</code>函数</h4>
<hr />

<p><code>mapply</code>函数：对一个函数，使用指定的参数集合进行运算。看个简单地例子：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="r"><span class="line">mapply<span class="p">(</span>mean<span class="p">,</span> <span class="m">1</span><span class="o">:</span><span class="m">4</span><span class="p">,</span> <span class="m">5</span><span class="o">:</span><span class="m">8</span><span class="p">,</span> <span class="m">3</span><span class="o">:</span><span class="m">6</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="r"><span class="line"><span class="c1">## [1] 1 2 3 4</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>上面这个指令进行了什么运算呢？就是计算了集合(1,5,3),(2,6,4),(3,7,5),(4,8,6)四个集合各自的平均值。</p>

<h5 id="section">如何处理其他参数</h5>

<p>很多时候，函数并非只有一个输入参数，有一些其它的参数怎么处理呢？</p>

<p>使用<code>rnorm</code>函数来举个例子：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="r"><span class="line">set.seed<span class="p">(</span><span class="m">10</span><span class="p">)</span>
</span><span class="line">mapply<span class="p">(</span>rnorm<span class="p">,</span> <span class="m">1</span><span class="o">:</span><span class="m">3</span><span class="p">,</span> mean <span class="o">=</span> <span class="m">2</span><span class="p">,</span> sd <span class="o">=</span> <span class="m">1</span><span class="o">:</span><span class="m">3</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="r"><span class="line"><span class="c1">## [[1]]</span>
</span><span class="line"><span class="c1">## [1] 2.019</span>
</span><span class="line"><span class="c1">## </span>
</span><span class="line"><span class="c1">## [[2]]</span>
</span><span class="line"><span class="c1">## [1]  1.6315 -0.7427</span>
</span><span class="line"><span class="c1">## </span>
</span><span class="line"><span class="c1">## [[3]]</span>
</span><span class="line"><span class="c1">## [1] 0.2025 2.8836 3.1694</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="r"><span class="line">set.seed<span class="p">(</span><span class="m">10</span><span class="p">)</span>
</span><span class="line">mapply<span class="p">(</span>rnorm<span class="p">,</span> <span class="m">1</span><span class="o">:</span><span class="m">3</span><span class="p">,</span> mean <span class="o">=</span> <span class="m">1</span><span class="o">:</span><span class="m">3</span><span class="p">,</span> sd <span class="o">=</span> <span class="m">1</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="r"><span class="line"><span class="c1">## [[1]]</span>
</span><span class="line"><span class="c1">## [1] 1.019</span>
</span><span class="line"><span class="c1">## </span>
</span><span class="line"><span class="c1">## [[2]]</span>
</span><span class="line"><span class="c1">## [1] 1.8157 0.6287</span>
</span><span class="line"><span class="c1">## </span>
</span><span class="line"><span class="c1">## [[3]]</span>
</span><span class="line"><span class="c1">## [1] 2.401 3.295 3.390</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>上述的命令应该与下面的命令效果相同：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="r"><span class="line">set.seed<span class="p">(</span><span class="m">10</span><span class="p">)</span>
</span><span class="line">list<span class="p">(</span>rnorm<span class="p">(</span><span class="m">1</span><span class="p">,</span> <span class="m">2</span><span class="p">,</span> <span class="m">1</span><span class="p">),</span> rnorm<span class="p">(</span><span class="m">2</span><span class="p">,</span> <span class="m">2</span><span class="p">,</span> <span class="m">2</span><span class="p">),</span> rnorm<span class="p">(</span><span class="m">3</span><span class="p">,</span> <span class="m">2</span><span class="p">,</span> <span class="m">3</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="r"><span class="line"><span class="c1">## [[1]]</span>
</span><span class="line"><span class="c1">## [1] 2.019</span>
</span><span class="line"><span class="c1">## </span>
</span><span class="line"><span class="c1">## [[2]]</span>
</span><span class="line"><span class="c1">## [1]  1.6315 -0.7427</span>
</span><span class="line"><span class="c1">## </span>
</span><span class="line"><span class="c1">## [[3]]</span>
</span><span class="line"><span class="c1">## [1] 0.2025 2.8836 3.1694</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="r"><span class="line">set.seed<span class="p">(</span><span class="m">10</span><span class="p">)</span>
</span><span class="line">list<span class="p">(</span>rnorm<span class="p">(</span><span class="m">1</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="m">1</span><span class="p">),</span> rnorm<span class="p">(</span><span class="m">2</span><span class="p">,</span> <span class="m">2</span><span class="p">,</span> <span class="m">1</span><span class="p">),</span> rnorm<span class="p">(</span><span class="m">3</span><span class="p">,</span> <span class="m">3</span><span class="p">,</span> <span class="m">1</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="r"><span class="line"><span class="c1">## [[1]]</span>
</span><span class="line"><span class="c1">## [1] 1.019</span>
</span><span class="line"><span class="c1">## </span>
</span><span class="line"><span class="c1">## [[2]]</span>
</span><span class="line"><span class="c1">## [1] 1.8157 0.6287</span>
</span><span class="line"><span class="c1">## </span>
</span><span class="line"><span class="c1">## [[3]]</span>
</span><span class="line"><span class="c1">## [1] 2.401 3.295 3.390</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="section-1">小节</h4>
<hr />

<p>Loop Functions可以在很大程度上简化我们所写的代码，能够帮我们简化很多操作，比如重复地输入一些东西等等！学好它可能对于程序运行本身没有多大的帮助，但是代码并不只是写给计算机看的，也是写给人看的！我认为，好的代码应该是简洁舒适的，阅读起来让自己和别人都觉得是一种美的享受！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[数据科学之机器学习13: 关联分析]]></title>
    <link href="http://jackycode.github.io/blog/2014/05/04/associationg-ananlysis/"/>
    <updated>2014-05-04T10:12:50+08:00</updated>
    <id>http://jackycode.github.io/blog/2014/05/04/associationg-ananlysis</id>
    <content type="html"><![CDATA[<p><img src="http://jackycode.github.io/images/artical/artical29.jpg" alt="artical 29" />
<!-- more --></p>

<p>标题图片出处：<a href="http://www.hypertextbookshop.com/dataminingbook/public_version/contents/chapters/chapter002/section003/blue/page002.html">Rule Generation</a></p>

<p><em>“文章原创，转载请注明出处”</em></p>

<hr />

<h4 id="section">一、简介</h4>
<hr />

<p>在统计学中，变量与变量之间的关系是统计结构的重要参数，统计的核心问题也就是研究变量与变量之间的关系。如果变量与变量之间不独立，那么这两个变量之间肯定存在一定的关联性，那么如何处理度量这个关联性，在统计中就称为关联分析。</p>

<p>列联表是传统统计学中度量两个分类变量之间关系强弱的方法，但是这个方法是对于两个固定的变量进行的一种测量。在机器学习中，常常会遇到大规模的变量，这时候更倾向于从众多的变量中最快地找到关联性最强的两组或多组变量。那么使用列联表就显得不太合适了，此时应该使用什么方法呢？</p>

<hr />

<h4 id="section-1">二、关联规则</h4>
<hr />

<p>首先介绍2个定义：</p>

<ol>
  <li><strong>k项集：</strong>设<script type="math/tex">I = \{ i_1, i_2, \dots, i_m \}</script>是$m$个待研究的项构成的有限项集，对于给定的事物数据表<script type="math/tex">T = \{ T_1, T_2, \dots, T_n \}</script>，其中任意的$T_i$是$I$中的$k$项组成的集合，称之为<strong>k项集</strong>。</li>
  <li><strong>关联规则</strong>：形如<script type="math/tex"> X \rightarrow Y</script>的形式，其中<script type="math/tex"> X \subseteq I </script>, <script type="math/tex">Y \subseteq I</script>，且有<script type="math/tex"> X \bigcap Y = \emptyset </script>。</li>
</ol>

<hr />

<h5 id="section-2">度量方式</h5>
<hr />

<p>对于一个项集，我们正常用支持度来度量它的频繁程度，其实就是其在数据集中出现的比例，这个很容易理解，就不多说了。</p>

<p>那么下面要讨论的就是：<strong>如何度量一个关联规则</strong>。一般使用下面两个概念：</p>

<ol>
  <li><strong>支持度S</strong>：定义为X和Y同时出现在一个事务中得可能性，即：
 <script type="math/tex"> S(X \Rightarrow Y) = \mid T(X \vee Y) \mid / \mid T \mid </script>
 其中，<script type="math/tex">\mid T(X \vee Y) \mid</script>表示同时包含X和Y的事务数，<script type="math/tex">\mid T \mid</script>表示总事务数。</li>
  <li><strong>支持度C</strong>：定义为出现在关联规则前项中得事务中出现关联规则后项的比例，即：
 <script type="math/tex"> C(X \Rightarrow Y) = \mid T(X \vee Y) \mid / \mid T(X) \mid </script>
 其中，<script type="math/tex"> \mid T(X) \mid</script>表示包含X的事务数。</li>
</ol>

<hr />

<h5 id="section-3">例子</h5>

<hr />

<p>这边举个简单地例子，方便理解上面的概念。比如设计一个购物数据：</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">id</th>
      <th style="text-align: center">items</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">1</td>
      <td style="text-align: center">AB</td>
    </tr>
    <tr>
      <td style="text-align: center">2</td>
      <td style="text-align: center">AC</td>
    </tr>
    <tr>
      <td style="text-align: center">3</td>
      <td style="text-align: center">C</td>
    </tr>
    <tr>
      <td style="text-align: center">4</td>
      <td style="text-align: center">ABC</td>
    </tr>
    <tr>
      <td style="text-align: center">5</td>
      <td style="text-align: center">BC</td>
    </tr>
  </tbody>
</table>

<p>上面数据的意思，比如第一行就表示，id为1的人购买了A和B两个物品，其他的意思类似。那么这个AB就是一个2项集，因为存在ABC三种物品，这边就有6种关联规则：<script type="math/tex">A \Rightarrow B</script>, <script type="math/tex">A \Rightarrow C</script>, <script type="math/tex"> B \Rightarrow C</script>, <script type="math/tex"> B \Rightarrow A </script>, <script type="math/tex"> C \Rightarrow A</script>, <script type="math/tex"> C \Rightarrow B </script>。</p>

<p>那么如何计算一个关联规则的支持度与可信度呢？</p>

<p>试试关联规则<script type="math/tex">A \Rightarrow B</script>：</p>

<script type="math/tex; mode=display"> S(A \Rightarrow B) =  \mid T(A \vee B) \mid / \mid T \mid = 2/5 </script>

<script type="math/tex; mode=display"> C(A \Rightarrow B) =  \mid T(A \vee B) \mid / \mid T(A) \mid = 2/3 </script>

<p>是不是很简单呢。试试计算一下其他的关联规则，多算几次就能够很了解其中的含义了。</p>

<hr />

<h5 id="section-4">关联规则的作用</h5>
<hr />

<ol>
  <li>
    <p>关联规则的目的在于，找到变量之间支持度和可信度都比较高的那些关联规则。</p>
  </li>
  <li>
    <p>关联规则的支持度，用于度量关联规则在数据库中得普适程度，是对关联规则重要性(适用性)的一种度量。</p>
  </li>
  <li>
    <p>关联规则的可信度，这是一个相对指标，是对关联规则准确度的一个度量。值越高，代表这个关联规则的后项依赖前项的可能性比较高。</p>
  </li>
</ol>

<hr />

<h4 id="section-5">小节</h4>
<hr />

<p>这篇简单介绍了一下关联分析的一些概念问题，以及如何度量一个关联规则。但是，试想一想，要是$I$中包含的项很多，事物数据表$T$也很大，那么要计算所有关联规则的支持度和可信度，难度可想而知！这时候就需要使用一些算法去解决这个问题，现在比较流行的算法就是：处理静态关联规则的Apriori算法和处理动态关联规则的Carma算法。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac 系统重装]]></title>
    <link href="http://jackycode.github.io/blog/2014/04/30/reinstall-mac/"/>
    <updated>2014-04-30T20:57:58+08:00</updated>
    <id>http://jackycode.github.io/blog/2014/04/30/reinstall-mac</id>
    <content type="html"><![CDATA[<p><img src="http://jackycode.github.io/images/artical/artical28.jpg" alt="artical 28" />
<!-- more --></p>

<p><em>“文章原创，转载请注明出处”</em></p>

<hr />

<p>话说Mac一般来讲不需要什么重装啊，不过世事无绝对啊，有时候人就是喜欢作死！！！比如前几天的我~~~算了，具体情况就不说了，反正就是作死，Mac系统出了问题。本来想着用Time Machine恢复一下就得了，也省事。不过仔细想了一想，很想自己安装一遍（博主的折腾精神有时候很是让自己“佩服”），然后就开始了Mac系统重装之旅！</p>

<h3 id="usb">一、制作USB安装盘</h3>
<hr />

<p>要安装首先就得制作一个启动U盘，当然你也可以使用Mac的Internet Recovery，不过我试了一下，反正我是连不上！不过即使连上了，那个下载应该也需要超久的时间，不是我可以等得了的。我之前更新Mac时，已经下载好了Mavericks（OS X 10.9），所以直接拿来用了。</p>

<h4 id="section">具体操作如下：</h4>

<ol>
  <li>将OS X 10.9安装文件放到桌面上，右键选择“显示包内容”；</li>
  <li>复制”Contents/Resources/createinstallmedia”到桌面；</li>
  <li>打开终端，执行命令：<code>sudo -s</code>，切换到root（成功的话，应该会显示<code>bash-3.2#</code>）；</li>
  <li>将U盘（8G以上）接入Mac，用磁盘工具进行格式化，格式选择<strong>“Mac OS扩展（日志式）”</strong>，名称定为<strong>“OSX”</strong>；</li>
  <li>
    <p>在终端中执行下面的命令：（将其中的“username”换成你自己的用户名）</p>

    <p><code>
 /Users/username/Desktop/createinstallmedia --volume /Volumes/OSX --
</code></p>

    <p><code>
 applicationpath /Users/username/Desktop/"Install OS X Mavericks.app"
</code></p>
  </li>
  <li>等待终端完成。因为需要将安装的文件全部拷贝到U盘中，需要的时间可能有些久，不用着急，喝杯咖啡看看网页！完成后的终端会显示“Copy complete.Done.”</li>
</ol>

<p>根据上面的流程，制作的安装盘是完整的，也就是安装完成之后，Mac是有Recovery HD的（就是开机按住option可以看到得“恢复10.9”），也可以使用FileVault和find my Mac功能。网上一些直接利用磁盘工具制作的安装盘，应该是不具备这个能力的，所以不建议使用那些方法。</p>

<h3 id="section-1">二、加密与备份</h3>
<hr />

<h4 id="section-2">安装之前：</h4>

<p>在重装Mac系统之前，需要对Mac里面的文件进行一个备份。也建议使用Dropbox这样的网盘，将自己的一部分文件同步在网盘上，这样就不会存在丢失的情况。备份好之后，就可以开始重新安装Mac系统了。</p>

<h4 id="section-3">安装之后：</h4>

<ol>
  <li>在安装好了Mac系统之后，我首先进行了一些基本的设置：触控板、输入源、iCloud账号设置等等；</li>
  <li>在完成这些基础设置之后，你可以选择打开FileVault加密，增强电脑的安全系数（不过打开后，开机速度可能会变慢一些）；</li>
  <li>强烈建议打开Time Machine，给电脑做个备份；</li>
</ol>

<h3 id="command-line-tools">三、安装Command Line Tools</h3>
<hr />

<p>为什么需要将这个独立出来？哎，没办法啊。。。在Mac上很多事情都靠他，离了它，估计我就没法好好生活好好学习好好过日子了！！！（夸张夸张！）</p>

<p>这个的安装，我是直接下载了XCode和Command Line Tools之后安装的。用App Store下载Xcode，那个速度我实在是等不了。</p>

<h3 id="java">四、安装Java</h3>
<hr />

<p>由于平时需要使用Weka，当然还有那个什么，那个什么~~~反正很多啦，都是需要Java支持的，像Matlab！嘿嘿。。。所以去安装一个Java吧，虽然我很不喜欢它！</p>

<h3 id="shell">五、配置shell</h3>
<hr />

<p>Mac默认使用的时bash，表示不喜欢。在对电脑进行各种软件安装配置之前，必须把Terminal搞成我喜欢的样子，嘿嘿~~</p>

<ol>
  <li>切换shell到<code>zsh</code>：<code>chsh -s /bin/zsh</code>；</li>
  <li>
    <p>首先安装<code>Homebrew</code>，执行下面的命令即可：</p>

    <p><code>
 ruby &lt;(curl -fsSkL raw.github.com/mxcl/homebrew/go)
</code></p>
  </li>
  <li>安装<code>wget</code>：<code>brew install wget</code></li>
  <li>安装<code>oh-my-zsh</code>：<code>wget https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | sh</code></li>
  <li>修改配置文件<code>.zshrc</code>；</li>
  <li>修改主题文件，主题文件的目录为<code>~/.oh-my-zsh/themes</code>，找到自己使用的主题，进行修改即可。</li>
</ol>

<h3 id="r">六、R语言相关</h3>
<hr />

<p>每天都在使用R语言，离了这个可真是活不了！下载好了R 和 RStudio之后，直接安装就好了。不过，这边可能会出现一个问题，就是在Mac上可能会出现encoding之类的问题，这个时候就需要设置一下，打开终端运行以下的命令即可：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">defaults write org.R-project.R force.LANG en_US.UTF-8</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>安装好之后，将自己常用的包下载一下就OK了！</p>

<h3 id="python">七、Python</h3>
<hr />

<p>除了R语言，应该算是这货用的最多，所以安装好了R之后，就开始来弄它了。</p>

<p>Mac是自带Python的，10.9自带的版本是Python 2.7.5，我一般使用的是Python 2.7.6，所以首先需要更新一个Python。以前我使用的软件包管理系统是Macports，不过现在已经叛逃到了Homebrew了！</p>

<ol>
  <li>
    <p>执行<code>brew install python</code>就可以下载安装最新版的Python了。不过安装好了之后，还是用不了的。因为Mac还是会用自带的那个Python。这个我一般就是将Homebrew的软件包目录加入PATH中，并且将该软件包目录的位置放置于其它目录的上方。</p>

    <p>可以使用<code>sudo vi etc/paths</code>打开系统的PATH，然后在里面的第一行添加Homebrew的软件包安装目录<code>\usr\local\bin</code>，第二行添加为<code>\usr\local\sbin</code>，其实只要再<code>\usr\bin</code>的上方就行了。</p>
  </li>
  <li>安装好这些之后，可以使用Python自带的<code>easy_install</code>安装<code>pip</code>，即：<code>easy_install pip</code>；</li>
  <li>使用<code>pip</code>安装需要的python库：<code>pip install numpy</code>等等。我一般安装的是库有：<code>numpy, scipy, matplotlib, ipython, scikit-learn</code>等。</li>
</ol>

<h3 id="sublime-text--textmate">八、Sublime Text &amp; TextMate</h3>
<hr />

<p>我一般使用的文本编辑器就是上面两个，ST3常用，TM用的稍微少一些。配置的时候，ST3稍微麻烦一些，TM则简单地多，只要点点点就可以了。</p>

<h4 id="sublime-text-3">Sublime Text 3</h4>

<ol>
  <li>
    <p>安装好ST之后先安装Package Control，打开view -&gt; show console，在console中输入代码。可以到<a href="https://sublime.wbond.net/installation">这里</a>去查看安装的最新代码(区分ST2以及ST3)；</p>
  </li>
  <li>
    <p>配置安装主题Flatland（我的最爱），使用<code>shift + cmd + P</code>打开Package Control，输入<code>install package</code>，return之后等待一下。在弹出的窗口中输入<code>Flatland</code>，安装即可。安装完成后，打开Prefereces -&gt; Settings - User，添加配置：</p>

    <p><code>
 "color_scheme": "Packages/Theme - Flatland/Flatland Monokai.tmTheme",
 "theme": "Flatland Dark.sublime-theme"
</code></p>

    <p>当然还可以对这个主题进行其它配置，可以自行Google；</p>
  </li>
  <li>
    <p>修改字体，还是在Setting-User中，添加：</p>

    <p><code>
 "font_face": "menlo",
 "font_size": 13
</code></p>
  </li>
  <li>安装一些常用的包：<code>ConvertToUTF8</code>, <code>Enhanced-R</code>, <code>SublimeLinter</code>, <code>SublimeREPL</code>, <code>OmniMarkupPreviewer</code>, <code>Markdown Extended</code>, <code>Jedi - Python autocompeltion</code>, <code>Alignment</code>, <code>BracketHighlighter</code>, <code>SendText</code>, <code>SideBarEnhancements</code>, <code>TrailingSpaces</code>等等。</li>
  <li>对有些需要配置的包配置一下，其实我也就配置了跟R语言有关的包，以及R语言在ST的快捷键。</li>
</ol>

<h4 id="textmate">TextMate</h4>

<p>这个配置起来比较容易，只需要在Preferences -&gt; Bundles下面选择需要安装的包就可以了。我安装了一些我常用的包，然后将主题更换成了<code>Made of Code</code>，将<code>show command output</code>修改成了<code>Right of text view</code>。</p>

<h3 id="section-4">九、安装其它的软件</h3>
<hr />

<p>完成上面的安装，基本上就能用了，但是我需要在R中使用Knitr和Sweave，所以我得安装MacTex，顺便还装了Lyx。</p>

<p>安装好了MacTex之后，我就安装了其它一些平时会用的软件，像Octave、Weka、MySQL等等！</p>

<p>剩下的就是常用软件了，什么Dropbox、Evernote、iWork等等！！！iWork那个下载速度很是蛋疼啊~~~</p>

<h3 id="section-5">总结</h3>
<hr />

<p>因为是隔了好几天才动笔写这个记录的，所以应该记录之中不免会有些遗漏！当然，中间或多或少肯定也存在一些问题，欢迎指正！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[数据科学之机器学习12: Logisic回归]]></title>
    <link href="http://jackycode.github.io/blog/2014/04/27/logistic-regression/"/>
    <updated>2014-04-27T10:34:11+08:00</updated>
    <id>http://jackycode.github.io/blog/2014/04/27/logistic-regression</id>
    <content type="html"><![CDATA[<p><img src="http://jackycode.github.io/images/artical/artical27.jpg" alt="artical 27" />
<!-- more --></p>

<p><em>“文章原创，转载请注明出处”</em></p>

<hr />

<p>在数据科学系列的开头，花了三篇介绍了线性回归。线性回归模型应该是定量分析中最常用的一种统计分析方法。但是线性回归处理数据时，要求因变量是连续型变量。但是很多时候，需要处理的数据，其因变量并不是连续的。像性别、对错等等，这种离散的因变量，一般称为分类响应变量。</p>

<p>在机器学习的<a href="http://jackycode.github.io/blog/2014/03/30/data-science-an-introduction-to-machine-learning/">介绍篇</a>中，已经介绍了监督学习与非监督学习。在监督学习中，最主要的两类问题，一个就是回归，另一个就是分类。而Logistic回归就是处理二元分类的一种方法，当然其也存在自身的问题，这个后面再讲。</p>

<h4 id="sigmoid">Sigmoid函数</h4>
<hr />

<p>要了解Logistic回归，首先需要了解一下Sigmoid函数。为什么呢？</p>

<p>一般来说，我们会定义二元分类变量的输出为0和1，这种函数叫做单位阶跃函数，也称Heaviside step function。这个函数的特点就是其取值可以从0突变到1，反之也可。学过数分的话就知道，这种函数有时候会非常难以处理，因为带跳突变，导致了不可微不可导。在这里，就可以借助Sigmoid函数，因为这个函数可以近似地描述单位阶跃函数的特点。首先看看Sigmoid函数：</p>

<script type="math/tex; mode=display"> p = \frac{exp(y)}{1+exp(y)} = \frac{1}{1 + exp(-y)}</script>

<p>简单看一下这个函数，当$y=0$时，$p=0.5$；当$y$变大，趋近于无穷时，$y$趋近1；反之，$y$趋近0。而且，这种趋近的速度是非常快的。正是因为这个趋近速度非常快，我们可以使用Sigmoid函数来处理这边的单位阶跃函数。</p>

<h4 id="logistic">Logistic回归</h4>
<hr />

<p>利用Sigmoid函数可以将单位阶跃函数做个近似，而Sigmoid函数是连续的，那么就可以利用之前的线性回归来建立模型。</p>

<p>令$ y = X\beta $，又<script type="math/tex"> p = \frac{1}{1 + exp(-y)} </script>，变形可得Logistic回归模型：</p>

<script type="math/tex; mode=display"> logit(p) = ln(\frac{p}{1-p}) = X\beta </script>

<p>上述的$logit(p)$称为$logit$变换，此时$p$就是响应变量，$X$就是自变量。到这，我们就可以利用线性模型对参数进行估计了。</p>

<h5 id="section">统计中的解释</h5>
<hr />

<p>这里面的$p$除了利用Sigmoid函数来解释之外，还可以利用统计中的二项分布来解释，而且从某种角度来说，这个解释会更便于理解。试想，我们这边需要处理的二元分类变量就是0和1。我们考虑0就是“不发生”，1就是“发生”，那么我们可以将前面的$p$理解成发生的概率。通过对已知数据建立模型，估计出参数，我们就可以利用模型去预测在不同的自变量条件下，“发生”的概率是多大，从而达到一个分类的目的。</p>

<p>从这边的分析就可以看到，Logistic回归的缺点：那就是欠拟合，会导致分类的精度下降。</p>

<h5 id="r">R语言实现</h5>
<hr />

<p>因为这个属于线性回归的一种变形，所以求解的方式直接<strong>借用线性回归</strong>即可。</p>

<p>当然，也存在其它的方法。因为Logistic回归是属于广义线性回归模型的，在R中有专门处理广义线性模型的函数<code>glm</code>：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">model &lt;- glm(formula, family=binominal(link = logit), data=data.frame)</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这里处理的方式中，利用了连接函数(link=logit)，感兴趣的话可以找找广义线性模型的内容看看，当然，以后如果介绍统计模型的话，这个肯定也是必讲得内容。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[数据科学之机器学习11: 聚类分析2]]></title>
    <link href="http://jackycode.github.io/blog/2014/04/24/cluster-analysis2/"/>
    <updated>2014-04-24T09:39:02+08:00</updated>
    <id>http://jackycode.github.io/blog/2014/04/24/cluster-analysis2</id>
    <content type="html"><![CDATA[<p><img src="http://jackycode.github.io/images/artical/artical26.jpg" alt="artical 26" />
<!-- more --></p>

<p><em>“文章原创，转载请注明出处”</em></p>

<hr />

<p>上一篇介绍了聚类分析的定义，给出了很多不同的相似性的度量方法。这一篇主要想介绍一下除了快速聚类之外的另外一种聚类方法：<strong>系统聚类法</strong>。</p>

<h3 id="section">二、系统聚类法</h3>
<hr />

<p>系统聚类法，hierarchical clustering method，是聚类分析方法中用的较多的一种。其具体过程如下：</p>

<ol>
  <li>对于n个样品，构造n个类，每个样品单独作为一类。计算每个类之间的距离；</li>
  <li>合并距离最近的两个类为一个新类；</li>
  <li>计算新类与其它类之间的距离，重复2直到所有类合并称为1个类为止。</li>
</ol>

<p>那么类与类之间的距离如何定义呢？</p>

<p>其实，类与类之间的距离有很多中定义方式常见的有：</p>

<ol>
  <li>最短距离法，single linkage method，<script type="math/tex"> D_{KL} = \min_{i \in G_K,j \in G_L} d_{ij} </script>；</li>
  <li>最长距离法，complete linkage method，<script type="math/tex"> D_{KL} = \max_{i \in G_K,j \in G_L} d_{ij} </script>；</li>
  <li>中间距离法，median linkage method，即取最远距离与最近距离两者的中间距离；</li>
  <li>类平均法，average linkage method，<script type="math/tex"> D_{KL} = \frac{1}{n_Kn_L} \sum_{i \in G_K,j \in G_L} d_{ij} </script>；</li>
  <li>重心法，centroid hierarchical method，即取类重心之间的距离；</li>
  <li>离差平方和法，Ward’s minimum variance method, 定义较为繁琐，可以自行Google；</li>
</ol>

<p><strong>注</strong>：系统聚类的方法并不困难，但是实现时会存在计算量的问题。系统聚类法一般是在样品间距离矩阵的基础上进行的，它需要计算所有点到所有点之间的距离，当样品量很大时，这个计算量会变得非常的大。因而，很多时候人们会采用动态聚类的方法去处理数据，动态聚类法中一种最常用的方法就是之前已经介绍过的KMeans方法。</p>

<h4 id="r">R语言实现</h4>

<p>在R语言中，自带了一个函数可以实现系统聚类：<code>hclust</code>。可以自己查阅help。</p>

<h3 id="section-1">三、聚类的一些问题</h3>
<hr />

<ol>
  <li>量纲问题。实际问题中，由于数据采用的量纲不同，很多时候需要对数据进行一些变换，最常用的就是标准化。但也有一些其它方式：极差变换（数据除以极差）；主成分变换（用主成分代替本身数据）；对数变换等等。</li>
  <li>kmeans算法只有在类的平均值可以被定义的情况下使用，所以在一些特殊的场合，kmeans并不适用。比如分类数据等等!!</li>
  <li>kmeans算法使用平均值作为衡量，这就造成了一个新的问题。即kmeans不适用于含有异常值的数据，非凸面的数据以及大小值相差很大的数据。</li>
  <li>聚类的一个<strong>难点</strong>在于：确定类的个数。通过上面介绍的算法来看，所有的方法都需要自己去定义类的个数。那么如何去定义类的个数呢？这是一个到现在还没有满意解决的问题。常用的方式就是观察样品散点图，查看变化率，以及使用一些假设检验的方式（感兴趣可以翻阅专业的书籍材料，比如上海财经出版社的应用多元分析中就有讲到这部分内容）。</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[数据科学之机器学习10: 聚类分析1]]></title>
    <link href="http://jackycode.github.io/blog/2014/04/21/cluster-analysis/"/>
    <updated>2014-04-21T18:46:04+08:00</updated>
    <id>http://jackycode.github.io/blog/2014/04/21/cluster-analysis</id>
    <content type="html"><![CDATA[<p><img src="http://jackycode.github.io/images/artical/artical25.jpg" alt="artical 25" />
<!-- more --></p>

<p><em>“文章原创，转载请注明出处”</em></p>

<hr />

<p>上一篇介绍了聚类分析中的KMeans算法，这一节就来具体地说说聚类分析。聚类分析，cluster analysis，是一种研究“物以类聚”现代统计学分析方法，其目的是要把分类对象按照一定的规则分成若干个类。这些类别并非事先给定的，而是根据数据的特征确定的。</p>

<hr />

<h5 id="note">NOTE：聚类的划分：</h5>

<ol>
  <li>
    <p>根据分类对象的不同，可以分为：<strong>Q型聚类分析</strong>和<strong>R型聚类分析</strong>。Q型是指对样品对象进行聚类；而R型则是对变量(属性)进行聚类。</p>
  </li>
  <li>
    <p>按照分析方法的不同，又可以分为：<strong>系统聚类法</strong>、<strong>快速聚类法</strong>和<strong>模糊聚类法</strong>。上一篇介绍的KMeans法就是快速聚类法中的一种。</p>
  </li>
</ol>

<hr />

<h4 id="section">一、相似性的度量</h4>
<hr />

<p>在上一篇中，我们已经介绍过，聚类其实就是将相似度高的样品啊属性啊合并成一个类别。但是，上一篇我们仅仅给出了一种也是最简单的一种相似性的度量方式——欧式距离。这里我们详细看看相似性有哪些度量方式：</p>

<p>除了使用<strong>有序尺度变量</strong>（将属性划分为一级、二级等等的有次序关系的量来表示）和<strong>名义尺度变量</strong>（使用既没有等级关系，又不存在数量关系的量来表示。比如男女）之外，一般采用的测量尺度的方式就是<strong>间隔尺度变量</strong>。</p>

<p><strong>间隔尺度变量</strong>即是使用连续的量来表示测量尺度，一般都是连续型的，比如欧式距离、重量等等。一般来讲，在应对Q型聚类时会使用<strong>距离</strong>去度量；而对R型聚类来说，则会使用<strong>相似系数</strong>这种方式去度量。下面来分别看一看：</p>

<hr />

<h5 id="a-">a. 距离</h5>
<hr />

<p>上一篇中使用的欧氏距离即是这里的一种，在介绍各种不同的距离定义之前，首先看看距离的定义需要满足哪些条件：</p>

<ol>
  <li>首先，距离必须是非负的。即：<script type="math/tex">d_{ij} \geqslant 0, \forall i,j</script>;</li>
  <li>对于相同取值的样品，之间的距离必须为0。即：<script type="math/tex">d_{ij} = 0</script>，当且仅当，第i个样品与第j个样品的各变量值相同；</li>
  <li>i样品到j样品的距离与j样品到i样品的距离相等。即：<script type="math/tex">d_{ij} = d_{ji}, \forall i, j</script>；</li>
  <li>满足：<script type="math/tex">d_{ij} \leqslant d_{ik} + d_{kj}, \forall i,j,k</script>。</li>
</ol>

<p>下面就来看看常用的距离定义，首先看看最常用的Minkowski距离：</p>

<hr />

<h6 id="minkowski">(1). Minkowski距离</h6>

<script type="math/tex; mode=display"> d_{ij}(q) = [\sum_{k=1}^{p} {\mid x_{ik} - x_{jk} \mid ^ q}]^{1/q} </script>

<p>观察这个距离可以看到，当$q=2$时，上面定义的距离就是常用的欧氏距离。另外：</p>

<ul>
  <li><script type="math/tex">q=1</script>时，<script type="math/tex">d_{ij}=\sum_{k=1}^{p} {\mid x_{ik} - x_{jk} \mid}</script>称为<strong>绝对值距离</strong>；</li>
  <li><script type="math/tex">q=\infty</script>时，<script type="math/tex">d_{ij}=\max_{1 \leqslant k \leqslant p} {\mid x_{ik} - x_{jk} \mid}</script>称为<strong>切比雪夫距离</strong>。</li>
</ul>

<p>Minkowski距离存在一个问题，就是当变量的单位不同或者测量值范围相差很大时，直接使用Minkowski距离效果不佳。这个时候，应该先对数据进行<strong>标准化</strong>（就是减去均值除上标准差）之后再计算距离(这个后面还会说到)。</p>

<hr />

<h6 id="lancelance-and-williams">(2). Lance距离(Lance and Williams)</h6>

<p>当$x_{ji} &gt; 0$时，定义第i个样品到第j个样品的距离为：</p>

<script type="math/tex; mode=display"> d_{ij} = \sum_{k=1}^{p} {\frac{\mid x_{ik} - x_{jk} \mid}{x_{ik} + x_{jk}}} </script>

<p>从公式就可以看出来，这个距离与变量之间的单位没有什么关系；而且其对异常值也不敏感，因而适用于一些高度偏斜的数据。</p>

<hr />

<h6 id="mahalanobis">(3). Mahalanobis距离(马氏距离)</h6>

<p>上面的两种距离都没有考虑变量之间的相关性问题，马氏距离就可以考虑到这个问题。但是由于马氏距离定义的问题，在聚类分析中使用马氏距离并不合适。但是这里也还是给出马氏距离的定义：</p>

<script type="math/tex; mode=display"> d_{ij} = \sqrt{(x_i - x_j)^TS^{-1}(x_i - x_j)} </script>

<p>其中<script type="math/tex">x_i = (x_{i1}, \dots, x_{ip})^T</script>，<script type="math/tex">x_j = (x_{j1}, \dots, x_{jp})^T</script>，<script type="math/tex">S</script>为样本协方差阵。</p>

<p><strong><em>注：</em></strong>为什么说马氏距离不适用与聚类分析呢？</p>

<p>聚类分析是无监督算法中的一种，无监督算法是什么？无监督算法是没有先验信息的，所有的数据拿过来是没有什么目标信息啊什么的。没有不同类之间的先验信息，那么协方差阵<script type="math/tex">S</script>就无法计算。因而，在实际聚类分析中，马氏距离并不适用。</p>

<hr />

<h6 id="section-1">(4). 斜交空间距离</h6>

<script type="math/tex; mode=display"> d_{ij} = [ \frac{1}{p^2} \sum_{k=1}^{p} \sum_{l=1}^{p} (x_{ik} -x_{jk})(x_{il} - x_{jl})r_{kl} ] ^ {1/2} </script>

<p>其中<script type="math/tex">r_{kl}</script>是变量<script type="math/tex">x_k</script>与变量<script type="math/tex">x_l</script>的相关系数。学过高等代数的应该可以很容易看明白这个定义。此外，当变量之间互不相关的时候，这里的<script type="math/tex">d_{ij} = [d_{ij}(2)/p]_{Minkowski}</script>，也就是退化到了欧氏距离（相差一个常数倍）。</p>

<hr />

<h5 id="b-">b. 相似系数</h5>
<hr />

<p>对变量进行聚类时，通常使用相似系数来考量其间的相似度。那么相似系数的定义有需要满足哪些条件呢？</p>

<ol>
  <li>完全相关。即：$c_{ij} = \pm 1$，当且仅当$x_i = ax_j + b;a(\neq 0),b$是常数；</li>
  <li><script type="math/tex">\mid c_{ij} \mid \leqslant 1, \forall i, j </script>；</li>
  <li><script type="math/tex">c_{ij} = c_{ji}, \forall i, j </script>。</li>
</ol>

<p>下面看看常用的两种相似系数：</p>

<hr />

<h6 id="section-2">(1). 夹角余弦</h6>
<hr />

<p>变量$x_i$和$x_j$的夹角余弦的定义为：</p>

<script type="math/tex; mode=display"> c_{ij} = \frac{\sum_{k=1}^{n} {x_{ki}x_{kj}} }{ [ (\sum_{k=1}^{n}{ x^2_{ki} })(\sum_{k=1}^{n} {x^2_{kj}} ) ]^{1/2} } </script>

<p>学过解析几何应该很容易看出这个定义的含义所在，其实<script type="math/tex">c_{ij} = \cos \theta_{ij}</script>。</p>

<hr />

<h6 id="section-3">(2). 相关系数</h6>
<hr />

<script type="math/tex; mode=display"> c_{ij} = \frac { \sum _{ k=1 }^{ n }{ ({ x }_{ ki }-\overline{x_i})({ x }_{ kj }-\overline{x_j}) }  }{ \{ [\sum_{k=1}^{n}({ x }_{ ki }-\overline{x_i})^2][\sum_{k=1}^{n}({ x }_{ kj }-\overline{x_j})^2] \}^{1/2} } </script>

<p>这里的相关系数其实就是统计里面通常所说的相关系数。其实，如果变量都是标准化了的，那么夹角余弦就是相关系数，看出来了吗？</p>

<hr />

<h4 id="section-4">小节</h4>
<hr />

<p>到这边，就把统计中常用的用于度量相似性的定义讲了一些。这些定义，大都有其自身的数学背景。有些来自于几何学，有些来自于线性空间理论。对于使用者来说，搞明白什么时候选择什么样的度量方式更加重要！下一篇，我们讲一讲聚类分析中的一个常用方法：<strong>系统聚类法</strong>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[数据科学之机器学习9: 聚类算法之KMeans]]></title>
    <link href="http://jackycode.github.io/blog/2014/04/19/kmeans/"/>
    <updated>2014-04-19T13:01:02+08:00</updated>
    <id>http://jackycode.github.io/blog/2014/04/19/kmeans</id>
    <content type="html"><![CDATA[<p><img src="http://jackycode.github.io/images/artical/artical24.jpg" alt="artical 24" />
<!-- more --></p>

<p><em>“文章原创，转载请注明出处”</em></p>

<hr />

<h2 id="the-k-means-algorithm">The k-means algorithm</h2>
<hr />

<p>前面写了很多监督学习的东西，除了回归就是分类，今儿有点想换换口味，写写无监督学习的算法。k-means算法是一种聚类算法，聚类就是无监督学习里面的内容。那么先来说说聚类：</p>

<h3 id="section">一、聚类简介</h3>
<hr />

<ol>
  <li>
    <p>聚类是一种无监督学习方法，它主要就是将相似的对象归并到一个类别中。</p>
  </li>
  <li>
    <p>聚类分析的目的是把分类对象按照一定的规则，分成若干个类。这些类并不是事先给定的，而是在处理数据时，根据数据的特征确定的。因而，在处理之前无需对类的数目、结构等等作出假定(理论如此，实际应用时并不完全这样，以后讲聚类分析时再具体说)。</p>
  </li>
  <li>
    <p>在同一类别中，对象具有某种意义下的相似性；不同的类别中，对象具有某种意义下的不相似。</p>
  </li>
  <li>
    <p><strong>聚类与分类的最大不同</strong>：分类的目标事先已知，而聚类未知。正因为聚类产生的结构与分类相同，只是类别没有预先定义，所以聚类也被称为“无监督分类”。</p>
  </li>
</ol>

<h3 id="k-means">二、k-means法</h3>
<hr />

<p>k-means法是由MacQueen提出并命名的一种聚类算法。其使用聚类中的均值进行聚类划分，这样说不大好理解，可以先看一下算法的基本步骤：</p>

<ol>
  <li>从n个数据对象中任意取出k个样品对象作为初始聚类点（或者将所有数据分成k份，计算每一份中的重心（均值）作为初始聚类点）；</li>
  <li>对所有样品对象逐个归类，将每一个对象归入距离他最近的那个类（距离一般使用欧式距离），并将该类的凝聚点更新为这个类当前的均值；</li>
  <li>重复步骤2，直至所有对象都不能再分配为止。</li>
</ol>

<h3 id="r">三、R语言实现</h3>
<hr />

<h4 id="section-1">1. 自定义函数</h4>
<hr />

<p>自定义一个函数<code>se_kmeans</code>，使用这个函数可以通过输入需要聚类的数据集以及类别数目k，即可得到每一个样品的类别以及各个类别的中心。该函数使用欧式距离作为相似性的度量（当然还有很多其它方式，之后的聚类分析中会讲到），具体的程序可以在<a href="http://jackycode.github.io/datascience">我的项目</a>中找到，也可以直接到我的<a href="https://github.com/JackyCode/Data_Science">github</a>中查看源代码。这边给出测试代码以及结果：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="r"><span class="line">x1 <span class="o">&lt;-</span> matrix<span class="p">(</span>rnorm<span class="p">(</span><span class="m">500</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="m">0.5</span><span class="p">),</span> <span class="m">100</span><span class="p">,</span> <span class="m">5</span><span class="p">)</span>
</span><span class="line">x2 <span class="o">&lt;-</span> matrix<span class="p">(</span>rnorm<span class="p">(</span><span class="m">500</span><span class="p">,</span> <span class="m">2</span><span class="p">,</span> <span class="m">0.5</span><span class="p">),</span> <span class="m">100</span><span class="p">,</span> <span class="m">5</span><span class="p">)</span>
</span><span class="line">x <span class="o">&lt;-</span> rbind<span class="p">(</span>x1<span class="p">,</span> x2<span class="p">)</span>
</span><span class="line">
</span><span class="line">clusters <span class="o">&lt;-</span> se_kmeans<span class="p">(</span>x<span class="p">,</span> <span class="m">2</span><span class="p">)</span>
</span><span class="line">clusters
</span><span class="line">plot<span class="p">(</span>x<span class="p">,</span> col<span class="o">=</span>clusters<span class="o">$</span>cluster<span class="p">,</span> pch<span class="o">=</span>as.character<span class="p">(</span>clusters<span class="o">$</span>cluster<span class="p">),</span> cex<span class="o">=</span><span class="m">0.5</span><span class="p">)</span>
</span><span class="line">points<span class="p">(</span>clusters<span class="o">$</span>center<span class="p">,</span> col<span class="o">=</span><span class="s">&#39;green&#39;</span><span class="p">,</span> pch<span class="o">=</span><span class="s">&#39;o&#39;</span><span class="p">,</span> cex <span class="o">=</span> <span class="m">2</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>得到如下的一张图</p>

<p><img src="\images\a24\kmeans1.jpg" alt="kmeans1" /></p>

<p>可以看到，分类效果是很好的。</p>

<h4 id="kmeans">2. 使用<code>kmeans</code>函数</h4>
<hr />

<p>可以使用<code>stats</code>包中的<code>kmeans</code>函数来实现，示例如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="r"><span class="line">x1 <span class="o">&lt;-</span> matrix<span class="p">(</span>rnorm<span class="p">(</span><span class="m">500</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="m">0.5</span><span class="p">),</span> <span class="m">100</span><span class="p">,</span> <span class="m">5</span><span class="p">)</span>
</span><span class="line">x2 <span class="o">&lt;-</span> matrix<span class="p">(</span>rnorm<span class="p">(</span><span class="m">500</span><span class="p">,</span> <span class="m">2</span><span class="p">,</span> <span class="m">0.5</span><span class="p">),</span> <span class="m">100</span><span class="p">,</span> <span class="m">5</span><span class="p">)</span>
</span><span class="line">x <span class="o">&lt;-</span> rbind<span class="p">(</span>x1<span class="p">,</span> x2<span class="p">)</span>
</span><span class="line">
</span><span class="line">clusters <span class="o">&lt;-</span> kmeans<span class="p">(</span>x<span class="p">,</span> <span class="m">2</span><span class="p">)</span>
</span><span class="line">clusters
</span><span class="line">plot<span class="p">(</span>x<span class="p">,</span> col<span class="o">=</span>clusters<span class="o">$</span>cluster<span class="p">,</span> pch<span class="o">=</span>as.character<span class="p">(</span>clusters<span class="o">$</span>cluster<span class="p">),</span> cex<span class="o">=</span><span class="m">0.5</span><span class="p">)</span>
</span><span class="line">points<span class="p">(</span>clusters<span class="o">$</span>centers<span class="p">,</span> col<span class="o">=</span><span class="s">&#39;green&#39;</span><span class="p">,</span> pch<span class="o">=</span><span class="s">&#39;o&#39;</span><span class="p">,</span> cex <span class="o">=</span> <span class="m">2</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>得到这样一张图</p>

<p><img src="\images\a24\kmeans2.jpg" alt="kmeans2" /></p>

<p>从图中可以看出，kmeans的分类效果还是蛮不错的，当然我们可以计算一下误判，不过这显然是很小的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[数据科学之机器学习8: 决策树之ID3]]></title>
    <link href="http://jackycode.github.io/blog/2014/04/14/id3/"/>
    <updated>2014-04-14T16:02:45+08:00</updated>
    <id>http://jackycode.github.io/blog/2014/04/14/id3</id>
    <content type="html"><![CDATA[<p><img src="http://jackycode.github.io/images/artical/artical23.jpg" alt="artical 23" />
<!-- more --></p>

<p><em>“文章原创，转载请注明出处”</em></p>

<hr />

<p>ID3算法的核心问题就在于：如何选取在决策树的每个节点处要测试的属性。那么如何去选择呢？当然，我们要选取<strong>分类能力最好的属性</strong>，那么怎么去确定哪个属性是分类能力最好的呢？ID3算法中，使用<strong>信息增益</strong>作为评判标准。在看信息增益之前，我们先看看这个决策树的构造过程：</p>

<h3 id="section">一、构造过程</h3>
<hr />

<ol>
  <li>选取<strong>分类能力最好的属性</strong>作为决策树根部节点的测试；</li>
  <li>为根节点属性的每一个可能值产生一个分支；</li>
  <li>以各个分支节点为根节点，重复上述过程。</li>
</ol>

<h3 id="section-1">二、信息增益</h3>
<hr />

<h4 id="section-2">1. 熵</h4>
<hr />

<p>在看信息增益之前，首先需要介绍一个概念，那就是<strong>香农熵</strong>，简称为<strong>熵</strong>。相信学过物理的应该大都听过这个名词，在热力学中不就有个熵增原理嘛。其实，<strong>熵是信息论中广泛使用的一个度量标准，刻画了任意样例集合的纯度。</strong></p>

<p><strong>熵是信息的期望值</strong>，所以可以用熵来刻画一个数据集的纯度。若用$x_i,i=1,2,\dots,n$来表示数据集所包含的属性，那么这个数据集的熵为：</p>

<script type="math/tex; mode=display"> H = - \sum_{i=1}^{n}{p(x_i)l(x_i)} </script>

<p>其中，$p(x_i)$表示选取$x_i$作为分类的最终类别的概率；$l(x_i)$为$x_i$的信息，定义为：<script type="math/tex"> l(x_i) = - \log_2p(x_i)</script>。</p>

<h4 id="section-3">2. 信息增益</h4>
<hr />

<p>有了熵之后就可以刻画一个数据集的纯度，也就是熵值。那么什么信息增益呢？</p>

<p>简单来说，<strong>一个属性的信息增益就是：使用这个属性分割样例集合而导致的熵值降低</strong>。那么要选取分类能力最好的属性，就是要选取使得信息增益最大的那个属性。</p>

<p>一个属性A对样例集合S的信息增益定义为：</p>

<script type="math/tex; mode=display"> Gain(S, A) = H(S) - \sum_{v \in A} { \frac{\# S_v}{\# S} H(S_v) } </script>

<p>其中，<script type="math/tex">S_v</script>表示集合S中，属性A取值为$v$的那部分数据；<script type="math/tex">\# S_v</script>表示，集合S中，属性A取值为$v$的个数；<script type="math/tex">\# S</script>表示集合S中观测的个数。</p>

<h4 id="section-4">3. 简单的例子</h4>
<hr />

<table>
  <thead>
    <tr>
      <th style="text-align: center">序号</th>
      <th style="text-align: center">age</th>
      <th style="text-align: center">income</th>
      <th style="text-align: center">buy_iphone</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">1</td>
      <td style="text-align: center">senior</td>
      <td style="text-align: center">high</td>
      <td style="text-align: center">yes</td>
    </tr>
    <tr>
      <td style="text-align: center">2</td>
      <td style="text-align: center">senior</td>
      <td style="text-align: center">low</td>
      <td style="text-align: center">no</td>
    </tr>
    <tr>
      <td style="text-align: center">3</td>
      <td style="text-align: center">youth</td>
      <td style="text-align: center">high</td>
      <td style="text-align: center">yes</td>
    </tr>
    <tr>
      <td style="text-align: center">4</td>
      <td style="text-align: center">youth</td>
      <td style="text-align: center">low</td>
      <td style="text-align: center">no</td>
    </tr>
    <tr>
      <td style="text-align: center">5</td>
      <td style="text-align: center">senior</td>
      <td style="text-align: center">high</td>
      <td style="text-align: center">yes</td>
    </tr>
    <tr>
      <td style="text-align: center">6</td>
      <td style="text-align: center">youth</td>
      <td style="text-align: center">high</td>
      <td style="text-align: center">yes</td>
    </tr>
    <tr>
      <td style="text-align: center">7</td>
      <td style="text-align: center">senior</td>
      <td style="text-align: center">high</td>
      <td style="text-align: center">no</td>
    </tr>
  </tbody>
</table>

<p>考虑上面这个问题，我们来计算一下各个属性的信息增益。</p>

<p>首先，我们可以看到，这个数据集S最终分类buy_iphone有两种取值：$yes,no$。则数据集S的熵值为：</p>

<script type="math/tex; mode=display"> H(S) = -\frac{4}{7} \log_2{\frac{4}{7} } - \frac{3}{7} \log_2{\frac{3}{7} }  \approx 0.985</script>

<p>若按照age分类，age有两个属性：$senior, youth$，分别有4个和3个。age = senior时，yes有2个，no有2个则有：</p>

<script type="math/tex; mode=display"> H_{age}(S_{senior}) = -\frac{2}{4} \log_2{\frac{2}{4}} - \frac{2}{4} \log_2{\frac{2}{4}} \approx 1 </script>

<script type="math/tex; mode=display"> H_{age}(S_{youth}) = -\frac{2}{3} \log_2 {\frac{2}{3}} - \frac{1}{3} \log_2 {\frac{1}{3}} \approx 0.918 </script>

<p>则有：</p>

<script type="math/tex; mode=display"> H_{age}(S) = \frac{4}{7} \times 1 + \frac{3}{7} \times 0.918 = 0.965 </script>

<p>则age属性的信息增益为：</p>

<script type="math/tex; mode=display"> H(S) - H_{age}(S) = 0.985 - 0.965 = 0.020 </script>

<p>那么属性income的信息增益怎么去计算，可以动手试试。</p>

<h3 id="id3">三、ID3算法的伪代码</h3>
<hr />

<h5 id="section-5">定义：</h5>
<ul>
  <li>data：为训练样本集</li>
  <li>label：为目标属性 （比如例子中的属性buy_iphone）</li>
  <li>attrs：出目标属性外，供算法学习测试使用的其它属性 （比如例子中的age和income属性）</li>
</ul>

<h5 id="section-6">伪代码：</h5>
<p>ID3(data, label, attrs)：</p>

<ol>
  <li>创建决策树的Root节点；</li>
  <li>若lable中取值单一，则返回 <code>label=label</code> 的单节点树；</li>
  <li>若attrs为空，则返回 <code>label=（data中取值最多的那个label）</code> 的单节点树；</li>
  <li>否则：
    <ol>
      <li>选取attrs中分类能力最好的属性作为Root的决策属性，记为A；</li>
      <li>对A的每一个可能取值vi：
        <ol>
          <li>在Root添加一个分支对应 <code>A = vi </code>；</li>
          <li>data_vi = data中 <code>A = vi</code> 的子集，label_vi 表示 data_vi 所对应的目标属性取值；</li>
          <li>若 data_vi 为空集：
            <ol>
              <li>在新分支下加一个叶子节点，节点 <code>label =（data中取值最多的那个label）</code> ;</li>
              <li>否则，加一个子树：ID3(data_vi, label_vi, attrs);</li>
            </ol>
          </li>
        </ol>
      </li>
    </ol>
  </li>
  <li>结束</li>
  <li>返回Root</li>
</ol>

<h3 id="r">四、R语言实现</h3>
<hr />

<p>见<a href="http://jackycode.github.io/datascience">我的项目</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[打折的Apps]]></title>
    <link href="http://jackycode.github.io/blog/2014/04/11/apps-at-a-discount/"/>
    <updated>2014-04-11T19:32:31+08:00</updated>
    <id>http://jackycode.github.io/blog/2014/04/11/apps-at-a-discount</id>
    <content type="html"><![CDATA[<p><img src="http://jackycode.github.io/images/artical/artical22.jpg" alt="artical 22" />
<!-- more --></p>

<p><em>“文章原创，转载请注明出处”</em></p>

<hr />

<p>这两天，很多Mac和iPhone上的Apps都在打折，比如出名的Day one、1Password等等。</p>

<p>在StackSoical上面也介绍了一些，链接如下：<a href="https://stacksocial.com/ios_bundle?utm_source=ssnetwork&amp;utm_medium=hellobar&amp;utm_campaign=iosbundle">链接</a></p>

<p><img src="http://jackycode.github.io/images/a22/stack.jpg" alt="stack" /></p>

<p>StackSoical上没有介绍的，就是打折的<a href="https://agilebits.com/store">1Password</a></p>

<p><img src="http://jackycode.github.io/images/a22/1pass.jpg" alt="1pass" /></p>

<p>这些打折的应用，都可以直接在App Store购买。我暂时不知道打折持续的时间有多少，也不知道打折的原因。没关系啦，这个打折总归是我们这些消费者福音，像1Password这样贵的应用，如果需要的，抓紧时间购买吧！！！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[数据科学之机器学习7: 决策树]]></title>
    <link href="http://jackycode.github.io/blog/2014/04/11/decision-trees/"/>
    <updated>2014-04-11T19:00:32+08:00</updated>
    <id>http://jackycode.github.io/blog/2014/04/11/decision-trees</id>
    <content type="html"><![CDATA[<p><img src="http://jackycode.github.io/images/artical/artical21.jpg" alt="artical 21" />
<!-- more --></p>

<p><em>“文章原创，转载请注明出处”</em></p>

<hr />

<h3 id="section">一、开始</h3>
<hr />

<p>在介绍决策树的概念内容之前，先来初步了解一下决策树的流程。这是一个很简单的概念，通过一张简单的流程图就可以大致了解决策树是干什么的，怎么干的。</p>

<p><img src="\images\a21\decisiontrees.jpg" alt="decision trees" /></p>

<h3 id="section-1">二、相关概念</h3>
<hr />

<h4 id="section-2">1. 一些概念</h4>
<hr />

<ul>
  <li>决策树学习是一种逼近离散值目标函数的方法。</li>
  <li>决策树通过把实例从根节点排列到某个叶子节点来分类实例，叶子的节点即为实例所属的分类。</li>
  <li>决策树上的每一个节点，指定了对实例的某一个属性的测试，并且，该节点的每一个后续分支对应该属性的一个可能值。</li>
</ul>

<h4 id="section-3">2. 分类方法</h4>
<hr />
<p>从树的根节点开始，测试这个节点指定的属性，然后按照给定实例的该属性值对应的分支向下移动。然后以新节点作为根节点重复上面的过程直至结束。</p>

<h3 id="section-4">三、 评价</h3>
<hr />

<p>通过决策树的流程，可以发现决策树的计算复杂度不高，而且其输出的结果易于理解，并且对缺失值不敏感。</p>

<p>但是，正是由于其划分过于细致，可能会导致过度匹配问题(与回归中的overfitting类似)。</p>

<h3 id="section-5">四、主要的决策树算法</h3>
<hr />

<p>从决策树的流程可以看出，<strong>如何选择属性作为节点以测试实例</strong>是最为关键的一步。不同的算法采取了不同的方法，主要的决策树算法有这样几个：</p>

<ul>
  <li>ID3</li>
  <li>C4.5 （数据挖掘十大算法之一，也是ID3算法的改进）</li>
  <li>C5.0 （C4.5的改进，适用于处理大数据集，采用Boosting方式提高模型准确率，因而又称BoostingTrees。）</li>
  <li>CART（数据挖掘十大算法之一）</li>
</ul>

<p>下一篇就开始讲讲一些决策树的算法。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[数据科学之机器学习6: 分类之朴素贝叶斯]]></title>
    <link href="http://jackycode.github.io/blog/2014/04/08/naive-bayes/"/>
    <updated>2014-04-08T15:54:37+08:00</updated>
    <id>http://jackycode.github.io/blog/2014/04/08/naive-bayes</id>
    <content type="html"><![CDATA[<p><img src="http://jackycode.github.io/images/artical/artical20.jpg" alt="artical 20" />
<!-- more --></p>

<p><em>“文章原创，转载请注明出处”</em></p>

<hr />

<h3 id="knn">0、kNN算法的优缺点</h3>
<p>与kNN算法一样，朴素贝叶斯算法也是数据挖掘十大算法之一。我们介绍kNN算法时，并没有讨论kNN算法的优缺点，这边首先看看这个问题。</p>

<p>从构造kNN算法的过程可以看到，这个分类算法的<strong>精度很高</strong>。因为这个算法计算了所有点与待分类点之间的相似度，然后去确定带分类点的类别。由此可见，这个算法对<strong>异常值并不敏感</strong>。但是正是因为它需要计算所有点之间的距离，所以其<strong>复杂度是很高的</strong>，换句话就是，如果数据量大的话，这个算法会很费时，并不高效。</p>

<h3 id="section">一、贝叶斯决策</h3>
<hr />

<p>贝叶斯定理给出了条件概率之间的关系，是一个非常重要的定理。这里直接给出贝叶斯定理的结论：</p>

<script type="math/tex; mode=display"> P(B  \mid A) = \frac{P(A \mid B)P(B) }{P(A)} </script>

<p>在贝叶斯决策理论里面，要判断点$x$是否属于$C_i$类，只要验证是否存在：</p>

<script type="math/tex; mode=display"> p(C_i \mid x) = \max_{j} \{ P(C_j \mid x) \} </script>

<p>即是，使得$p(C_i \mid x)$达到最大的那个$C_i$就是$x$所属的类别。</p>

<h3 id="section-1">二、具体流程</h3>
<hr />

<p>要计算<script type="math/tex">P(C_i \mid x)</script>，那么就需要计算<script type="math/tex">\frac{P(x \mid C_i)P(C_i )}{P(x)}</script>，我们知道对于每一个<script type="math/tex">P(C_i \mid x)</script>，其计算公式中的分母都是<script type="math/tex">P(x)</script>，所以有：</p>

<script type="math/tex; mode=display"> P(C_i \mid x) \propto P(x \mid C_i)P(C_i ) </script>

<p>所以我们实际计算时，只需要考虑上式右侧的大小即可。首先我们来确定一些符号的意思：</p>

<ul>
  <li><script type="math/tex">x = [x_1, x_2, \dots, x_p]</script>为一个带分类的项，$x_i$为其特征；</li>
  <li>data表示一个已知分类的数据集($n \times p$的矩阵)，其每一行代表一个观测，每一列代表一个特征；</li>
  <li>label表示data中每一个数据对应的类别标签($ n \times 1$的矩阵)，比如data的第一行观测的类别就是label中的第一个取值；</li>
  <li><script type="math/tex">C = [ C_1, C_2, \dots, C_m ]</script>为一个类别集合，一般来说$ m &lt; p $。</li>
</ul>

<h5 id="section-2">步骤：</h5>

<ol>
  <li>
    <p>在已知分类的数据集data中统计：</p>

<script type="math/tex; mode=display">P(C_i), i = 1, 2, \dots, m</script>

<script type="math/tex; mode=display">P(x_j \mid C_i), i = 1, 2, \dots, m; j = 1, 2, \dots p</script>
  </li>
  <li>
    <p>计算</p>

<script type="math/tex; mode=display">P(x \mid C_i)P(C_i ) = P(C_i) \prod_{j=1}^{p} {P(x_j \mid C_i)}, i = 1, 2, \dots, m</script>
  </li>
  <li>
    <p>若</p>

<script type="math/tex; mode=display">P(x \mid C_k)P(C_k) = \max\{ P(x \mid C_i)P(C_i ) \}</script>

    <p>则<script type="math/tex"> x \in C_k</script>。</p>
  </li>
</ol>

<h3 id="section-3">三、一些存在的问题</h3>
<hr />

<ol>
  <li>当步骤的第2步中，<script type="math/tex">P(x \mid C_i)P(C_i ) = P(C_i) \prod_{j=1}^{p} {P(x_j \mid C_i)}, i = 1, 2, \dots, m</script>，中<script type="math/tex">P(x_j \mid C_i)</script>可能在样本较小时取值出现0，那么就会影响乘积；</li>
  <li>计算机计算时会出现精度问题，比如，如果<script type="math/tex">P(x_j \mid C_i)</script>的值有很多都是非常小的（像0.000001），那么计算机在计算是会将其四舍五入成0。</li>
</ol>

<p>出现上面的情况应该怎么办呢？</p>

<p>学数学的应该都清楚，遇到这种问题有一个很简单的处理方式，那就是取个对数。虽说取对数后会改变值的大小，但是取对数不会改变原本数据趋势，即原来大的数，取对数后还是大的。</p>

<p>此外，对于<script type="math/tex">P(x_j \mid C_i)</script>可能在样本较小时取值出现0的情况，处理也很简单，那就是将每一个$x_j$的初值都设置成1，所有特征的基数都从1开始，不会影响结果。（这时需要注意，所有特征的初值都是1，对应的总数初值也会发生变化。）</p>

<h3 id="r">四、R语言实现</h3>
<hr />

<p>见<a href="http://jackycode.github.io/datascience">我的项目</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[数据科学之机器学习5：分类之k-近邻算法]]></title>
    <link href="http://jackycode.github.io/blog/2014/04/05/knn/"/>
    <updated>2014-04-05T19:59:29+08:00</updated>
    <id>http://jackycode.github.io/blog/2014/04/05/knn</id>
    <content type="html"><![CDATA[<p><img src="http://jackycode.github.io/images/artical/artical19.jpg" alt="artical 19" />
<!-- more --></p>

<p><em>“文章原创，转载请注明出处”</em></p>

<hr />

<h4 id="section">基本思想</h4>
<hr />

<p>kNN，k-Nearest Neighbor algorithm，也就这边的k-近邻算法，是数据挖掘十大算法之一，是一个比较简单的分类方法。</p>

<p>其基本的思想是：对于一个输入样本（未知分类的样本），考虑其与测试样本中与之距离最近（特征最相似）的k个样本，用这k个样本中出现最多的分类作为输入样本的分类。</p>

<h4 id="section-1">具体流程</h4>
<hr />

<p>对于输入样本中的每一个点，进行以下操作：</p>

<ol>
  <li>计算点与测试样本中点的距离；</li>
  <li>取出与当前点距离最小的k个点；</li>
  <li>确定k个点的分类，计算各个分类的频数；</li>
  <li>返回频数最高的类别，作为该输入点的预测分类。</li>
</ol>

<h4 id="section-2">距离的计算</h4>
<hr />

<p>上面一直在说，计算输入样本中点与测试样本中点之间的距离，那么这个距离应该怎么计算呢？这个距离一般就是使用欧式距离：</p>

<script type="math/tex; mode=display"> d = \sqrt{(x - y)^T(x - y)} </script>

<p>其中<script type="math/tex">x^T=[x_1, x_2,\dots,x_n], y^T=[y_1,y_2,\dots,y_n]</script>。二维的表示就是：</p>

<script type="math/tex; mode=display"> d = \sqrt{(x - y)^T(x - y)} = \sqrt{(x_1 - y_1)^2 + (x_2 - y_2)^2} </script>

<h4 id="r">R语言实现</h4>
<hr />

<p>见<a href="https://github.com/JackyCode/Data_Science/tree/master/kNN">我的github</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[数据科学之机器学习4：线性回归3]]></title>
    <link href="http://jackycode.github.io/blog/2014/04/02/linear-regression3/"/>
    <updated>2014-04-02T18:51:29+08:00</updated>
    <id>http://jackycode.github.io/blog/2014/04/02/linear-regression3</id>
    <content type="html"><![CDATA[<p><img src="http://jackycode.github.io/images/artical/artical18.jpg" alt="artical 18" />
<!-- more --></p>

<p><em>“文章原创，转载请注明出处”</em></p>

<hr />

<p>这是介绍线性回归的最后一篇，首先回顾一下之前的两篇。第一篇主要就是介绍了如何去估计回归系数得到回归方程，以及在R语言中如何使用自带的函数去实现。第二篇主要介绍了对于回归方程和回归系数的显著性检验，以及给出了我自己写的一个处理线性回归的函数。</p>

<p>这一篇介绍线性回归中回归诊断的一些问题，也就是估计出回归方程，检验了回归方程的显著性以及回归系数的显著性后，对这个模型所做的进一步的诊断分析。然后对存在的问题进行探讨，选择不同的方式去解决这些问题。这大致可以分成三块：残差分析，影响分析以及共线性问题。</p>

<hr />

<h4 id="section">一、残差分析</h4>

<hr />

<h5 id="section-1">1. 残差</h5>

<hr />

<p>首先看一看残差的定义，常用的残差大致有三种：残差，标准化残差以及学生化残差：</p>

<ul>
  <li>残差：<script type="math/tex">\hat{\varepsilon} = y - \hat{y} = (1-H)y</script>,其中<script type="math/tex">H=X(X^TX)^{-1}X</script>称作帽子矩阵；</li>
  <li>标准化残差：<script type="math/tex">ZRE = \hat{\varepsilon} / \hat{\sigma}</script></li>
  <li>学生化残差：<script type="math/tex">SRE_i = \hat{\varepsilon}_i / (\hat{\sigma}\sqrt{1-h_{ii}})</script>，其中<script type="math/tex">h_{ii}</script>为帽子矩阵对角线上第$i$个元素。</li>
</ul>

<hr />

<p><strong>R语言中</strong></p>

<p>使用<code>residuals(),rstandard(),rstudent()</code>函数计算残差，标准化残差以及学生化残差。具体用法，请使用<code>help</code>函数查看。</p>

<hr />

<h5 id="section-2">2. 残差图</h5>

<hr />

<p>以残差为纵坐标，观测值、预测值活则观测时间等等作为横坐标的散点图，称为<strong>残差图</strong>。</p>

<hr />

<p><strong>R语言中</strong></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="r"><span class="line">model <span class="o">=</span> lm<span class="p">(</span>y<span class="o">~</span>x1<span class="o">+</span>x2<span class="p">)</span>
</span><span class="line">y_pred <span class="o">=</span> predict<span class="p">(</span>model<span class="p">)</span>
</span><span class="line">y_res <span class="o">=</span> residuals<span class="p">(</span>model<span class="p">)</span>
</span><span class="line">plot<span class="p">(</span>y_res <span class="o">~</span> y_pred<span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<hr />

<h5 id="section-3">3. 异方差问题</h5>

<hr />

<h6 id="a-">a. 问题的提出</h6>

<hr />

<p>在进行回归方程估计之前，一般都会假设误差的方差是齐性的。如果残差图出现类似下面的情况，则这批数据可能存在异方差问题，即方差非齐性。</p>

<ol>
  <li>随着横坐标的增大，纵坐标的值波动越来越大；</li>
  <li>随着横坐标的增大，纵坐标的值波动越来越小；</li>
  <li>随着横坐标的增大，纵坐标的值波动复杂多变，没有系统关系；</li>
</ol>

<p>大部分时候，考虑前两种就可以了。那么具体如何数值化地检验异方差呢，一般使用的是等级相关系数法，这里不做介绍(可到线性回归的书籍中寻找)。</p>

<hr />

<h6 id="b-">b. 问题的解决</h6>

<hr />

<p>一般有两种方式解决异方差问题，一种是加权最小二乘；另一种是对因变量作适当的变化。</p>

<ol>
  <li>
    <p>加权最小二乘</p>

    <p>即是将回归系数的估计转化成：<script type="math/tex">\hat{\beta}=(X^TWX)^{-1}X^TWy</script>，其中<script type="math/tex">W</script>是一个对角矩阵，用于给每一个数据点加上一个权重。一般使用“核”来对附近的点赋予较高的权重，常用的核就是高斯核，其对应的权重为：</p>

<script type="math/tex; mode=display">w_{ii}=exp(\frac{\|x^{(i)}-x\|}{-2k^2})</script>

    <p>从上式可以看出，点$x$离$x^{(i)}$越近，所得到的权重越高。</p>
  </li>
  <li>
    <p>对因变量作适当变化</p>

    <p>常用的变换有：</p>

    <ul>
      <li>$z = \sqrt{y}$</li>
      <li>$z = ln(y)$（对数变换）</li>
      <li>$z = 1/y$</li>
      <li>$z = \frac{x^{\lambda}-1}{\lambda}$(Box-Cox变换)，其中$\lambda=0$时，即是对数变换</li>
    </ul>
  </li>
</ol>

<hr />

<h5 id="section-4">4. 异常点</h5>

<hr />

<h6 id="a--1">a. 问题的提出</h6>

<hr />

<p>一般将标准化残差的绝对值大于等于2的称为可疑点；将标准化残差的绝对值大于等于3的称为异常点。</p>

<hr />

<h6 id="b--1">b. 问题的解决</h6>

<hr />

<p>一般来说，剔除异常数据即可。</p>

<hr />

<h5 id="section-5">5. 自相关问题</h5>

<hr />

<p>在作回归之前，总是会假设<script type="math/tex">cov(\varepsilon_i, \varepsilon_j)=0,\forall i \neq j</script>。但是实际情况下，可能并不满足这个假设，这就是存在了自相关问题。对于自相关问题，一般使用残差图，自相关系数以及DW检验去进行检验；而处理的方式一般是：迭代法和差分法。这里不做详细介绍，感兴趣的可以去找找相关材料。</p>

<hr />

<h4 id="section-6">二、影响分析</h4>

<hr />

<p>分析观测值对回归结果的影响，从而找出对回归结果影响较大的观测点的分析方法叫做影响分析。一般使用Cook距离去度量第$i$个观测值对回归影响大小，Cook距离的定义如下：</p>

<script type="math/tex; mode=display">D_i(M,MSE) = \frac{(\hat{\beta}_{(i)}-\hat{\beta})^TM(\hat{\beta}_{(i)}-\hat{\beta})}{MSE}</script>

<p>其中，$M$为观测数据的离差阵，$MSE$为回归模型的均方误差。一般<script type="math/tex">\|D_i\| \geqslant 4/n</script>时，称其为强影响点。</p>

<hr />

<p><strong>R语言中</strong></p>

<p>使用<code>cooks.distance()</code>函数计算Cook距离。</p>

<hr />

<h4 id="section-7">三、共线性诊断</h4>

<hr />

<p>共线性是指，在多元线性回归中，自变量之间存在线性关系或者近似线性关系。如果出现这种情况，那么在模型内部就会隐藏部分变量的显著性，也会导致参数估计的误差增大，影响模型的稳定性。</p>

<hr />

<h5 id="a--2">a. 检验方法</h5>

<hr />

<p>常用的检验方法有特征值法，条件数和方差膨胀因子（VIF）。</p>

<hr />

<h6 id="section-8">特征值法</h6>

<hr />

<p>首先介绍一个结论：当矩阵$X^TX$至少有一个特征根为0时，$X$的列向量间必存在多重共线性。</p>

<p>即可证：$X^TX$有多少个特征根接近于零，设计阵$X$就有多少个多重共线性。</p>

<hr />

<p><strong>在R语言中</strong></p>

<p>可以使用<code>eigen()</code>函数去计算特征值和特征向量。</p>

<hr />

<h6 id="section-9">条件数</h6>

<hr />

<p>上述的特征值法中，特征根近似为0，这个标准好想并不明确。那么这边就给出一个条件数的定义：</p>

<script type="math/tex; mode=display">k_i = \frac{\lambda_m}{\lambda_i}</script>

<p>其中，<script type="math/tex">\lambda_m</script>为最大的那个特征根。一般认为，若$k_i$介于10到30之间为弱相关；在30到100之间为中等相关；超过100为强相关。</p>

<hr />

<p><strong>在R语言中</strong></p>

<p>可以使用<code>kappa()</code>函数计算条件数。</p>

<hr />

<h6 id="vif">VIF</h6>

<hr />

<p>定义VIF为：</p>

<script type="math/tex; mode=display">VIF_i = \frac{\text{第i个回归系数的方差}}{\text{自变量不相关时第i个回归系数的方差}} = \frac{1}{1-R^2_i} = \frac{1}{TOL_i}</script>

<p>其中$TOL_i$称为容忍度；$R^2_i$为自变量$x_i$对其余自变量的复决定系数。一般认为，VIF超过10，模型就存在共线性问题。</p>

<hr />

<p><strong>在R语言中</strong></p>

<p>可以使用<code>vif()</code>函数计算VIF的值。</p>

<hr />

<h5 id="b--2">b. 多重共线性的处理</h5>

<hr />

<p>一般有这样几种处理方式：</p>

<ol>
  <li>
    <p>剔除一些不重要的解释变量</p>

    <ol>
      <li>使用变量选择的方式剔除部分变量，作回归；</li>
      <li>检验VIF，若存在共线性，删除VIF值最大的变量，作回归；</li>
      <li>再次检验VIF，若还存在共线性，再删除其中VIF值最大的那个；</li>
      <li>重复直至消除共线性。</li>
    </ol>
  </li>
  <li>
    <p>增大样本容量</p>

    <p>当变量的个数接近样本容量的数值时，自变量间容易产生多重共线性。所以增大样本容量是解决多重共线性的一种方式，但是在现实中，这种做法基本不可能。</p>
  </li>
  <li>
    <p>主成分回归</p>

    <p>这是一个比较大的主题，这里不做介绍。</p>
  </li>
  <li>
    <p>有偏估计等等。</p>
  </li>
</ol>

<hr />

<h3 id="section-10">最后</h3>

<hr />

<p>到这里，除了变量选择问题，线性回归的内容基本上就已经梳理了一遍。变量选择问题，方法简单的非常简单，难的非常难（像lasso），所以暂时还不想写这些内容。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[数据科学之机器学习3：线性回归2]]></title>
    <link href="http://jackycode.github.io/blog/2014/04/01/linear-regression2/"/>
    <updated>2014-04-01T16:56:57+08:00</updated>
    <id>http://jackycode.github.io/blog/2014/04/01/linear-regression2</id>
    <content type="html"><![CDATA[<p><img src="http://jackycode.github.io/images/artical/artical17.jpg" alt="artical 17" />
<!-- more --></p>

<p><em>“文章原创，转载请注明出处”</em></p>

<hr />

<p>上一篇简单介绍了线性回归中系数估计的问题，给出了一元以及多元情况下，系数估计值的表达式！此外，还给出了在R语言中如何使用自带的函数计算系数估计值。</p>

<p>这一篇，打算介绍一下线性回归中的一些显著性检验问题。这个就是完全属于统计学中的理论内容，不过依旧有着很强的实际意义。简单来说，显著性检验不能通过，说明你的线性回归的效果不好，可能你就需要选择其它的方式去处理你手头的数据，而不是选择线性回归了。</p>

<hr />

<h4 id="section">一、回归方程的显著性检验</h4>

<hr />

<p>考虑回归方程是否显著，意思就是查看自变量<script type="math/tex">x_1,x_2,\dots,x_p</script>从整体上是否对因变量<script type="math/tex">y</script>有显著的影响。则，我们可以考虑这样的假设检验问题：</p>

<script type="math/tex; mode=display"> H_0:\beta_0=\beta_1=\dots=\beta_p=0;~H_1:\beta_0,\beta_1,\dots,\beta_p\text{不全为0}</script>

<p>显然，如果原假设成立的话，自变量对因变量的影响不大，也就是用线性回归模型来解释就显得不合适了。</p>

<p>在正态假设下，原假设<script type="math/tex">H_0</script>成立时，有<script type="math/tex">F</script>检验统计量：</p>

<script type="math/tex; mode=display"> F = \frac{SSR/p}{SSE/(n-p-1)} \sim F(p,n-p-1) </script>

<p>其中<script type="math/tex">SSR=\sum_{i=1}^{n}{(\hat{y}_i-\overline{y})^2}</script>为回归平方和，<script type="math/tex">SSE=\sum_{i=1}^{n}{(y_i-\hat{y}_i)^2}</script>为残差平方和。对于给定的显著性水平$\alpha$，拒绝域为：<script type="math/tex">\{F \geqslant F_{1-\alpha}(p,n-p-1)\}</script>。</p>

<hr />

<h4 id="section-1">二、回归系数的显著性检验</h4>

<hr />

<p>显然，线性回归中很有可能就存在某个自变量对因变量的影响很小，那么它的回归系数就会接近0.因此有如下的假设检验问题：</p>

<script type="math/tex; mode=display">H_{0j}:\beta_j = 0; ~ H_{1j}:\beta_j \neq 0, ~ j=0,1,\dots,p</script>

<p>在原假设成立的条件下，$t$统计量有：</p>

<script type="math/tex; mode=display">t_j = \frac{\hat{\beta}_j}{\sqrt{c_{jj}}\hat{\sigma}} \sim t(n-p-1)</script>

<p>其中，<script type="math/tex">(c_{ij})=(X^TX)^{-1},i,j=0,1,\dots,p;~\hat{\sigma}=\sqrt{\frac{1}{n-p-1}\sum_{i=1}^{n}{(y_i-\hat{y}_i)^2}}</script>。对于给定的显著性水平$\alpha$，拒绝域为：<script type="math/tex">\{\|t_j\| \geqslant t_{\alpha/2}\}</script>。</p>

<hr />

<h4 id="r">三、R语言中的实现</h4>

<hr />

<p>在上一篇中可以看到，<code>lm</code>函数加上<code>summary</code>函数会有很多的输出内容。其实，那些输出中就含有上述的假设检验的结果，很容易就可以找到，这里不做阐述！</p>

<p>我自己也写了一个关于线性回归的R语言函数，托管在<a href="https://github.com/JackyCode/Data_Science/tree/master/Linear_Regression">我的github</a>上面，函数内部对于线性回归的过程大都涉及到了，有兴趣可以看看。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[数据科学之机器学习2：线性回归1]]></title>
    <link href="http://jackycode.github.io/blog/2014/03/30/machine-learning1/"/>
    <updated>2014-03-30T19:02:30+08:00</updated>
    <id>http://jackycode.github.io/blog/2014/03/30/machine-learning1</id>
    <content type="html"><![CDATA[<p><img src="http://jackycode.github.io/images/artical/artical16.jpg" alt="artical 16" />
<!-- more --></p>

<p><em>“文章原创，转载请注明出处”</em></p>

<hr />

<h4 id="section">一、回归分析</h4>

<hr />

<p>在统计分析中，最大的两支应该算是相关分析和回归分析。而回归分析应该是统计学的核心。回归分析，就是研究因变量$y$与自变量$x$之间的关系，存在条件数学期望：$f(x)=E(y|x)$。此时有：$y=f(x)+\varepsilon$，一般假设$\varepsilon \sim N(0,\sigma^2)$。</p>

<p>回归分析有很多变种：简单线性回归；多项式回归；Logistic回归；非参数回归；非线性回归等等。本篇就介绍最简单的线性回归，首先来看看一元线性回归。</p>

<hr />

<h4 id="section-1">二、一元线性回归</h4>

<hr />

<p>对于一元线性回归来说，$f(x)$就是线性的，则有：$f(x)=E(y|x)=\beta_0 + \beta_1 x$。通过已知的数据，可以估计出$\beta_0,\beta_1$的估计值：$\hat{\beta}_0,\hat{\beta}_1$。那么就有$y$的预测值：$\hat{y} = \hat{\beta}_0 + \hat{\beta}_1 x$。</p>

<hr />

<h5 id="beta0beta1hatbeta0hatbeta1">1. 如何计算$\beta_0,\beta_1$的估计值$\hat{\beta}_0,\hat{\beta}_1$呢？</h5>

<hr />

<p>定义离差平方和：</p>

<script type="math/tex; mode=display">Q(\beta_0,\beta_1) = \sum_{i=1}^{n}(y_i-f(x_i))^2</script>

<p>显然，我们希望$f(x_i)$的值与真实值$y_i$越接近越好。那么就是需要离差平方和越小越好。则得到目标：</p>

<script type="math/tex; mode=display"> \min_{\beta_0,\beta_1}{\sum_{i=1}^{n}(y_i-f(x_i))^2} </script>

<p>如何寻找$\hat{\beta}_0,\hat{\beta}_1$使得上面方程达到最小呢？这个就需要对其对$\hat{\beta}_0,\hat{\beta}_1$求偏导，得到：</p>

<script type="math/tex; mode=display">\frac{\partial Q}{\partial \beta_0}=-2\sum_{i=1}^{n}{(y_i-\beta_0-\beta_1x_i)}</script>

<script type="math/tex; mode=display">\frac{\partial Q}{\partial \beta_1}=-2\sum_{i=1}^{n}{(y_i-\beta_0-\beta_1x_i)x_i}</script>

<p>令上述两式都等于0，计算得到：</p>

<script type="math/tex; mode=display">\hat{\beta}_0=\overline{y}-\hat{\beta}_1\overline{x}</script>

<script type="math/tex; mode=display">\hat{\beta}_1=\frac{\sum_{i=1}^{n}{(x_i-\overline{x})(y_i-\overline{x})}}{\sum_{i=1}^{n}{(x-\overline{x})^2}}</script>

<p>这样就得到$\beta_0,\beta_1$的估计值$\hat{\beta}_0,\hat{\beta}_1$。这个方法就叫做OLS，即普通最小二乘(ordinary least squares)。</p>

<hr />

<h5 id="r">2. R语言实现</h5>

<hr />

<p>在R语言中有自带的函数可以处理线性回归，那就是<code>lm</code>函数。这里使用自带的数据<code>cars</code>做演示：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
</pre></td><td class="code"><pre><code class="r"><span class="line"><span class="o">&gt;</span> attach<span class="p">(</span>cars<span class="p">)</span> <span class="c1"># 使用数据集cars，与with函数类似</span>
</span><span class="line"><span class="o">&gt;</span> lingre <span class="o">&lt;-</span> lm<span class="p">(</span>dist <span class="o">~</span> speed<span class="p">)</span>
</span><span class="line"><span class="o">&gt;</span> summary<span class="p">(</span>lingre<span class="p">)</span>
</span><span class="line">
</span><span class="line">Call<span class="o">:</span>
</span><span class="line">lm<span class="p">(</span>formula <span class="o">=</span> dist <span class="o">~</span> speed<span class="p">)</span>
</span><span class="line">
</span><span class="line">Residuals<span class="o">:</span>
</span><span class="line">    Min      <span class="m">1</span>Q  Median      <span class="m">3</span>Q     Max
</span><span class="line"><span class="m">-29.069</span>  <span class="m">-9.525</span>  <span class="m">-2.272</span>   <span class="m">9.215</span>  <span class="m">43.201</span>
</span><span class="line">
</span><span class="line">Coefficients<span class="o">:</span>
</span><span class="line">            Estimate Std. Error t value Pr<span class="p">(</span><span class="o">&gt;|</span>t<span class="o">|</span><span class="p">)</span>
</span><span class="line"><span class="p">(</span>Intercept<span class="p">)</span> <span class="m">-17.5791</span>     <span class="m">6.7584</span>  <span class="m">-2.601</span>   <span class="m">0.0123</span> <span class="o">*</span>
</span><span class="line">speed         <span class="m">3.9324</span>     <span class="m">0.4155</span>   <span class="m">9.464</span> <span class="m">1.49e-12</span> <span class="o">***</span>
</span><span class="line"><span class="o">---</span>
</span><span class="line">Signif. codes<span class="o">:</span>  <span class="m">0</span> ‘<span class="o">***</span>’ <span class="m">0.001</span> ‘<span class="o">**</span>’ <span class="m">0.01</span> ‘<span class="o">*</span>’ <span class="m">0.05</span> ‘.’ <span class="m">0.1</span> ‘ ’ <span class="m">1</span>
</span><span class="line">
</span><span class="line">Residual standard error<span class="o">:</span> <span class="m">15.38</span> on <span class="m">48</span> degrees of freedom
</span><span class="line">Multiple R<span class="o">-</span>squared<span class="o">:</span>  <span class="m">0.6511</span><span class="p">,</span>	Adjusted R<span class="o">-</span>squared<span class="o">:</span>  <span class="m">0.6438</span>
</span><span class="line"><span class="k-Variable">F</span><span class="o">-</span>statistic<span class="o">:</span> <span class="m">89.57</span> on <span class="m">1</span> and <span class="m">48</span> DF<span class="p">,</span>  p<span class="o">-</span>value<span class="o">:</span> <span class="m">1.49e-12</span>
</span><span class="line">
</span><span class="line"><span class="o">&gt;</span> plot<span class="p">(</span>dist <span class="o">~</span> speed<span class="p">,</span> pch<span class="o">=</span><span class="m">4</span><span class="p">)</span> <span class="c1"># 画出散点图</span>
</span><span class="line"><span class="o">&gt;</span> abline<span class="p">(</span>lingre<span class="p">,</span> col<span class="o">=</span><span class="s">&#39;red&#39;</span><span class="p">)</span> <span class="c1"># 添加拟合直线</span>
</span><span class="line"><span class="o">&gt;</span> detach<span class="p">(</span>cars<span class="p">)</span> <span class="c1"># 使用完记得释放</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>从这里可以得到回归方程：$\hat{dist} = -17.5791 + 3.9324 \times speed$。（对于其它的结果是什么意思，可以去查看线性回归的相关书籍）</p>

<p>另外，得到拟合直线的图像：</p>

<p><img src="\images\a16\lingre_one.jpg" alt="lingre_one" /></p>

<hr />

<h4 id="section-2">三、多元线性回归</h4>

<hr />

<p>对于多元线性回归来说，其计算方式与一元线性回归类似，区别在于，多元的时候需要利用矩阵来处理。首先看一下回归模型：</p>

<script type="math/tex; mode=display"> y = \beta_0 + \beta_1 x_1 + \beta_2 x_2 + \dots + \beta_p x_p + \varepsilon </script>

<p>其中$p$代表自变量的个数。</p>

<p>若取$x^T_0=[1, 1, \dots, 1]_{1 \times n}$，则可将上述模型改写成：<script type="math/tex">y=X\beta+\varepsilon</script>。其中：</p>

<script type="math/tex; mode=display">y^T=[y_1,y_2,\dots,y_n], X=[x_0,x_1,\dots,x_p], \beta^T=[\beta_0,\beta_1,\dots,\beta_p], \varepsilon^T=[\varepsilon_1,\varepsilon_2,\dots,\varepsilon_n]</script>

<p>其中<script type="math/tex">x^T_i=[x_{1i},x_{2i},\dots,x_{ni}]</script>。</p>

<p>这样我们就可以将离差平方和<script type="math/tex">\sum_{i=1}^{n}{(y_i-\beta_0 + \beta_1 x_1 + \beta_2 x_2 + \dots + \beta_p x_p)^2}</script>写成矩阵形式：</p>

<script type="math/tex; mode=display">(y-X\beta)^T(y-X\beta)</script>

<p>求导可得：<script type="math/tex">-2X^T(y-X\beta)</script>(这里用到矩阵求导的知识，一般介绍<strong>线性模型</strong>的书籍中会讲到；当然也可以直接对上面不是矩阵形式的离差平和求导)。令其等于0，可得：</p>

<script type="math/tex; mode=display">\hat{\beta} = (X^TX)^{-1}X^Ty</script>

<hr />

<h5 id="r-1">R语言实现</h5>

<hr />

<p>对于R语言的实现，依旧使用<code>lm</code>函数：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="r"><span class="line">lingre_mul <span class="o">&lt;-</span> lm<span class="p">(</span>y <span class="o">~</span> x1 <span class="o">+</span> x2<span class="p">,</span> data<span class="o">=</span>datasets<span class="p">)</span>
</span><span class="line">summary<span class="p">(</span>lingre_mul<span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这里就不再用实际数据去演示了。</p>

<hr />

<h4 id="section-3">四、最后</h4>

<hr />

<p>至此，就把线性回归的基础内容介绍完了。但其实线性回归还存在很多其它的问题。比如说回归诊断（就是检查回归的效果），变量选择等等等等。感兴趣的话，可以找本讲线性回归的书看看，有很多！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[数据科学之机器学习1：简介]]></title>
    <link href="http://jackycode.github.io/blog/2014/03/30/data-science-an-introduction-to-machine-learning/"/>
    <updated>2014-03-30T16:39:09+08:00</updated>
    <id>http://jackycode.github.io/blog/2014/03/30/data-science-an-introduction-to-machine-learning</id>
    <content type="html"><![CDATA[<p><img src="http://jackycode.github.io/images/artical/artical15.jpg" alt="artical 15" />
<!-- more --></p>

<p><em>“文章原创，转载请注明出处”</em></p>

<hr />

<p>上一篇“<a href="http://jackycode.github.io/blog/2014/03/27/an-introduction-to-data-science/">数据科学简介</a>”简单地说了一下数据科学是什么，以及它包罗的东西。这一篇打算简单介绍一下<strong>机器学习</strong>，并理一理机器学习中涉及的内容。</p>

<hr />

<h4 id="section">机器学习的定义</h4>

<hr />

<p>一般来说，教科书介绍一样东西，首先会给它下一个确切的定义。不过，对于机器学习的定义，我还真不知道该怎么去下。有太多的版本，太多的述说方式，不知道用哪个好。这里就列举一些我觉得有代表性的，讲的容易懂的那些定义。对于机器学习是什么，看看这些定义，应该就能够有个大致的了解了。</p>

<p>首先，在“<a href="http://www.amazon.cn/Machine-Learning-The-Art-and-Science-of-Algorithms-That-Make-Sense-of-Data-Flach-Peter/dp/1107422221/ref=tmm_pap_title_0">Machine Learning: the art and science of algorithms that make sense of data</a>”一书中，有这样一个定义：</p>

<blockquote>
  <p>Machine Learning is the systematic study of algorithms and systems that improve their knowledge or performance with experience.</p>
</blockquote>

<p>这个定义说的比较简单直白，就是说，机器学习就是研究如何通过经验(其实就是数据)去改进性能的算法(这个翻译学得不好，见谅！)。我们可以简单这样理解，机器学习就是研究这么一类算法，通过这类算法呢，系统可以从数据中获取信息来提升自己的性能。最简单的说法就是将数据转换成有用的信息。</p>

<p>在“<a href="http://www.amazon.cn/Machine-Learning-The-Art-and-Science-of-Algorithms-That-Make-Sense-of-Data-Flach-Peter/dp/1107422221/ref=tmm_pap_title_0">Machine Learning: the art and science of algorithms that make sense of data</a>”书中，还有这么一句话，将机器学习的流程说的很清楚：</p>

<blockquote>
  <p>Machine learning is concerned with using the right features to build the right models that achieve the right task.</p>
</blockquote>

<p>这句话就是说，机器学习关心的就是：如何通过对特征(数据)建立模型去完成一些任务。在Andrew Ng的机器学习视频中，还列出了Tom Mitchell给出的定义，与上面的说法有些相近：</p>

<blockquote>
  <p>A computer program is said to learn from experience E with respect to some task T and some performance measure P, if its performance on T, as measured by P, improves with experience E.</p>
</blockquote>

<p><strong><em>上一篇博文里曾说，数据科学是统计、计算机科学以及专业知识的结合。而其实，机器学习就是统计与计算机科学的结合。正因如此，机器学习是数据科学的核心。</em></strong>简单来说，机器学习就是：研究让机器通过学习过去的经验，达到提高处理相同任务能力的算法。</p>

<hr />

<h4 id="section-1">机器学习的类别</h4>

<hr />

<p>机器学习大致可以分为两类：监督学习(supervised learning)和无监督学习(unsupervised learning)。</p>

<p>如何区分呢？<strong>区别就在于，测试数据有没有给出确切的类别或者结果。若给出了就是监督学习，若没有则是无监督学习</strong>。</p>

<p>比如说回归：其给定的测试样本中，一组自变量的值肯定对应一个确定的因变量的值；再说分类：对于给出的测试样本中的每一个数据，其都会有自己所属的类别。所以回归与分类就属于监督学习的范畴，也就是可以通过既定的数据去做预测。</p>

<p>而无监督学习不同，其给出的数据不存在任何其它信息，比方说聚类，给你一批数据，没有任何信息，让你把数据分成几个类别。一般来说，这时候就需要计算数据之间的相似度(距离)，然后把距离近的归位一类。</p>

<hr />

<h4 id="section-2">最后</h4>

<hr />

<p>到这里，基本上来说，机器学习是干什么的应该有了一些了解了。至于机器学习的分类，监督学习和无监督学习还不明白也不要紧。等弄明白了回归，分类以及聚类等等的是干什么的，自然就明白这两者之间的区别了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[数据科学简介]]></title>
    <link href="http://jackycode.github.io/blog/2014/03/27/an-introduction-to-data-science/"/>
    <updated>2014-03-27T14:39:21+08:00</updated>
    <id>http://jackycode.github.io/blog/2014/03/27/an-introduction-to-data-science</id>
    <content type="html"><![CDATA[<p><img src="http://jackycode.github.io/images/artical/artical14.jpg" alt="artical 14" />
<!-- more --></p>

<p><em>“文章原创，转载请注明出处”</em></p>

<hr />

<p>对于这两年渐渐兴起的大数据，云计算之类的技术，相信没有人会陌生。即便不知道这个东西是什么，但也是应该听得耳朵起茧子了。归结原因呢，出现这些技术实在是因为现在的数据越来越多，以前的很多数据分析技术越来越不合适。即便是简单的最小二乘线性回归，直接放到大数据上用，跑起来也是够累的。这时候，各种处理大数据的技术就纷纷崛起了，和之前的云计算相同的就是，大数据也改变了计算机原本的使用方式。</p>

<p>OK，说说数据科学吧。数据科学，Data Science，这个玩意儿最早有一本书，叫做“What is Data Science”，O’Reilly出版的（不得不说其出版了太多太牛太厉害的书籍材料，牛得不需要解释）。数据科学就像是一个综合体，包罗的东西非常多，大致有三个方面。</p>

<h5 id="section">第一，概率统计（数学）</h5>
<p>这个提供了大数据的很多理论基础。大数据的处理技术，需要用到非常之多的概率统计学知识。而要想学好概率统计，那你数学得先学学好才行。简单罗列一下：概率论基础，统计学基础，高等概率论，测度论，高等参数统计，随机过程等等等等。这些内容都是理论基础，要是理论学的不咋样，估计折腾大数据也就是玩玩工具，弄点儿结果出来。话说，如果真没学好理论，能不能把结果解释清楚还需要质疑，更何况自己去设计改进一个技术算法呢。</p>

<p>嗯，说到这，回过头去看看泛函分析吧~</p>

<h5 id="section-1">第二，计算机科学</h5>
<p>这个就提供了大数据处理的工具平台了。那么多的数据，你就是理论学得再牛，没有计算机，你自己手算试试！你说你要处理数据，OK，计算机提供了工具平台，那么你就得学习如何运用这些系统环境吧，那么就得学习<strong>分布式计算机系统环境</strong>，这个主流的有：Hadoop(鼎鼎大名吧); Spark(也听说过吧); Cassandra等等。</p>

<p>好了，环境搞明白了，下面你就得发号施令，让计算机去处理数据了。计算可不是人类，你可以跟他讲普通话，讲英文让他帮你干活。你要想它听你的，你得先学会点它能懂的、能听明白的话。OK，编程语言就降临了。一般来说，用于数据处理的语言有R，Python，Octave（与Matlab类似，只是这个开源免费），Matlab等等。为了使用各个平台，说不得你也得学点Java，C，C++。</p>

<p>写到这边，估计已经头大了，这么多东西，这数据科学是不是恐怖了点，谁能受得了啊！！！是的，包含的东西的确多了点，但是学习起来还是很好玩的，我保证(当然，前提你得跟我一样，看见数学不会头晕)！</p>

<p>当然除了上面提到的，数据科学包含的计算机知识还有很多，像数据结构啊，数据库啊，Mahout这样的架构啊等等。</p>

<h5 id="section-2">第三，专业</h5>
<p>这个也就是应用啦。练就了一身绝世内功（理论基础），找到了一把趁手的绝世神兵（计算机科学），现在需要决定的就是出山之后是想做个武林盟主呢，还是独创一个门派，也就是想把这些东西用到哪些地方去。像生物学，跟统计一结合就成了生物统计，要是再加上点计算机科学，那就成了生物学数据科学。OK，这么说应该是很明白的了。</p>

<hr />

<p>数据科学家Drew Conway绘制过一幅图，很好地描述了我上面所说的东西：</p>

<p><img src="http://jackycode.github.io/images/a14/drew-conway-data-science-venn-diagram.jpg" alt="Venn diagram" /></p>

<p>前几天图灵上出了一本书，叫做“<a href="http://www.ituring.com.cn/book/1268">Software Design 中文版 01</a>”。里面介绍了数据科学的很多基础内容，也给出了很多的学习材料，大部分都是网上的视频教程。此外书中还介绍了一些如何使用Excel，R以及Mahout这些工具的基础知识，有兴趣倒是可以入手一本，作为学习数据科学的开始。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[找回曾经的Kindle]]></title>
    <link href="http://jackycode.github.io/blog/2014/03/24/kindle/"/>
    <updated>2014-03-24T14:15:27+08:00</updated>
    <id>http://jackycode.github.io/blog/2014/03/24/kindle</id>
    <content type="html"><![CDATA[<p><img src="http://jackycode.github.io/images/artical/artical13.jpg" alt="artical 13" />
<!-- more --></p>

<p><em>“文章原创，转载请注明出处”</em></p>

<hr />

<h4 id="ipadkindle">iPad与Kindle</h4>
<hr />

<p>自从买了iPad之后，看书大都就在iPad上进行了。但是最近觉得吧，iPad看时间长点，眼睛会吃不消，所以今天早上就把我抽屉里的Kindle又拿了出来，倒腾了一下。以后还是拿这家伙看书吧，对眼睛来说，这个还是要好点的。</p>

<p>看惯了iPad那炫丽的屏幕，一下看Kindle觉得挺柔和、舒服以及不适应的。只是，好久没动Kindle，里面的东西着实乱了一点。无从下手，不知该如何收拾，所以就直接先卸载了多看系统，然后将Kindle恢复出厂设置了(好狠啊有木有)。重启之后，登录，然后将自己买的一些电子书推送进去，最终干净整齐在我控制之下的Kindle又回来：</p>

<p><img src="http://jackycode.github.io/images/a13/kindle.jpg" alt="kindle" /></p>

<p>说实话，Kindle看书的效果的确没有iPad爽。iPad那叫一个炫丽精致啊！！！不过，那个长时间看也太伤眼睛了一点。这次就决定，以后除了那些注重图片啊之类的书籍杂志，大部分的电子书还是用Kindle看比较好。</p>

<h4 id="kindle">多看与Kindle</h4>
<hr />

<p>这次卸载了多看系统就没打算再装，因为觉得现在Kindle对中文书籍的支持也蛮好的，没必要搞个多看系统了。更何况，<code>iduokan</code>推送服务有限制，好像超过20M就不行了。</p>

<p>只是多看里面有不少的书籍，不安装多看系统，在Kindle上有些是看不了了(除了图灵出的“码农”可以推送到Kindle)。不过想了一想，觉得也没什么。我大部分在多看上下载的书籍都是免费的，iPhone上看看就好了(个人觉得，iPhone上的多看阅读器体验最好)。那些买了觉得很好的书，我大都也买了纸质的，像<a href="http://macshuo.com/">Mac君</a>的<a href="http://www.amazon.cn/dp/B00ID5UV30">‘MacTalk：人生元编程’</a>等等。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Koding：免费VPS服务的初体验]]></title>
    <link href="http://jackycode.github.io/blog/2014/03/21/kodingrecommended/"/>
    <updated>2014-03-21T16:01:44+08:00</updated>
    <id>http://jackycode.github.io/blog/2014/03/21/kodingrecommended</id>
    <content type="html"><![CDATA[<p><img src="http://jackycode.github.io/images/artical/artical12.jpg" alt="aritical 12" />
<!-- more --></p>

<p><em>“文章原创，转载请注明出处”</em></p>

<hr />

<p>昨天晚上在浏览“<a href="http://ztl2004.github.io/MachineLearningWeekly/">机器学习周刊</a>”时，看到了一个提供免费vps服务的网站，免费的虚拟主机平台哎。那么在上面码代码呀干点什么的，不知道效果如何呢？所有抱着尝试的心态就去看了一看。</p>

<h3 id="section">一见惊喜</h3>

<hr />

<p><img src="http://jackycode.github.io/images/a12/1.jpg" alt="a12_1" /></p>

<p>看到这样的网页，顿时觉得~哇。。。高大上有木有。网页做的这么能吸引我的眼球，已经成功了一半了(对于勾引我的使用来说)。然后就开始注册吧，<a href="https://koding.com/R/jackycode">注册地址</a>。使用我给的注册地址，你跟我都会额外获得1G的空间。输好邮箱跟用户名之后，点击<code>Sign up</code>。很快就会收到一封邮件，点击其中的链接，然后设置自己的密码即可(<strong>注意，这个密码将会是你虚拟主机里终端的密码。</strong>)。</p>

<h3 id="section-1">外表</h3>

<hr />

<p>注册登录之后，大致是这个样子的，看起来还是蛮不错的！</p>

<p><img src="http://jackycode.github.io/images/a12/2.jpg" alt="a12_2" /></p>

<p>顶栏的buttons对应的功能分别是：Activity; Teamwork; Terminal; Ace(默认自带的编辑器); Apps(应用中心，现在应用不多，正在从旧版往新版里面转); DevTools(搞个Koding App？); Julia; Bracket。最后两个默认是没有的，是我自己安装的。</p>

<p>第一印象来说，界面比较干净清洁；功能划分也比较清楚。</p>

<h3 id="section-2">玩一下</h3>

<hr />

<p>外表过关了，那么接下来就看看玩起来到底给不给力。话说，Koding官方的介绍文档里面说，支持的功能很多，挑几个试试呗！(在顶栏上面有个<code>?</code>，可以点击查看帮助)</p>

<p>点击进入终端，界面看起来还不错哦：</p>

<p><img src="http://jackycode.github.io/images/a12/3.jpg" alt="a12_3" /></p>

<p>尝试输入一下这些命令：</p>

<p><img src="http://jackycode.github.io/images/a12/4.jpg" alt="a12_4" /></p>

<p>好吧，自带么有R语言。没关系，这不是基于Ubuntu系统的嘛，我自己装一个还不行~</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">sudo cp /etc/apt/sources.list /etc/apt/sourcesbackup.list
</span><span class="line">sudo vim /etc/apt/sources.list</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>然后在sources.list里面添加<code>deb http://cran.stat.ucla.edu/bin/linux/ubuntu quantal/</code>(建议使用国外的镜像，国内的龟速啊！！！)。OK，保存退出vim。输入命令：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">sudo apt-get update
</span><span class="line">sudo apt-get install r-base
</span><span class="line">sudo apt-get install r-base-dev</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>最后再看看：</p>

<p><img src="http://jackycode.github.io/images/a12/5.jpg" alt="a12_5" /></p>

<p>OK了嘛！总算是有了，以后跑点什么烦躁的程序就可以放这了，^_^</p>

<p>玩到现在，就发现这个命令行很疼啊，bash啊~能不能换成zsh啊~试了一下，失败鸟~~算了，这就不错了，我还能要求啥呢！先这么着吧。</p>

<h3 id="section-3">其它</h3>
<hr />
<p>看了一下，Koding也是支持Octopress的，而且配置很简单，跟在自己机器上差不多。具体还有什么，就靠自己去慢慢摸索了。可以肯定的是，这个平台还是很不错的，值得推荐哦！</p>
]]></content>
  </entry>
  
</feed>
