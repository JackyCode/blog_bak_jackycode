<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Jacky and MSC]]></title>
  <link href="http://jackycode.github.io/atom.xml" rel="self"/>
  <link href="http://jackycode.github.io/"/>
  <updated>2014-04-14T16:26:47+08:00</updated>
  <id>http://jackycode.github.io/</id>
  <author>
    <name><![CDATA[Jacky Code]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[数据科学之机器学习8: 决策树之ID3]]></title>
    <link href="http://jackycode.github.io/blog/2014/04/14/id3/"/>
    <updated>2014-04-14T16:02:45+08:00</updated>
    <id>http://jackycode.github.io/blog/2014/04/14/id3</id>
    <content type="html"><![CDATA[<p><img src="http://jackycode.github.io/images/artical/artical23.jpg" alt="artical 23" />
<!-- more --></p>

<p><em>“文章原创，转载请注明出处”</em></p>

<hr />

<p>ID3算法的核心问题就在于：选取在决策树的每个节点处要测试的属性。那么如何去选择呢？当然，我们要选取<strong>分类能力最好的属性</strong>，那么怎么去确定哪个属性是分类能力最好的呢？ID3算法中，使用<strong>信息增益</strong>作为评判标准。在看信息增益之前，我们先看看这个决策树的构造过程：</p>

<h3 id="section">一、构造过程</h3>
<hr />

<ol>
  <li>选取<strong>分类能力最好的属性</strong>作为决策树根部节点的测试；</li>
  <li>为根节点属性的每一个可能值产生一个分支；</li>
  <li>以各个分支节点为根节点，重复上述过程。</li>
</ol>

<h3 id="section-1">二、信息增益</h3>
<hr />

<h4 id="section-2">1. 熵</h4>
<hr />

<p>在看信息增益之前，首先需要介绍一个概念，那就是<strong>香农熵</strong>，简称为<strong>熵</strong>。相信学过物理的应该大都听过这个名词，在热力学中不就有个熵增原理嘛。其实，<strong>熵是信息论中广泛使用的一个度量标准，刻画了任意样例集合的纯度。</strong></p>

<p><strong>熵是信息的期望值</strong>，所以可以用熵来刻画一个数据集的纯度。若用$x_i,i=1,2,\dots,n$来表示数据集所包含的属性，那么这个数据集的熵为：</p>

<script type="math/tex; mode=display"> H = - \sum_{i=1}^{n}{p(x_i)l(x_i)} </script>

<p>其中，$p(x_i)$表示选取$x_i$作为分类的最终类别的概率；$l(x_i)$为$x_i$的信息，定义为：<script type="math/tex"> l(x_i) = - \log_2p(x_i)</script>。</p>

<h4 id="section-3">2. 信息增益</h4>
<hr />

<p>有了熵之后就可以刻画一个数据集的纯度，也就是熵值。那么什么信息增益呢？</p>

<p>简单来说，<strong>一个属性的信息增益就是：使用这个属性分割样例集合而导致的熵值降低</strong>。那么要选取分类能力最好的属性，就是要选取使得信息增益最大的那个属性。</p>

<p>一个属性A对样例集合S的信息增益定义为：</p>

<script type="math/tex; mode=display"> Gain(S, A) = H(S) - \sum_{v \in A} { \frac{\# S_v}{\# S} H(S_v) } </script>

<p>其中，<script type="math/tex">S_v</script>表示集合S中，属性A取值为$v$的那部分数据；<script type="math/tex">\# S_v</script>表示，集合S中，属性A取值为$v$的个数；<script type="math/tex">\# S</script>表示集合S中观测的个数。</p>

<h4 id="section-4">3. 简单的例子</h4>
<hr />

<table>
  <thead>
    <tr>
      <th style="text-align: center">序号</th>
      <th style="text-align: center">age</th>
      <th style="text-align: center">income</th>
      <th style="text-align: center">buy_iphone</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">1</td>
      <td style="text-align: center">senior</td>
      <td style="text-align: center">high</td>
      <td style="text-align: center">yes</td>
    </tr>
    <tr>
      <td style="text-align: center">2</td>
      <td style="text-align: center">senior</td>
      <td style="text-align: center">low</td>
      <td style="text-align: center">no</td>
    </tr>
    <tr>
      <td style="text-align: center">3</td>
      <td style="text-align: center">youth</td>
      <td style="text-align: center">high</td>
      <td style="text-align: center">yes</td>
    </tr>
    <tr>
      <td style="text-align: center">4</td>
      <td style="text-align: center">youth</td>
      <td style="text-align: center">low</td>
      <td style="text-align: center">no</td>
    </tr>
    <tr>
      <td style="text-align: center">5</td>
      <td style="text-align: center">senior</td>
      <td style="text-align: center">high</td>
      <td style="text-align: center">yes</td>
    </tr>
    <tr>
      <td style="text-align: center">6</td>
      <td style="text-align: center">youth</td>
      <td style="text-align: center">high</td>
      <td style="text-align: center">yes</td>
    </tr>
    <tr>
      <td style="text-align: center">7</td>
      <td style="text-align: center">senior</td>
      <td style="text-align: center">high</td>
      <td style="text-align: center">no</td>
    </tr>
  </tbody>
</table>

<p>考虑上面这个问题，我们来计算一下各个属性的信息增益。</p>

<p>首先，我们可以看到，这个数据集S最终分类buy_iphone有两种取值：$yes,no$。则数据集S的熵值为：</p>

<script type="math/tex; mode=display"> H(S) = -\frac{4}{7} \log_2{\frac{4}{7} } - \frac{3}{7} \log_2{\frac{3}{7} }  \approx 0.985</script>

<p>若按照age分类，age有两个属性：$senior, youth$，分别有4个和3个。age = senior时，yes有2个，no有2个则有：</p>

<script type="math/tex; mode=display"> H_{age}(S_{senior}) = -\frac{2}{4} \log_2{\frac{2}{4}} - \frac{2}{4} \log_2{\frac{2}{4}} \approx 1 </script>

<script type="math/tex; mode=display"> H_{age}(S_{youth}) = -\frac{2}{3} \log_2 {\frac{2}{3}} - \frac{1}{3} \log_2 {\frac{1}{3}} \approx 0.918 </script>

<p>则有：</p>

<script type="math/tex; mode=display"> H_{age}(S) = \frac{4}{7} \times 1 + \frac{3}{7} \times 0.918 = 0.965 </script>

<p>则age属性的信息增益为：</p>

<script type="math/tex; mode=display"> H(S) - H_{age}(S) = 0.985 - 0.965 = 0.020 </script>

<p>那么属性income的信息增益怎么去计算，可以动手试试。</p>

<h3 id="id3">三、ID3算法的伪代码</h3>
<hr />

<h5 id="section-5">定义：</h5>
<ul>
  <li>data：为训练样本集</li>
  <li>label：为目标属性 （比如例子中的属性buy_iphone）</li>
  <li>attrs：出目标属性外，供算法学习测试使用的其它属性 （比如例子中的age和income属性）</li>
</ul>

<h5 id="section-6">伪代码：</h5>
<p>ID3(data, label, attrs)：</p>

<ol>
  <li>创建决策树的Root节点；</li>
  <li>若lable中取值单一，则返回 <code>label=label</code> 的单节点树；</li>
  <li>若attrs为空，则返回 <code>label=（data中取值最多的那个label）</code> 的单节点树；</li>
  <li>否则：
    <ol>
      <li>选取attrs中分类能力最好的属性作为Root的决策属性，记为A；</li>
      <li>对A的每一个可能取值vi：
        <ol>
          <li>在Root添加一个分支对应 <code>A = vi </code>；</li>
          <li>data_vi = data中 <code>A = vi</code> 的子集，label_vi 表示 data_vi 所对应的目标属性取值；</li>
          <li>若 data_vi 为空集：
            <ol>
              <li>在新分支下加一个叶子节点，节点 <code>label =（data中取值最多的那个label）</code> ;</li>
              <li>否则，加一个子树：ID3(data_vi, label_vi, attrs);</li>
            </ol>
          </li>
        </ol>
      </li>
    </ol>
  </li>
  <li>结束</li>
  <li>返回Root</li>
</ol>

<h3 id="r">四、R语言实现</h3>
<hr />

<p>见<a href="http://jackycode.github.io/datascience">我的项目</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[打折的Apps]]></title>
    <link href="http://jackycode.github.io/blog/2014/04/11/apps-at-a-discount/"/>
    <updated>2014-04-11T19:32:31+08:00</updated>
    <id>http://jackycode.github.io/blog/2014/04/11/apps-at-a-discount</id>
    <content type="html"><![CDATA[<p><img src="http://jackycode.github.io/images/artical/artical22.jpg" alt="artical 22" />
<!-- more --></p>

<p><em>“文章原创，转载请注明出处”</em></p>

<hr />

<p>这两天，很多Mac和iPhone上的Apps都在打折，比如出名的Day one、1Password等等。</p>

<p>在StackSoical上面也介绍了一些，链接如下：<a href="https://stacksocial.com/ios_bundle?utm_source=ssnetwork&amp;utm_medium=hellobar&amp;utm_campaign=iosbundle">链接</a></p>

<p><img src="http://jackycode.github.io/images/a22/stack.jpg" alt="stack" /></p>

<p>StackSoical上没有介绍的，就是打折的<a href="https://agilebits.com/store">1Password</a></p>

<p><img src="http://jackycode.github.io/images/a22/1pass.jpg" alt="1pass" /></p>

<p>这些打折的应用，都可以直接在App Store购买。我暂时不知道打折持续的时间有多少，也不知道打折的原因。没关系啦，这个打折总归是我们这些消费者福音，像1Password这样贵的应用，如果需要的，抓紧时间购买吧！！！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[数据科学之机器学习7: 决策树]]></title>
    <link href="http://jackycode.github.io/blog/2014/04/11/decision-trees/"/>
    <updated>2014-04-11T19:00:32+08:00</updated>
    <id>http://jackycode.github.io/blog/2014/04/11/decision-trees</id>
    <content type="html"><![CDATA[<p><img src="http://jackycode.github.io/images/artical/artical21.jpg" alt="artical 21" />
<!-- more --></p>

<p><em>“文章原创，转载请注明出处”</em></p>

<hr />

<h3 id="section">一、开始</h3>
<hr />

<p>在介绍决策树的概念内容之前，先来初步了解一下决策树的流程。这是一个很简单的概念，通过一张简单的流程图就可以大致了解决策树是干什么的，怎么干的。</p>

<p><img src="\images\a21\decisiontrees.jpg" alt="decision trees" /></p>

<h3 id="section-1">二、相关概念</h3>
<hr />

<h4 id="section-2">1. 一些概念</h4>
<hr />

<ul>
  <li>决策树学习是一种逼近离散值目标函数的方法。</li>
  <li>决策树通过把实例从根节点排列到某个叶子节点来分类实例，叶子的节点即为实例所属的分类。</li>
  <li>决策树上的每一个节点，指定了对实例的某一个属性的测试，并且，该节点的每一个后续分支对应该属性的一个可能值。</li>
</ul>

<h4 id="section-3">2. 分类方法</h4>
<hr />
<p>从树的根节点开始，测试这个节点指定的属性，然后按照给定实例的该属性值对应的分支向下移动。然后以新节点作为根节点重复上面的过程直至结束。</p>

<h3 id="section-4">三、 评价</h3>
<hr />

<p>通过决策树的流程，可以发现决策树的计算复杂度不高，而且其输出的结果易于理解，并且对缺失值不敏感。</p>

<p>但是，正是由于其划分过于细致，可能会导致过度匹配问题(与回归中的overfitting类似)。</p>

<h3 id="section-5">四、主要的决策树算法</h3>
<hr />

<p>从决策树的流程可以看出，<strong>如何选择属性作为节点以测试实例</strong>是最为关键的一步。不同的算法采取了不同的方法，主要的决策树算法有这样几个：</p>

<ul>
  <li>ID3</li>
  <li>C4.5 （数据挖掘十大算法之一，也是ID3算法的改进）</li>
  <li>C5.0 （C4.5的改进，适用于处理大数据集，采用Boosting方式提高模型准确率，因而又称BoostingTrees。）</li>
  <li>CART（数据挖掘十大算法之一）</li>
</ul>

<p>下一篇就开始讲讲一些决策树的算法。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[数据科学之机器学习6: 分类之朴素贝叶斯]]></title>
    <link href="http://jackycode.github.io/blog/2014/04/08/naive-bayes/"/>
    <updated>2014-04-08T15:54:37+08:00</updated>
    <id>http://jackycode.github.io/blog/2014/04/08/naive-bayes</id>
    <content type="html"><![CDATA[<p><img src="http://jackycode.github.io/images/artical/artical20.jpg" alt="artical 20" />
<!-- more --></p>

<p><em>“文章原创，转载请注明出处”</em></p>

<hr />

<h3 id="knn">0、kNN算法的优缺点</h3>
<p>与kNN算法一样，朴素贝叶斯算法也是数据挖掘十大算法之一。我们介绍kNN算法时，并没有讨论kNN算法的优缺点，这边首先看看这个问题。</p>

<p>从构造kNN算法的过程可以看到，这个分类算法的<strong>精度很高</strong>。因为这个算法计算了所有点与待分类点之间的相似度，然后去确定带分类点的类别。由此可见，这个算法对<strong>异常值并不敏感</strong>。但是正是因为它需要计算所有点之间的距离，所以其<strong>复杂度是很高的</strong>，换句话就是，如果数据量大的话，这个算法会很费时，并不高效。</p>

<h3 id="section">一、贝叶斯决策</h3>
<hr />

<p>贝叶斯定理给出了条件概率之间的关系，是一个非常重要的定理。这里直接给出贝叶斯定理的结论：</p>

<script type="math/tex; mode=display"> P(B  \mid A) = \frac{P(A \mid B)P(B) }{P(A)} </script>

<p>在贝叶斯决策理论里面，要判断点$x$是否属于$C_i$类，只要验证是否存在：</p>

<script type="math/tex; mode=display"> p(C_i \mid x) = \max_{j} \{ P(C_j \mid x) \} </script>

<p>即是，使得$p(C_i \mid x)$达到最大的那个$C_i$就是$x$所属的类别。</p>

<h3 id="section-1">二、具体流程</h3>
<hr />

<p>要计算<script type="math/tex">P(C_i \mid x)</script>，那么就需要计算<script type="math/tex">\frac{P(x \mid C_i)P(C_i )}{P(x)}</script>，我们知道对于每一个<script type="math/tex">P(C_i \mid x)</script>，其计算公式中的分母都是<script type="math/tex">P(x)</script>，所以有：</p>

<script type="math/tex; mode=display"> P(C_i \mid x) \propto P(x \mid C_i)P(C_i ) </script>

<p>所以我们实际计算时，只需要考虑上式右侧的大小即可。首先我们来确定一些符号的意思：</p>

<ul>
  <li><script type="math/tex">x = [x_1, x_2, \dots, x_p]</script>为一个带分类的项，$x_i$为其特征；</li>
  <li>data表示一个已知分类的数据集($n \times p$的矩阵)，其每一行代表一个观测，每一列代表一个特征；</li>
  <li>label表示data中每一个数据对应的类别标签($ n \times 1$的矩阵)，比如data的第一行观测的类别就是label中的第一个取值；</li>
  <li><script type="math/tex">C = [ C_1, C_2, \dots, C_m ]</script>为一个类别集合，一般来说$ m &lt; p $。</li>
</ul>

<h5 id="section-2">步骤：</h5>

<ol>
  <li>
    <p>在已知分类的数据集data中统计：</p>

<script type="math/tex; mode=display">P(C_i), i = 1, 2, \dots, m</script>

<script type="math/tex; mode=display">P(x_j \mid C_i), i = 1, 2, \dots, m; j = 1, 2, \dots p</script>
  </li>
  <li>
    <p>计算</p>

<script type="math/tex; mode=display">P(x \mid C_i)P(C_i ) = P(C_i) \prod_{j=1}^{p} {P(x_j \mid C_i)}, i = 1, 2, \dots, m</script>
  </li>
  <li>
    <p>若</p>

<script type="math/tex; mode=display">P(x \mid C_k)P(C_k) = \max\{ P(x \mid C_i)P(C_i ) \}</script>

    <p>则<script type="math/tex"> x \in C_k</script>。</p>
  </li>
</ol>

<h3 id="section-3">三、一些存在的问题</h3>
<hr />

<ol>
  <li>当步骤的第2步中，<script type="math/tex">P(x \mid C_i)P(C_i ) = P(C_i) \prod_{j=1}^{p} {P(x_j \mid C_i)}, i = 1, 2, \dots, m</script>，中<script type="math/tex">P(x_j \mid C_i)</script>可能在样本较小时取值出现0，那么就会影响乘积；</li>
  <li>计算机计算时会出现精度问题，比如，如果<script type="math/tex">P(x_j \mid C_i)</script>的值有很多都是非常小的（像0.000001），那么计算机在计算是会将其四舍五入成0。</li>
</ol>

<p>出现上面的情况应该怎么办呢？</p>

<p>学数学的应该都清楚，遇到这种问题有一个很简单的处理方式，那就是取个对数。虽说取对数后会改变值的大小，但是取对数不会改变原本数据趋势，即原来大的数，取对数后还是大的。</p>

<p>此外，对于<script type="math/tex">P(x_j \mid C_i)</script>可能在样本较小时取值出现0的情况，处理也很简单，那就是将每一个$x_j$的初值都设置成1，所有特征的基数都从1开始，不会影响结果。（这时需要注意，所有特征的初值都是1，对应的总数初值也会发生变化。）</p>

<h3 id="r">四、R语言实现</h3>
<hr />

<p>见<a href="http://jackycode.github.io/datascience">我的项目</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[数据科学之机器学习5：分类之k-近邻算法]]></title>
    <link href="http://jackycode.github.io/blog/2014/04/05/knn/"/>
    <updated>2014-04-05T19:59:29+08:00</updated>
    <id>http://jackycode.github.io/blog/2014/04/05/knn</id>
    <content type="html"><![CDATA[<p><img src="http://jackycode.github.io/images/artical/artical19.jpg" alt="artical 19" />
<!-- more --></p>

<p><em>“文章原创，转载请注明出处”</em></p>

<hr />

<h4 id="section">基本思想</h4>
<hr />

<p>kNN，k-Nearest Neighbor algorithm，也就这边的k-近邻算法，是数据挖掘十大算法之一，是一个比较简单的分类方法。</p>

<p>其基本的思想是：对于一个输入样本（未知分类的样本），考虑其与测试样本中与之距离最近（特征最相似）的k个样本，用这k个样本中出现最多的分类作为输入样本的分类。</p>

<h4 id="section-1">具体流程</h4>
<hr />

<p>对于输入样本中的每一个点，进行以下操作：</p>

<ol>
  <li>计算点与测试样本中点的距离；</li>
  <li>取出与当前点距离最小的k个点；</li>
  <li>确定k个点的分类，计算各个分类的频数；</li>
  <li>返回频数最高的类别，作为该输入点的预测分类。</li>
</ol>

<h4 id="section-2">距离的计算</h4>
<hr />

<p>上面一直在说，计算输入样本中点与测试样本中点之间的距离，那么这个距离应该怎么计算呢？这个距离一般就是使用欧式距离：</p>

<script type="math/tex; mode=display"> d = \sqrt{(x - y)^T(x - y)} </script>

<p>其中<script type="math/tex">x^T=[x_1, x_2,\dots,x_n], y^T=[y_1,y_2,\dots,y_n]</script>。二维的表示就是：</p>

<script type="math/tex; mode=display"> d = \sqrt{(x - y)^T(x - y)} = \sqrt{(x_1 - y_1)^2 + (x_2 - y_2)^2} </script>

<h4 id="r">R语言实现</h4>
<hr />

<p>见<a href="https://github.com/JackyCode/Data_Science/tree/master/kNN">我的github</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[数据科学之机器学习4：线性回归3]]></title>
    <link href="http://jackycode.github.io/blog/2014/04/02/linear-regression3/"/>
    <updated>2014-04-02T18:51:29+08:00</updated>
    <id>http://jackycode.github.io/blog/2014/04/02/linear-regression3</id>
    <content type="html"><![CDATA[<p><img src="http://jackycode.github.io/images/artical/artical18.jpg" alt="artical 18" />
<!-- more --></p>

<p><em>“文章原创，转载请注明出处”</em></p>

<hr />

<p>这是介绍线性回归的最后一篇，首先回顾一下之前的两篇。第一篇主要就是介绍了如何去估计回归系数得到回归方程，以及在R语言中如何使用自带的函数去实现。第二篇主要介绍了对于回归方程和回归系数的显著性检验，以及给出了我自己写的一个处理线性回归的函数。</p>

<p>这一篇介绍线性回归中回归诊断的一些问题，也就是估计出回归方程，检验了回归方程的显著性以及回归系数的显著性后，对这个模型所做的进一步的诊断分析。然后对存在的问题进行探讨，选择不同的方式去解决这些问题。这大致可以分成三块：残差分析，影响分析以及共线性问题。</p>

<hr />

<h4 id="section">一、残差分析</h4>

<hr />

<h5 id="section-1">1. 残差</h5>

<hr />

<p>首先看一看残差的定义，常用的残差大致有三种：残差，标准化残差以及学生化残差：</p>

<ul>
  <li>残差：<script type="math/tex">\hat{\varepsilon} = y - \hat{y} = (1-H)y</script>,其中<script type="math/tex">H=X(X^TX)^{-1}X</script>称作帽子矩阵；</li>
  <li>标准化残差：<script type="math/tex">ZRE = \hat{\varepsilon} / \hat{\sigma}</script></li>
  <li>学生化残差：<script type="math/tex">SRE_i = \hat{\varepsilon}_i / (\hat{\sigma}\sqrt{1-h_{ii}})</script>，其中<script type="math/tex">h_{ii}</script>为帽子矩阵对角线上第$i$个元素。</li>
</ul>

<hr />

<p><strong>R语言中</strong></p>

<p>使用<code>residuals(),rstandard(),rstudent()</code>函数计算残差，标准化残差以及学生化残差。具体用法，请使用<code>help</code>函数查看。</p>

<hr />

<h5 id="section-2">2. 残差图</h5>

<hr />

<p>以残差为纵坐标，观测值、预测值活则观测时间等等作为横坐标的散点图，称为<strong>残差图</strong>。</p>

<hr />

<p><strong>R语言中</strong></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="r"><span class="line">model <span class="o">=</span> lm<span class="p">(</span>y<span class="o">~</span>x1<span class="o">+</span>x2<span class="p">)</span>
</span><span class="line">y_pred <span class="o">=</span> predict<span class="p">(</span>model<span class="p">)</span>
</span><span class="line">y_res <span class="o">=</span> residuals<span class="p">(</span>model<span class="p">)</span>
</span><span class="line">plot<span class="p">(</span>y_res <span class="o">~</span> y_pred<span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<hr />

<h5 id="section-3">3. 异方差问题</h5>

<hr />

<h6 id="a-">a. 问题的提出</h6>

<hr />

<p>在进行回归方程估计之前，一般都会假设误差的方差是齐性的。如果残差图出现类似下面的情况，则这批数据可能存在异方差问题，即方差非齐性。</p>

<ol>
  <li>随着横坐标的增大，纵坐标的值波动越来越大；</li>
  <li>随着横坐标的增大，纵坐标的值波动越来越小；</li>
  <li>随着横坐标的增大，纵坐标的值波动复杂多变，没有系统关系；</li>
</ol>

<p>大部分时候，考虑前两种就可以了。那么具体如何数值化地检验异方差呢，一般使用的是等级相关系数法，这里不做介绍(可到线性回归的书籍中寻找)。</p>

<hr />

<h6 id="b-">b. 问题的解决</h6>

<hr />

<p>一般有两种方式解决异方差问题，一种是加权最小二乘；另一种是对因变量作适当的变化。</p>

<ol>
  <li>
    <p>加权最小二乘</p>

    <p>即是将回归系数的估计转化成：<script type="math/tex">\hat{\beta}=(X^TWX)^{-1}X^TWy</script>，其中<script type="math/tex">W</script>是一个对角矩阵，用于给每一个数据点加上一个权重。一般使用“核”来对附近的点赋予较高的权重，常用的核就是高斯核，其对应的权重为：</p>

<script type="math/tex; mode=display">w_{ii}=exp(\frac{\|x^{(i)}-x\|}{-2k^2})</script>

    <p>从上式可以看出，点$x$离$x^{(i)}$越近，所得到的权重越高。</p>
  </li>
  <li>
    <p>对因变量作适当变化</p>

    <p>常用的变换有：</p>

    <ul>
      <li>$z = \sqrt{y}$</li>
      <li>$z = ln(y)$（对数变换）</li>
      <li>$z = 1/y$</li>
      <li>$z = \frac{x^{\lambda}-1}{\lambda}$(Box-Cox变换)，其中$\lambda=0$时，即是对数变换</li>
    </ul>
  </li>
</ol>

<hr />

<h5 id="section-4">4. 异常点</h5>

<hr />

<h6 id="a--1">a. 问题的提出</h6>

<hr />

<p>一般将标准化残差的绝对值大于等于2的称为可疑点；将标准化残差的绝对值大于等于3的称为异常点。</p>

<hr />

<h6 id="b--1">b. 问题的解决</h6>

<hr />

<p>一般来说，剔除异常数据即可。</p>

<hr />

<h5 id="section-5">5. 自相关问题</h5>

<hr />

<p>在作回归之前，总是会假设<script type="math/tex">cov(\varepsilon_i, \varepsilon_j)=0,\forall i \neq j</script>。但是实际情况下，可能并不满足这个假设，这就是存在了自相关问题。对于自相关问题，一般使用残差图，自相关系数以及DW检验去进行检验；而处理的方式一般是：迭代法和差分法。这里不做详细介绍，感兴趣的可以去找找相关材料。</p>

<hr />

<h4 id="section-6">二、影响分析</h4>

<hr />

<p>分析观测值对回归结果的影响，从而找出对回归结果影响较大的观测点的分析方法叫做影响分析。一般使用Cook距离去度量第$i$个观测值对回归影响大小，Cook距离的定义如下：</p>

<script type="math/tex; mode=display">D_i(M,MSE) = \frac{(\hat{\beta}_{(i)}-\hat{\beta})^TM(\hat{\beta}_{(i)}-\hat{\beta})}{MSE}</script>

<p>其中，$M$为观测数据的离差阵，$MSE$为回归模型的均方误差。一般<script type="math/tex">\|D_i\| \geqslant 4/n</script>时，称其为强影响点。</p>

<hr />

<p><strong>R语言中</strong></p>

<p>使用<code>cooks.distance()</code>函数计算Cook距离。</p>

<hr />

<h4 id="section-7">三、共线性诊断</h4>

<hr />

<p>共线性是指，在多元线性回归中，自变量之间存在线性关系或者近似线性关系。如果出现这种情况，那么在模型内部就会隐藏部分变量的显著性，也会导致参数估计的误差增大，影响模型的稳定性。</p>

<hr />

<h5 id="a--2">a. 检验方法</h5>

<hr />

<p>常用的检验方法有特征值法，条件数和方差膨胀因子（VIF）。</p>

<hr />

<h6 id="section-8">特征值法</h6>

<hr />

<p>首先介绍一个结论：当矩阵$X^TX$至少有一个特征根为0时，$X$的列向量间必存在多重共线性。</p>

<p>即可证：$X^TX$有多少个特征根接近于零，设计阵$X$就有多少个多重共线性。</p>

<hr />

<p><strong>在R语言中</strong></p>

<p>可以使用<code>eigen()</code>函数去计算特征值和特征向量。</p>

<hr />

<h6 id="section-9">条件数</h6>

<hr />

<p>上述的特征值法中，特征根近似为0，这个标准好想并不明确。那么这边就给出一个条件数的定义：</p>

<script type="math/tex; mode=display">k_i = \frac{\lambda_m}{\lambda_i}</script>

<p>其中，<script type="math/tex">\lambda_m</script>为最大的那个特征根。一般认为，若$k_i$介于10到30之间为弱相关；在30到100之间为中等相关；超过100为强相关。</p>

<hr />

<p><strong>在R语言中</strong></p>

<p>可以使用<code>kappa()</code>函数计算条件数。</p>

<hr />

<h6 id="vif">VIF</h6>

<hr />

<p>定义VIF为：</p>

<script type="math/tex; mode=display">VIF_i = \frac{\text{第i个回归系数的方差}}{\text{自变量不相关时第i个回归系数的方差}} = \frac{1}{1-R^2_i} = \frac{1}{TOL_i}</script>

<p>其中$TOL_i$称为容忍度；$R^2_i$为自变量$x_i$对其余自变量的复决定系数。一般认为，VIF超过10，模型就存在共线性问题。</p>

<hr />

<p><strong>在R语言中</strong></p>

<p>可以使用<code>vif()</code>函数计算VIF的值。</p>

<hr />

<h5 id="b--2">b. 多重共线性的处理</h5>

<hr />

<p>一般有这样几种处理方式：</p>

<ol>
  <li>
    <p>剔除一些不重要的解释变量</p>

    <ol>
      <li>使用变量选择的方式剔除部分变量，作回归；</li>
      <li>检验VIF，若存在共线性，删除VIF值最大的变量，作回归；</li>
      <li>再次检验VIF，若还存在共线性，再删除其中VIF值最大的那个；</li>
      <li>重复直至消除共线性。</li>
    </ol>
  </li>
  <li>
    <p>增大样本容量</p>

    <p>当变量的个数接近样本容量的数值时，自变量间容易产生多重共线性。所以增大样本容量是解决多重共线性的一种方式，但是在现实中，这种做法基本不可能。</p>
  </li>
  <li>
    <p>主成分回归</p>

    <p>这是一个比较大的主题，这里不做介绍。</p>
  </li>
  <li>
    <p>有偏估计等等。</p>
  </li>
</ol>

<hr />

<h3 id="section-10">最后</h3>

<hr />

<p>到这里，除了变量选择问题，线性回归的内容基本上就已经梳理了一遍。变量选择问题，方法简单的非常简单，难的非常难（像lasso），所以暂时还不想写这些内容。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[数据科学之机器学习3：线性回归2]]></title>
    <link href="http://jackycode.github.io/blog/2014/04/01/linear-regression2/"/>
    <updated>2014-04-01T16:56:57+08:00</updated>
    <id>http://jackycode.github.io/blog/2014/04/01/linear-regression2</id>
    <content type="html"><![CDATA[<p><img src="http://jackycode.github.io/images/artical/artical17.jpg" alt="artical 17" />
<!-- more --></p>

<p><em>“文章原创，转载请注明出处”</em></p>

<hr />

<p>上一篇简单介绍了线性回归中系数估计的问题，给出了一元以及多元情况下，系数估计值的表达式！此外，还给出了在R语言中如何使用自带的函数计算系数估计值。</p>

<p>这一篇，打算介绍一下线性回归中的一些显著性检验问题。这个就是完全属于统计学中的理论内容，不过依旧有着很强的实际意义。简单来说，显著性检验不能通过，说明你的线性回归的效果不好，可能你就需要选择其它的方式去处理你手头的数据，而不是选择线性回归了。</p>

<hr />

<h4 id="section">一、回归方程的显著性检验</h4>

<hr />

<p>考虑回归方程是否显著，意思就是查看自变量<script type="math/tex">x_1,x_2,\dots,x_p</script>从整体上是否对因变量<script type="math/tex">y</script>有显著的影响。则，我们可以考虑这样的假设检验问题：</p>

<script type="math/tex; mode=display"> H_0:\beta_0=\beta_1=\dots=\beta_p=0;~H_1:\beta_0,\beta_1,\dots,\beta_p\text{不全为0}</script>

<p>显然，如果原假设成立的话，自变量对因变量的影响不大，也就是用线性回归模型来解释就显得不合适了。</p>

<p>在正态假设下，原假设<script type="math/tex">H_0</script>成立时，有<script type="math/tex">F</script>检验统计量：</p>

<script type="math/tex; mode=display"> F = \frac{SSR/p}{SSE/(n-p-1)} \sim F(p,n-p-1) </script>

<p>其中<script type="math/tex">SSR=\sum_{i=1}^{n}{(\hat{y}_i-\overline{y})^2}</script>为回归平方和，<script type="math/tex">SSE=\sum_{i=1}^{n}{(y_i-\hat{y}_i)^2}</script>为残差平方和。对于给定的显著性水平$\alpha$，拒绝域为：<script type="math/tex">\{F \geqslant F_{1-\alpha}(p,n-p-1)\}</script>。</p>

<hr />

<h4 id="section-1">二、回归系数的显著性检验</h4>

<hr />

<p>显然，线性回归中很有可能就存在某个自变量对因变量的影响很小，那么它的回归系数就会接近0.因此有如下的假设检验问题：</p>

<script type="math/tex; mode=display">H_{0j}:\beta_j = 0; ~ H_{1j}:\beta_j \neq 0, ~ j=0,1,\dots,p</script>

<p>在原假设成立的条件下，$t$统计量有：</p>

<script type="math/tex; mode=display">t_j = \frac{\hat{\beta}_j}{\sqrt{c_{jj}}\hat{\sigma}} \sim t(n-p-1)</script>

<p>其中，<script type="math/tex">(c_{ij})=(X^TX)^{-1},i,j=0,1,\dots,p;~\hat{\sigma}=\sqrt{\frac{1}{n-p-1}\sum_{i=1}^{n}{(y_i-\hat{y}_i)^2}}</script>。对于给定的显著性水平$\alpha$，拒绝域为：<script type="math/tex">\{\|t_j\| \geqslant t_{\alpha/2}\}</script>。</p>

<hr />

<h4 id="r">三、R语言中的实现</h4>

<hr />

<p>在上一篇中可以看到，<code>lm</code>函数加上<code>summary</code>函数会有很多的输出内容。其实，那些输出中就含有上述的假设检验的结果，很容易就可以找到，这里不做阐述！</p>

<p>我自己也写了一个关于线性回归的R语言函数，托管在<a href="https://github.com/JackyCode/Data_Science/tree/master/Linear_Regression">我的github</a>上面，函数内部对于线性回归的过程大都涉及到了，有兴趣可以看看。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[数据科学之机器学习2：线性回归1]]></title>
    <link href="http://jackycode.github.io/blog/2014/03/30/machine-learning1/"/>
    <updated>2014-03-30T19:02:30+08:00</updated>
    <id>http://jackycode.github.io/blog/2014/03/30/machine-learning1</id>
    <content type="html"><![CDATA[<p><img src="http://jackycode.github.io/images/artical/artical16.jpg" alt="artical 16" />
<!-- more --></p>

<p><em>“文章原创，转载请注明出处”</em></p>

<hr />

<h4 id="section">一、回归分析</h4>

<hr />

<p>在统计分析中，最大的两支应该算是相关分析和回归分析。而回归分析应该是统计学的核心。回归分析，就是研究因变量$y$与自变量$x$之间的关系，存在条件数学期望：$f(x)=E(y|x)$。此时有：$y=f(x)+\varepsilon$，一般假设$\varepsilon \sim N(0,\sigma^2)$。</p>

<p>回归分析有很多变种：简单线性回归；多项式回归；Logistic回归；非参数回归；非线性回归等等。本篇就介绍最简单的线性回归，首先来看看一元线性回归。</p>

<hr />

<h4 id="section-1">二、一元线性回归</h4>

<hr />

<p>对于一元线性回归来说，$f(x)$就是线性的，则有：$f(x)=E(y|x)=\beta_0 + \beta_1 x$。通过已知的数据，可以估计出$\beta_0,\beta_1$的估计值：$\hat{\beta}_0,\hat{\beta}_1$。那么就有$y$的预测值：$\hat{y} = \hat{\beta}_0 + \hat{\beta}_1 x$。</p>

<hr />

<h5 id="beta0beta1hatbeta0hatbeta1">1. 如何计算$\beta_0,\beta_1$的估计值$\hat{\beta}_0,\hat{\beta}_1$呢？</h5>

<hr />

<p>定义离差平方和：</p>

<script type="math/tex; mode=display">Q(\beta_0,\beta_1) = \sum_{i=1}^{n}(y_i-f(x_i))^2</script>

<p>显然，我们希望$f(x_i)$的值与真实值$y_i$越接近越好。那么就是需要离差平方和越小越好。则得到目标：</p>

<script type="math/tex; mode=display"> \min_{\beta_0,\beta_1}{\sum_{i=1}^{n}(y_i-f(x_i))^2} </script>

<p>如何寻找$\hat{\beta}_0,\hat{\beta}_1$使得上面方程达到最小呢？这个就需要对其对$\hat{\beta}_0,\hat{\beta}_1$求偏导，得到：</p>

<script type="math/tex; mode=display">\frac{\partial Q}{\partial \beta_0}=-2\sum_{i=1}^{n}{(y_i-\beta_0-\beta_1x_i)}</script>

<script type="math/tex; mode=display">\frac{\partial Q}{\partial \beta_1}=-2\sum_{i=1}^{n}{(y_i-\beta_0-\beta_1x_i)x_i}</script>

<p>令上述两式都等于0，计算得到：</p>

<script type="math/tex; mode=display">\hat{\beta}_0=\overline{y}-\hat{\beta}_1\overline{x}</script>

<script type="math/tex; mode=display">\hat{\beta}_1=\frac{\sum_{i=1}^{n}{(x_i-\overline{x})(y_i-\overline{x})}}{\sum_{i=1}^{n}{(x-\overline{x})^2}}</script>

<p>这样就得到$\beta_0,\beta_1$的估计值$\hat{\beta}_0,\hat{\beta}_1$。这个方法就叫做OLS，即普通最小二乘(ordinary least squares)。</p>

<hr />

<h5 id="r">2. R语言实现</h5>

<hr />

<p>在R语言中有自带的函数可以处理线性回归，那就是<code>lm</code>函数。这里使用自带的数据<code>cars</code>做演示：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
</pre></td><td class="code"><pre><code class="r"><span class="line"><span class="o">&gt;</span> attach<span class="p">(</span>cars<span class="p">)</span> <span class="c1"># 使用数据集cars，与with函数类似</span>
</span><span class="line"><span class="o">&gt;</span> lingre <span class="o">&lt;-</span> lm<span class="p">(</span>dist <span class="o">~</span> speed<span class="p">)</span>
</span><span class="line"><span class="o">&gt;</span> summary<span class="p">(</span>lingre<span class="p">)</span>
</span><span class="line">
</span><span class="line">Call<span class="o">:</span>
</span><span class="line">lm<span class="p">(</span>formula <span class="o">=</span> dist <span class="o">~</span> speed<span class="p">)</span>
</span><span class="line">
</span><span class="line">Residuals<span class="o">:</span>
</span><span class="line">    Min      <span class="m">1</span>Q  Median      <span class="m">3</span>Q     Max
</span><span class="line"><span class="m">-29.069</span>  <span class="m">-9.525</span>  <span class="m">-2.272</span>   <span class="m">9.215</span>  <span class="m">43.201</span>
</span><span class="line">
</span><span class="line">Coefficients<span class="o">:</span>
</span><span class="line">            Estimate Std. Error t value Pr<span class="p">(</span><span class="o">&gt;|</span>t<span class="o">|</span><span class="p">)</span>
</span><span class="line"><span class="p">(</span>Intercept<span class="p">)</span> <span class="m">-17.5791</span>     <span class="m">6.7584</span>  <span class="m">-2.601</span>   <span class="m">0.0123</span> <span class="o">*</span>
</span><span class="line">speed         <span class="m">3.9324</span>     <span class="m">0.4155</span>   <span class="m">9.464</span> <span class="m">1.49e-12</span> <span class="o">***</span>
</span><span class="line"><span class="o">---</span>
</span><span class="line">Signif. codes<span class="o">:</span>  <span class="m">0</span> ‘<span class="o">***</span>’ <span class="m">0.001</span> ‘<span class="o">**</span>’ <span class="m">0.01</span> ‘<span class="o">*</span>’ <span class="m">0.05</span> ‘.’ <span class="m">0.1</span> ‘ ’ <span class="m">1</span>
</span><span class="line">
</span><span class="line">Residual standard error<span class="o">:</span> <span class="m">15.38</span> on <span class="m">48</span> degrees of freedom
</span><span class="line">Multiple R<span class="o">-</span>squared<span class="o">:</span>  <span class="m">0.6511</span><span class="p">,</span>	Adjusted R<span class="o">-</span>squared<span class="o">:</span>  <span class="m">0.6438</span>
</span><span class="line"><span class="k-Variable">F</span><span class="o">-</span>statistic<span class="o">:</span> <span class="m">89.57</span> on <span class="m">1</span> and <span class="m">48</span> DF<span class="p">,</span>  p<span class="o">-</span>value<span class="o">:</span> <span class="m">1.49e-12</span>
</span><span class="line">
</span><span class="line"><span class="o">&gt;</span> plot<span class="p">(</span>dist <span class="o">~</span> speed<span class="p">,</span> pch<span class="o">=</span><span class="m">4</span><span class="p">)</span> <span class="c1"># 画出散点图</span>
</span><span class="line"><span class="o">&gt;</span> abline<span class="p">(</span>lingre<span class="p">,</span> col<span class="o">=</span><span class="s">&#39;red&#39;</span><span class="p">)</span> <span class="c1"># 添加拟合直线</span>
</span><span class="line"><span class="o">&gt;</span> detach<span class="p">(</span>cars<span class="p">)</span> <span class="c1"># 使用完记得释放</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>从这里可以得到回归方程：$\hat{dist} = -17.5791 + 3.9324 \times speed$。（对于其它的结果是什么意思，可以去查看线性回归的相关书籍）</p>

<p>另外，得到拟合直线的图像：</p>

<p><img src="\images\a16\lingre_one.jpg" alt="lingre_one" /></p>

<hr />

<h4 id="section-2">三、多元线性回归</h4>

<hr />

<p>对于多元线性回归来说，其计算方式与一元线性回归类似，区别在于，多元的时候需要利用矩阵来处理。首先看一下回归模型：</p>

<script type="math/tex; mode=display"> y = \beta_0 + \beta_1 x_1 + \beta_2 x_2 + \dots + \beta_p x_p + \varepsilon </script>

<p>其中$p$代表自变量的个数。</p>

<p>若取$x^T_0=[1, 1, \dots, 1]_{1 \times n}$，则可将上述模型改写成：<script type="math/tex">y=X\beta+\varepsilon</script>。其中：</p>

<script type="math/tex; mode=display">y^T=[y_1,y_2,\dots,y_n], X=[x_0,x_1,\dots,x_p], \beta^T=[\beta_0,\beta_1,\dots,\beta_p], \varepsilon^T=[\varepsilon_1,\varepsilon_2,\dots,\varepsilon_n]</script>

<p>其中<script type="math/tex">x^T_i=[x_{1i},x_{2i},\dots,x_{ni}]</script>。</p>

<p>这样我们就可以将离差平方和<script type="math/tex">\sum_{i=1}^{n}{(y_i-\beta_0 + \beta_1 x_1 + \beta_2 x_2 + \dots + \beta_p x_p)^2}</script>写成矩阵形式：</p>

<script type="math/tex; mode=display">(y-X\beta)^T(y-X\beta)</script>

<p>求导可得：<script type="math/tex">-2X^T(y-X\beta)</script>(这里用到矩阵求导的知识，一般介绍<strong>线性模型</strong>的书籍中会讲到；当然也可以直接对上面不是矩阵形式的离差平和求导)。令其等于0，可得：</p>

<script type="math/tex; mode=display">\hat{\beta} = (X^TX)^{-1}X^Ty</script>

<hr />

<h5 id="r-1">R语言实现</h5>

<hr />

<p>对于R语言的实现，依旧使用<code>lm</code>函数：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="r"><span class="line">lingre_mul <span class="o">&lt;-</span> lm<span class="p">(</span>y <span class="o">~</span> x1 <span class="o">+</span> x2<span class="p">,</span> data<span class="o">=</span>datasets<span class="p">)</span>
</span><span class="line">summary<span class="p">(</span>lingre_mul<span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这里就不再用实际数据去演示了。</p>

<hr />

<h4 id="section-3">四、最后</h4>

<hr />

<p>至此，就把线性回归的基础内容介绍完了。但其实线性回归还存在很多其它的问题。比如说回归诊断（就是检查回归的效果），变量选择等等等等。感兴趣的话，可以找本讲线性回归的书看看，有很多！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[数据科学之机器学习1：简介]]></title>
    <link href="http://jackycode.github.io/blog/2014/03/30/data-science-an-introduction-to-machine-learning/"/>
    <updated>2014-03-30T16:39:09+08:00</updated>
    <id>http://jackycode.github.io/blog/2014/03/30/data-science-an-introduction-to-machine-learning</id>
    <content type="html"><![CDATA[<p><img src="http://jackycode.github.io/images/artical/artical15.jpg" alt="artical 15" />
<!-- more --></p>

<p><em>“文章原创，转载请注明出处”</em></p>

<hr />

<p>上一篇“<a href="http://jackycode.github.io/blog/2014/03/27/an-introduction-to-data-science/">数据科学简介</a>”简单地说了一下数据科学是什么，以及它包罗的东西。这一篇打算简单介绍一下<strong>机器学习</strong>，并理一理机器学习中涉及的内容。</p>

<hr />

<h4 id="section">机器学习的定义</h4>

<hr />

<p>一般来说，教科书介绍一样东西，首先会给它下一个确切的定义。不过，对于机器学习的定义，我还真不知道该怎么去下。有太多的版本，太多的述说方式，不知道用哪个好。这里就列举一些我觉得有代表性的，讲的容易懂的那些定义。对于机器学习是什么，看看这些定义，应该就能够有个大致的了解了。</p>

<p>首先，在“<a href="http://www.amazon.cn/Machine-Learning-The-Art-and-Science-of-Algorithms-That-Make-Sense-of-Data-Flach-Peter/dp/1107422221/ref=tmm_pap_title_0">Machine Learning: the art and science of algorithms that make sense of data</a>”一书中，有这样一个定义：</p>

<blockquote>
  <p>Machine Learning is the systematic study of algorithms and systems that improve their knowledge or performance with experience.</p>
</blockquote>

<p>这个定义说的比较简单直白，就是说，机器学习就是研究如何通过经验(其实就是数据)去改进性能的算法(这个翻译学得不好，见谅！)。我们可以简单这样理解，机器学习就是研究这么一类算法，通过这类算法呢，系统可以从数据中获取信息来提升自己的性能。最简单的说法就是将数据转换成有用的信息。</p>

<p>在“<a href="http://www.amazon.cn/Machine-Learning-The-Art-and-Science-of-Algorithms-That-Make-Sense-of-Data-Flach-Peter/dp/1107422221/ref=tmm_pap_title_0">Machine Learning: the art and science of algorithms that make sense of data</a>”书中，还有这么一句话，将机器学习的流程说的很清楚：</p>

<blockquote>
  <p>Machine learning is concerned with using the right features to build the right models that achieve the right task.</p>
</blockquote>

<p>这句话就是说，机器学习关心的就是：如何通过对特征(数据)建立模型去完成一些任务。在Andrew Ng的机器学习视频中，还列出了Tom Mitchell给出的定义，与上面的说法有些相近：</p>

<blockquote>
  <p>A computer program is said to learn from experience E with respect to some task T and some performance measure P, if its performance on T, as measured by P, improves with experience E.</p>
</blockquote>

<p><strong><em>上一篇博文里曾说，数据科学是统计、计算机科学以及专业知识的结合。而其实，机器学习就是统计与计算机科学的结合。正因如此，机器学习是数据科学的核心。</em></strong>简单来说，机器学习就是：研究让机器通过学习过去的经验，达到提高处理相同任务能力的算法。</p>

<hr />

<h4 id="section-1">机器学习的类别</h4>

<hr />

<p>机器学习大致可以分为两类：监督学习(supervised learning)和无监督学习(unsupervised learning)。</p>

<p>如何区分呢？<strong>区别就在于，测试数据有没有给出确切的类别或者结果。若给出了就是监督学习，若没有则是无监督学习</strong>。</p>

<p>比如说回归：其给定的测试样本中，一组自变量的值肯定对应一个确定的因变量的值；再说分类：对于给出的测试样本中的每一个数据，其都会有自己所属的类别。所以回归与分类就属于监督学习的范畴，也就是可以通过既定的数据去做预测。</p>

<p>而无监督学习不同，其给出的数据不存在任何其它信息，比方说聚类，给你一批数据，没有任何信息，让你把数据分成几个类别。一般来说，这时候就需要计算数据之间的相似度(距离)，然后把距离近的归位一类。</p>

<hr />

<h4 id="section-2">最后</h4>

<hr />

<p>到这里，基本上来说，机器学习是干什么的应该有了一些了解了。至于机器学习的分类，监督学习和无监督学习还不明白也不要紧。等弄明白了回归，分类以及聚类等等的是干什么的，自然就明白这两者之间的区别了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[数据科学简介]]></title>
    <link href="http://jackycode.github.io/blog/2014/03/27/an-introduction-to-data-science/"/>
    <updated>2014-03-27T14:39:21+08:00</updated>
    <id>http://jackycode.github.io/blog/2014/03/27/an-introduction-to-data-science</id>
    <content type="html"><![CDATA[<p><img src="http://jackycode.github.io/images/artical/artical14.jpg" alt="artical 14" />
<!-- more --></p>

<p><em>“文章原创，转载请注明出处”</em></p>

<hr />

<p>对于这两年渐渐兴起的大数据，云计算之类的技术，相信没有人会陌生。即便不知道这个东西是什么，但也是应该听得耳朵起茧子了。归结原因呢，出现这些技术实在是因为现在的数据越来越多，以前的很多数据分析技术越来越不合适。即便是简单的最小二乘线性回归，直接放到大数据上用，跑起来也是够累的。这时候，各种处理大数据的技术就纷纷崛起了，和之前的云计算相同的就是，大数据也改变了计算机原本的使用方式。</p>

<p>OK，说说数据科学吧。数据科学，Data Science，这个玩意儿最早有一本书，叫做“What is Data Science”，O’Reilly出版的（不得不说其出版了太多太牛太厉害的书籍材料，牛得不需要解释）。数据科学就像是一个综合体，包罗的东西非常多，大致有三个方面。</p>

<h5 id="section">第一，概率统计（数学）</h5>
<p>这个提供了大数据的很多理论基础。大数据的处理技术，需要用到非常之多的概率统计学知识。而要想学好概率统计，那你数学得先学学好才行。简单罗列一下：概率论基础，统计学基础，高等概率论，测度论，高等参数统计，随机过程等等等等。这些内容都是理论基础，要是理论学的不咋样，估计折腾大数据也就是玩玩工具，弄点儿结果出来。话说，如果真没学好理论，能不能把结果解释清楚还需要质疑，更何况自己去设计改进一个技术算法呢。</p>

<p>嗯，说到这，回过头去看看泛函分析吧~</p>

<h5 id="section-1">第二，计算机科学</h5>
<p>这个就提供了大数据处理的工具平台了。那么多的数据，你就是理论学得再牛，没有计算机，你自己手算试试！你说你要处理数据，OK，计算机提供了工具平台，那么你就得学习如何运用这些系统环境吧，那么就得学习<strong>分布式计算机系统环境</strong>，这个主流的有：Hadoop(鼎鼎大名吧); Spark(也听说过吧); Cassandra等等。</p>

<p>好了，环境搞明白了，下面你就得发号施令，让计算机去处理数据了。计算可不是人类，你可以跟他讲普通话，讲英文让他帮你干活。你要想它听你的，你得先学会点它能懂的、能听明白的话。OK，编程语言就降临了。一般来说，用于数据处理的语言有R，Python，Octave（与Matlab类似，只是这个开源免费），Matlab等等。为了使用各个平台，说不得你也得学点Java，C，C++。</p>

<p>写到这边，估计已经头大了，这么多东西，这数据科学是不是恐怖了点，谁能受得了啊！！！是的，包含的东西的确多了点，但是学习起来还是很好玩的，我保证(当然，前提你得跟我一样，看见数学不会头晕)！</p>

<p>当然除了上面提到的，数据科学包含的计算机知识还有很多，像数据结构啊，数据库啊，Mahout这样的架构啊等等。</p>

<h5 id="section-2">第三，专业</h5>
<p>这个也就是应用啦。练就了一身绝世内功（理论基础），找到了一把趁手的绝世神兵（计算机科学），现在需要决定的就是出山之后是想做个武林盟主呢，还是独创一个门派，也就是想把这些东西用到哪些地方去。像生物学，跟统计一结合就成了生物统计，要是再加上点计算机科学，那就成了生物学数据科学。OK，这么说应该是很明白的了。</p>

<hr />

<p>数据科学家Drew Conway绘制过一幅图，很好地描述了我上面所说的东西：</p>

<p><img src="http://jackycode.github.io/images/a14/drew-conway-data-science-venn-diagram.jpg" alt="Venn diagram" /></p>

<p>前几天图灵上出了一本书，叫做“<a href="http://www.ituring.com.cn/book/1268">Software Design 中文版 01</a>”。里面介绍了数据科学的很多基础内容，也给出了很多的学习材料，大部分都是网上的视频教程。此外书中还介绍了一些如何使用Excel，R以及Mahout这些工具的基础知识，有兴趣倒是可以入手一本，作为学习数据科学的开始。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[找回曾经的Kindle]]></title>
    <link href="http://jackycode.github.io/blog/2014/03/24/kindle/"/>
    <updated>2014-03-24T14:15:27+08:00</updated>
    <id>http://jackycode.github.io/blog/2014/03/24/kindle</id>
    <content type="html"><![CDATA[<p><img src="http://jackycode.github.io/images/artical/artical13.jpg" alt="artical 13" />
<!-- more --></p>

<p><em>“文章原创，转载请注明出处”</em></p>

<hr />

<h4 id="ipadkindle">iPad与Kindle</h4>
<hr />

<p>自从买了iPad之后，看书大都就在iPad上进行了。但是最近觉得吧，iPad看时间长点，眼睛会吃不消，所以今天早上就把我抽屉里的Kindle又拿了出来，倒腾了一下。以后还是拿这家伙看书吧，对眼睛来说，这个还是要好点的。</p>

<p>看惯了iPad那炫丽的屏幕，一下看Kindle觉得挺柔和、舒服以及不适应的。只是，好久没动Kindle，里面的东西着实乱了一点。无从下手，不知该如何收拾，所以就直接先卸载了多看系统，然后将Kindle恢复出厂设置了(好狠啊有木有)。重启之后，登录，然后将自己买的一些电子书推送进去，最终干净整齐在我控制之下的Kindle又回来：</p>

<p><img src="http://jackycode.github.io/images/a13/kindle.jpg" alt="kindle" /></p>

<p>说实话，Kindle看书的效果的确没有iPad爽。iPad那叫一个炫丽精致啊！！！不过，那个长时间看也太伤眼睛了一点。这次就决定，以后除了那些注重图片啊之类的书籍杂志，大部分的电子书还是用Kindle看比较好。</p>

<h4 id="kindle">多看与Kindle</h4>
<hr />

<p>这次卸载了多看系统就没打算再装，因为觉得现在Kindle对中文书籍的支持也蛮好的，没必要搞个多看系统了。更何况，<code>iduokan</code>推送服务有限制，好像超过20M就不行了。</p>

<p>只是多看里面有不少的书籍，不安装多看系统，在Kindle上有些是看不了了(除了图灵出的“码农”可以推送到Kindle)。不过想了一想，觉得也没什么。我大部分在多看上下载的书籍都是免费的，iPhone上看看就好了(个人觉得，iPhone上的多看阅读器体验最好)。那些买了觉得很好的书，我大都也买了纸质的，像<a href="http://macshuo.com/">Mac君</a>的<a href="http://www.amazon.cn/dp/B00ID5UV30">‘MacTalk：人生元编程’</a>等等。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Koding：免费VPS服务的初体验]]></title>
    <link href="http://jackycode.github.io/blog/2014/03/21/kodingrecommended/"/>
    <updated>2014-03-21T16:01:44+08:00</updated>
    <id>http://jackycode.github.io/blog/2014/03/21/kodingrecommended</id>
    <content type="html"><![CDATA[<p><img src="http://jackycode.github.io/images/artical/artical12.jpg" alt="aritical 12" />
<!-- more --></p>

<p><em>“文章原创，转载请注明出处”</em></p>

<hr />

<p>昨天晚上在浏览“<a href="http://ztl2004.github.io/MachineLearningWeekly/">机器学习周刊</a>”时，看到了一个提供免费vps服务的网站，免费的虚拟主机平台哎。那么在上面码代码呀干点什么的，不知道效果如何呢？所有抱着尝试的心态就去看了一看。</p>

<h3 id="section">一见惊喜</h3>

<hr />

<p><img src="http://jackycode.github.io/images/a12/1.jpg" alt="a12_1" /></p>

<p>看到这样的网页，顿时觉得~哇。。。高大上有木有。网页做的这么能吸引我的眼球，已经成功了一半了(对于勾引我的使用来说)。然后就开始注册吧，<a href="https://koding.com/R/jackycode">注册地址</a>。使用我给的注册地址，你跟我都会额外获得1G的空间。输好邮箱跟用户名之后，点击<code>Sign up</code>。很快就会收到一封邮件，点击其中的链接，然后设置自己的密码即可(<strong>注意，这个密码将会是你虚拟主机里终端的密码。</strong>)。</p>

<h3 id="section-1">外表</h3>

<hr />

<p>注册登录之后，大致是这个样子的，看起来还是蛮不错的！</p>

<p><img src="http://jackycode.github.io/images/a12/2.jpg" alt="a12_2" /></p>

<p>顶栏的buttons对应的功能分别是：Activity; Teamwork; Terminal; Ace(默认自带的编辑器); Apps(应用中心，现在应用不多，正在从旧版往新版里面转); DevTools(搞个Koding App？); Julia; Bracket。最后两个默认是没有的，是我自己安装的。</p>

<p>第一印象来说，界面比较干净清洁；功能划分也比较清楚。</p>

<h3 id="section-2">玩一下</h3>

<hr />

<p>外表过关了，那么接下来就看看玩起来到底给不给力。话说，Koding官方的介绍文档里面说，支持的功能很多，挑几个试试呗！(在顶栏上面有个<code>?</code>，可以点击查看帮助)</p>

<p>点击进入终端，界面看起来还不错哦：</p>

<p><img src="http://jackycode.github.io/images/a12/3.jpg" alt="a12_3" /></p>

<p>尝试输入一下这些命令：</p>

<p><img src="http://jackycode.github.io/images/a12/4.jpg" alt="a12_4" /></p>

<p>好吧，自带么有R语言。没关系，这不是基于Ubuntu系统的嘛，我自己装一个还不行~</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">sudo cp /etc/apt/sources.list /etc/apt/sourcesbackup.list
</span><span class="line">sudo vim /etc/apt/sources.list</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>然后在sources.list里面添加<code>deb http://cran.stat.ucla.edu/bin/linux/ubuntu quantal/</code>(建议使用国外的镜像，国内的龟速啊！！！)。OK，保存退出vim。输入命令：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">sudo apt-get update
</span><span class="line">sudo apt-get install r-base
</span><span class="line">sudo apt-get install r-base-dev</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>最后再看看：</p>

<p><img src="http://jackycode.github.io/images/a12/5.jpg" alt="a12_5" /></p>

<p>OK了嘛！总算是有了，以后跑点什么烦躁的程序就可以放这了，^_^</p>

<p>玩到现在，就发现这个命令行很疼啊，bash啊~能不能换成zsh啊~试了一下，失败鸟~~算了，这就不错了，我还能要求啥呢！先这么着吧。</p>

<h3 id="section-3">其它</h3>
<hr />
<p>看了一下，Koding也是支持Octopress的，而且配置很简单，跟在自己机器上差不多。具体还有什么，就靠自己去慢慢摸索了。可以肯定的是，这个平台还是很不错的，值得推荐哦！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[记录：最近对博客的一些修改]]></title>
    <link href="http://jackycode.github.io/blog/2014/03/18/record3/"/>
    <updated>2014-03-18T18:52:12+08:00</updated>
    <id>http://jackycode.github.io/blog/2014/03/18/record3</id>
    <content type="html"><![CDATA[<p><img src="http://jackycode.github.io/images/artical/artical11.jpg" alt="aritical 11" />
<!-- more --></p>

<p><em>“文章原创，转载请注明出处”</em></p>

<hr />

<p>前两天发现了一款很不错的主题<code>bootstrap</code>，心中一直很是惦记，终于还是在昨天晚上换了主题。趁着换主题的时间，我也顺便为我的博客添加了一些其它的功能，也设置了一下侧边栏，详情如下。</p>

<h4 id="google-analytics">1. 加入Google Analytics</h4>
<p>对于自己的博客，总是想了解它的现状的。起码我希望知道我的博客有没人来看，所以加了这个功能。</p>

<p>加入这个功能的方法很简单，就是去<a href="http://www.google.com/analytics/">Google Analytics</a>注册个帐号，然后把你的帐号填到<code>_config.yml</code>中对应的位置就OK啦。</p>

<p>当然我就遇到了一个问题，就是填入帐号之后，Google Analytics总是跟踪不到。最后我只能把<code>_config.yml</code>中的帐号注释掉，然后进入<code>source/_includes/head.html</code>中，添加了申请帐号之后给出的脚本。等了大概几分钟，Google Analytics就显示跟踪到了。如果你遇到类似的问题，可以试一下这个方法。</p>

<h4 id="section">2. 加入数学公式支持</h4>

<p>首先启用MathJax，即在<code>source/_includes/custom/footer.html</code>的第一行添加代码：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="c">&lt;!--</span> <span class="nx">mathjax</span> <span class="nx">config</span> <span class="nx">similar</span> <span class="nx">to</span> <span class="nx">math</span><span class="p">.</span><span class="nx">stackexchange</span> <span class="o">--&gt;</span>
</span><span class="line"><span class="o">&lt;</span><span class="nx">script</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text/x-mathjax-config&quot;</span><span class="o">&gt;</span>
</span><span class="line">  <span class="nx">MathJax</span><span class="p">.</span><span class="nx">Hub</span><span class="p">.</span><span class="nx">Config</span><span class="p">({</span>
</span><span class="line">    <span class="nx">jax</span><span class="o">:</span> <span class="p">[</span><span class="s2">&quot;input/TeX&quot;</span><span class="p">,</span> <span class="s2">&quot;output/HTML-CSS&quot;</span><span class="p">],</span>
</span><span class="line">    <span class="nx">tex2jax</span><span class="o">:</span> <span class="p">{</span>
</span><span class="line">    	<span class="nx">inlineMath</span><span class="o">:</span> <span class="p">[</span> <span class="p">[</span><span class="s1">&#39;$&#39;</span><span class="p">,</span> <span class="s1">&#39;$&#39;</span><span class="p">]</span> <span class="p">],</span>
</span><span class="line">    	<span class="nx">displayMath</span><span class="o">:</span> <span class="p">[</span> <span class="p">[</span><span class="s1">&#39;$$&#39;</span><span class="p">,</span> <span class="s1">&#39;$$&#39;</span><span class="p">]],</span>
</span><span class="line">    	<span class="nx">processEscapes</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class="line">    	<span class="nx">skipTags</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;script&#39;</span><span class="p">,</span> <span class="s1">&#39;noscript&#39;</span><span class="p">,</span> <span class="s1">&#39;style&#39;</span><span class="p">,</span> <span class="s1">&#39;textarea&#39;</span><span class="p">,</span> <span class="s1">&#39;pre&#39;</span><span class="p">,</span> <span class="s1">&#39;code&#39;</span><span class="p">]</span> <span class="p">},</span>
</span><span class="line">    	<span class="nx">messageStyle</span><span class="o">:</span> <span class="s2">&quot;none&quot;</span><span class="p">,</span>
</span><span class="line">    	<span class="s2">&quot;HTML-CSS&quot;</span><span class="o">:</span> <span class="p">{</span> <span class="nx">preferredFont</span><span class="o">:</span> <span class="s2">&quot;TeX&quot;</span><span class="p">,</span> <span class="nx">availableFonts</span><span class="o">:</span> <span class="p">[</span><span class="s2">&quot;STIX&quot;</span><span class="p">,</span><span class="s2">&quot;TeX&quot;</span><span class="p">]</span> <span class="p">}</span> <span class="p">});</span>
</span><span class="line"><span class="o">&lt;</span><span class="err">/script&gt;</span>
</span><span class="line"><span class="o">&lt;</span><span class="nx">script</span> <span class="nx">src</span><span class="o">=</span><span class="s2">&quot;http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML&quot;</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text/javascript&quot;</span><span class="o">&gt;&lt;</span><span class="err">/script&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>添加之后，就在博客里面引入了MathJax，那么就可以在markdown里面直接输入公式了，例如：<code>$n^2$</code>就可以解析成$n^2$。</p>

<p>在引入MathJax之后，我更换了解析器，因为自带的<code>rdiscount</code>解析器对于MathJax的细节处理存在一些小问题。更换解析器，可以到<code>Gemfile</code>中添加：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">gem</span> <span class="s1">&#39;kramdown&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 0.13.8&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>然后在终端运行：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">bundle</span> <span class="n">install</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>最后，在<code>_config.yml</code>文件中，将解析器更换：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="ss">markdown</span><span class="p">:</span><span class="n">kramdown</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>使用kramdown，有两点需要注意：</p>

<ol>
  <li>公式无论行内行间都以<code>$$</code>开头；行间公式，必须独占一行；</li>
  <li>代码块开头必须空一行，否则代码高亮会失效。</li>
</ol>

<p>至于其它的，可以去<a href="http://kramdown.rubyforge.org/syntax.html">官方文档</a>查看。</p>

<h4 id="section-1">3. 更换主题</h4>
<p>如何更换主题，在之前的文章里面早已说过。这次就是将主题更换成了<code>bootstrap</code>。</p>

<h4 id="section-2">4. 侧边栏的修改</h4>

<h5 id="a-">a. 关于我</h5>
<p>添加自己的简介，可以在<code>custom/asides/</code>文件夹下添加<code>about.html</code>，然后添加内容：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="html"><span class="line"><span class="nt">&lt;section</span> <span class="na">class=</span><span class="s">&quot;well&quot;</span><span class="nt">&gt;</span>
</span><span class="line">  <span class="nt">&lt;ul</span> <span class="na">id=</span><span class="s">&quot;about&quot;</span> <span class="na">class=</span><span class="s">&#39;nav nav-list&#39;</span><span class="nt">&gt;</span>
</span><span class="line">    <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">&quot;nav-header&quot;</span><span class="nt">&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;/about&quot;</span><span class="nt">&gt;</span>关于我<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
</span><span class="line">      <span class="nt">&lt;p&gt;</span>介绍一下自己<span class="nt">&lt;/p&gt;</span>
</span><span class="line">      <span class="nt">&lt;p&gt;</span>可以留下联系方式，比如微博等等<span class="nt">&lt;/p&gt;</span>
</span><span class="line">  <span class="nt">&lt;/ul&gt;</span>
</span><span class="line"><span class="nt">&lt;/section&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这里我使用了我博客主题的样式，就是里面的<code>class</code>和<code>id</code>的值。这些值需要你根据自己博客的主题样式设定，可以参看其自带的侧边栏的一些网页，比如<code>_includes/asides/recent_post.html</code>。</p>

<h5 id="b-">b. 文章分类</h5>
<p>给自己的文章分类，需要的操作稍微麻烦一些。首先需要在<code>plugins</code>目录下创建<code>category_list_tag.rb</code>文件：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">module</span> <span class="nn">Jekyll</span>
</span><span class="line">  <span class="k">class</span> <span class="nc">CategoryListTag</span> <span class="o">&lt;</span> <span class="ss">Liquid</span><span class="p">:</span><span class="ss">:Tag</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">render</span><span class="p">(</span><span class="n">context</span><span class="p">)</span>
</span><span class="line">      <span class="n">html</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
</span><span class="line">      <span class="n">categories</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="n">registers</span><span class="o">[</span><span class="ss">:site</span><span class="o">].</span><span class="n">categories</span><span class="o">.</span><span class="n">keys</span>
</span><span class="line">      <span class="n">categories</span><span class="o">.</span><span class="n">sort</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">category</span><span class="o">|</span>
</span><span class="line">        <span class="n">posts_in_category</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="n">registers</span><span class="o">[</span><span class="ss">:site</span><span class="o">].</span><span class="n">categories</span><span class="o">[</span><span class="n">category</span><span class="o">].</span><span class="n">size</span>
</span><span class="line">        <span class="n">category_dir</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="n">registers</span><span class="o">[</span><span class="ss">:site</span><span class="o">].</span><span class="n">config</span><span class="o">[</span><span class="s1">&#39;category_dir&#39;</span><span class="o">]</span>
</span><span class="line">        <span class="n">category_url</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">category_dir</span><span class="p">,</span> <span class="n">category</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="sr">/_|\P{Word}/</span><span class="p">,</span> <span class="s1">&#39;-&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="sr">/-{2,}/</span><span class="p">,</span> <span class="s1">&#39;-&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">downcase</span><span class="p">)</span>
</span><span class="line">        <span class="n">html</span> <span class="o">&lt;&lt;</span> <span class="s2">&quot;&lt;li class=&#39;category&#39;&gt;&lt;a href=&#39;/</span><span class="si">#{</span><span class="n">category_url</span><span class="si">}</span><span class="s2">/&#39;&gt;</span><span class="si">#{</span><span class="n">category</span><span class="si">}</span><span class="s2"> (</span><span class="si">#{</span><span class="n">posts_in_category</span><span class="si">}</span><span class="s2">)&lt;/a&gt;&lt;/li&gt;</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class="line">      <span class="k">end</span>
</span><span class="line">      <span class="n">html</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="ss">Liquid</span><span class="p">:</span><span class="ss">:Template</span><span class="o">.</span><span class="n">register_tag</span><span class="p">(</span><span class="s1">&#39;category_list&#39;</span><span class="p">,</span> <span class="ss">Jekyll</span><span class="p">:</span><span class="ss">:CategoryListTag</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>然后新建<code>source/_includes/asides/category_list.html</code>：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="html"><span class="line"><span class="nt">&lt;section</span> <span class="na">class=</span><span class="s">&quot;well&quot;</span><span class="nt">&gt;</span>
</span><span class="line">  <span class="nt">&lt;ul</span> <span class="na">id=</span><span class="s">&quot;category_list&quot;</span> <span class="na">class=</span><span class="s">&quot;nav nav-list&quot;</span><span class="nt">&gt;</span>
</span><span class="line">    <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">&quot;nav-header&quot;</span><span class="nt">&gt;</span>文章分类<span class="nt">&lt;/li&gt;</span>
</span><span class="line">      <span class="nt">&lt;li</span> <span class="na">id=</span><span class="s">&quot;categories&quot;</span><span class="nt">&gt;</span>% category_list %}<span class="nt">&lt;/li&gt;</span>
</span><span class="line">  <span class="nt">&lt;/ul&gt;</span>
</span><span class="line"><span class="nt">&lt;/section&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这样就可以了。</p>

<h5 id="c-">c. 推荐站点</h5>
<p>跟添加<strong>关于我</strong>类似，可以直接在<code>custom/asides/</code>目录下添加<code>links.html</code>：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="html"><span class="line"><span class="nt">&lt;section</span> <span class="na">class=</span><span class="s">&quot;well&quot;</span><span class="nt">&gt;</span>
</span><span class="line">  <span class="nt">&lt;ul</span> <span class="na">id=</span><span class="s">&quot;links&quot;</span> <span class="na">class=</span><span class="s">&quot;nav nav-list&quot;</span><span class="nt">&gt;</span>
</span><span class="line">    <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">&quot;nav-header&quot;</span><span class="nt">&gt;</span>推荐站点<span class="nt">&lt;/li&gt;</span>
</span><span class="line">    <span class="nt">&lt;li&gt;</span>
</span><span class="line">      <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://macshuo.com/&quot;</span><span class="nt">&gt;</span>MacTalk-池建强的随想录<span class="nt">&lt;/a&gt;</span>
</span><span class="line">    <span class="nt">&lt;/li&gt;</span>
</span><span class="line">    <span class="nt">&lt;li&gt;</span>
</span><span class="line">      <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://yihui.name/&quot;</span><span class="nt">&gt;</span>Yihui Xie<span class="nt">&lt;/a&gt;</span>
</span><span class="line">    <span class="nt">&lt;/li&gt;</span>
</span><span class="line"><span class="nt">&lt;/ul&gt;</span>
</span><span class="line"><span class="nt">&lt;/section&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h5 id="d-license">d. License</h5>
<p>与推荐站点一样，可以在<code>custom/asides/</code>目录下添加<code>license.html</code>。然后到<a href="http://creativecommons.org/licenses/by-nc-sa/2.5/cn/">署名-非商业性使用-相同方式共享 2.5 中国大陆</a>网页获取license的网页代码。</p>

<p><strong>建好这些文件后，别忘了在<code>_config.yml</code>中修改侧边栏项：</strong></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="html"><span class="line">default_asides: [custom/asides/about.html, asides/category_list.html]
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="section-3">5. 其它一些修改</h4>

<ol>
  <li>将博客大部分文字换成了中文；</li>
  <li>去除了之前的Home页；</li>
  <li>修改各篇文章内部的图片大小，统一使用8cm*8cm；</li>
  <li>将所有的头部的导图长度加长。</li>
</ol>

<hr />

<h4 id="section-4">参考资源</h4>

<ol>
  <li>
    <p><a href="http://www.yanjiuyanjiu.com/blog/20130402/">研究研究: 我的Octopress配置</a></p>
  </li>
  <li>
    <p><a href="http://www.cnblogs.com/oec2003/archive/2013/05/31/3109577.html">冯威的学习专栏: Octopress博客设置</a></p>
  </li>
  <li>
    <p><a href="http://shanewfx.github.io/blog/2012/08/13/improve-blog-theme/">思考的轨迹: Octopress主题改造</a></p>
  </li>
  <li>
    <p><a href="https://www.google.com.hk/search?newwindow=1&amp;safe=strict&amp;espv=210&amp;es_sm=119&amp;q=octopress%E6%95%99%E7%A8%8B&amp;oq=octopress%E6%95%99%E7%A8%8B&amp;gs_l=serp.12..35i39.5308.6241.0.8806.10.8.0.0.0.1.237.921.0j3j2.5.0....0...1c.1j4.35.serp..6.4.789.PMKW2jRRdPI">。。。</a></p>
  </li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[R语言记录7：相关分析]]></title>
    <link href="http://jackycode.github.io/blog/2014/03/17/rseries7/"/>
    <updated>2014-03-17T16:46:47+08:00</updated>
    <id>http://jackycode.github.io/blog/2014/03/17/rseries7</id>
    <content type="html"><![CDATA[<p><img src="http://jackycode.github.io/images/artical/artical10.jpg" alt="aritical 10" />
<!-- more --></p>

<p><em>“文章原创，转载请注明出处”</em></p>

<hr />

<p>变量之间的关系，大致可分为两种：<em>函数关系</em>和<em>相关关系</em>。</p>

<p>函数关系，简单来说就是可以将变量之间的关系用方程(其实就是函数)来描述：$y=f(x)$，处理这种关系对应的统计方法就是<strong><em>回归分析</em></strong>。</p>

<p>相关关系，就是指变量之间存在不完全确定的依赖关系，其数值不能够使用函数表示出来，这个对应的就是<strong><em>相关分析</em></strong>。</p>

<p>判断变量之间是否存在相关关系，最直接简单的方法就是画出两个变量之间的散点图。</p>

<h4 id="section">1. 散点图</h4>
<p>我们使用<code>cars</code>数据集中的数据进行演示,<code>cars</code>数据集中包含了汽车速度与制动距离的数据，显然直观感觉这两个变量之间肯定存在相关关系。画个散点图看看：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Correlation_Analysis.r</span><a href="https://github.com/JackyCode/RSeries">link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="r"><span class="line"><span class="o">&gt;</span> head<span class="p">(</span>cars<span class="p">)</span>
</span><span class="line">  speed dist
</span><span class="line"><span class="m">1</span>     <span class="m">4</span>    <span class="m">2</span>
</span><span class="line"><span class="m">2</span>     <span class="m">4</span>   <span class="m">10</span>
</span><span class="line"><span class="m">3</span>     <span class="m">7</span>    <span class="m">4</span>
</span><span class="line"><span class="m">4</span>     <span class="m">7</span>   <span class="m">22</span>
</span><span class="line"><span class="m">5</span>     <span class="m">8</span>   <span class="m">16</span>
</span><span class="line"><span class="m">6</span>     <span class="m">9</span>   <span class="m">10</span>
</span><span class="line"><span class="o">&gt;</span> with <span class="p">(</span>cars<span class="p">,</span> <span class="p">{</span>
</span><span class="line"><span class="o">+</span> 	plot<span class="p">(</span>speed<span class="p">,</span> dist<span class="p">)</span>
</span><span class="line"><span class="o">+</span> <span class="p">})</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>得到如下图形：</p>

<p><img src="http://jackycode.github.io/images/RSeries7/scatter.jpg" alt="scatter" /></p>

<p>从散点图看，汽车速度与其制动距离存在相关关系。但是，仅仅从图像来看，我们只能得到大概是否相关，而不能给出一个确切的描述。那么就希望能够找到一个方法，能够描述变量之间有多相关，程度有多大。</p>

<h4 id="section-1">2. 相关的种类</h4>
<p>根据相关程度，我们可以给相关进行分类：完全相关，不完全相关，完全不相关；而根据相关方向的不同，又可以分类：正相关(一个变大另一个也变大)，负相关。那么怎么用数学的方式去描述这些种类呢，那就需要用到相关系数。</p>

<h5 id="section-2">(1). 相关系数</h5>
<p>相关系数的符号用来代表正负相关($+$ -&gt; 正；$-$ -&gt; 负)，其值的大小用来描述相关程度的大小(0~1:完全不相关~完全相关)。相关系数的定义有很多，常用的有Person相关系数、Spearman相关系数等等。这里给出最常用的Person相关系数的计算方法：</p>

<script type="math/tex; mode=display">\gamma=\frac{\sum_{i=1}^{n}{(x_i-\overline{x})(y_i-\overline{y})}}{\sqrt{\sum_{i=1}^{n}{(x_i-\overline{x})^2}\sum_{i=1}^{n}{(y_i-\overline{y})^2}}}</script>

<p>当样本个数充分大时，样本相关系数可以作为总体相关系数的估计。</p>

<p>在R中，可以使用<code>cor</code>函数来得到变量间的相关系数矩阵：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Correlation_Analysis.r</span><a href="https://github.com/JackyCode/RSeries">link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="r"><span class="line"><span class="o">&gt;</span> cor<span class="p">(</span>cars<span class="p">)</span>
</span><span class="line">          speed      dist
</span><span class="line">speed <span class="m">1.0000000</span> <span class="m">0.8068949</span>
</span><span class="line">dist  <span class="m">0.8068949</span> <span class="m">1.0000000</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>可以看到，$corr(speed, dist)=0.8068949$，说明汽车速度与其制动距离之间存在较强的正相关关系。</p>

<h6 id="section-3">注：</h6>
<p>可以指定<code>cor</code>的参数得到不同的相关系数：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Correlation_Analysis.r</span><a href="https://github.com/JackyCode/RSeries">link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="r"><span class="line"><span class="o">&gt;</span> cor<span class="p">(</span>cars<span class="p">,</span> method<span class="o">=</span><span class="s">&#39;spearman&#39;</span><span class="p">)</span>
</span><span class="line">          speed      dist
</span><span class="line">speed <span class="m">1.0000000</span> <span class="m">0.8303568</span>
</span><span class="line">dist  <span class="m">0.8303568</span> <span class="m">1.0000000</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h5 id="section-4">(2). 相关性的显著性检验</h5>
<p>得到了两个变量之间的相关系数，那就需要检验，得到的结果是否能够通过显著性检验。即相关性到底显著与否。</p>

<p>这里需要建立假设检验：$H_0:$ 变量X和Y不相关；那么可以构造检验统计量如下：</p>

<script type="math/tex; mode=display">T = \frac{\gamma(X,Y)\sqrt{n-2}}{\sqrt{1-\gamma(X,Y)^2}}</script>

<p>在零假设成立的条件下，<script type="math/tex">T \sim t(n-2)</script>。那么若有$T &gt; t_{1-\alpha}(n-2)$，则拒绝原假设，说明变量X和Y存在显著的相关关系。</p>

<h6 id="section-5">注：这里提到的内容可以到参数统计的书籍上寻找。</h6>

<p>在R中，我们可以使用<code>cor.test</code>函数很轻松地对此进行检验：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Correlation_Analysis.r</span><a href="https://github.com/JackyCode/RSeries">link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="r"><span class="line"><span class="o">&gt;</span> with<span class="p">(</span>cars<span class="p">,</span> <span class="p">{</span>
</span><span class="line"><span class="o">+</span> 	cor.test<span class="p">(</span>speed<span class="p">,</span> dist<span class="p">)</span>
</span><span class="line"><span class="o">+</span> <span class="p">})</span>
</span><span class="line">
</span><span class="line">	Pearson<span class="s">&#39;</span><span class="err">s product-moment correlation</span>
</span><span class="line">
</span><span class="line">data<span class="o">:</span>  speed and dist
</span><span class="line">t <span class="o">=</span> <span class="m">9.464</span><span class="p">,</span> df <span class="o">=</span> <span class="m">48</span><span class="p">,</span> p<span class="o">-</span>value <span class="o">=</span> <span class="m">1.49e-12</span>
</span><span class="line">alternative hypothesis<span class="o">:</span> true correlation is not equal to <span class="m">0</span>
</span><span class="line"><span class="m">95</span> percent confidence interval<span class="o">:</span>
</span><span class="line"> <span class="m">0.6816422</span> <span class="m">0.8862036</span>
</span><span class="line">sample estimates<span class="o">:</span>
</span><span class="line">      cor
</span><span class="line"><span class="m">0.8068949</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>从结果可以看到，$t=9.464$这个不容易看出来结果，因为还需要查表。我们可以选择直接看$p$值：1.49e-12，比0.05小太多了。故而拒绝原假设，认为汽车速度与制动距离存在高度相关关系。</p>

<h6 id="spearman">注：这里如何修改，使得其使用spearman相关系数呢？</h6>

<p>到此，就将相关分析的大致内容进行了阐述。但是，相关分析也还有很多其它内容，比如偏相关等等。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[R语言记录6：描述统计2]]></title>
    <link href="http://jackycode.github.io/blog/2014/03/14/rseries6/"/>
    <updated>2014-03-14T16:31:26+08:00</updated>
    <id>http://jackycode.github.io/blog/2014/03/14/rseries6</id>
    <content type="html"><![CDATA[<p><img src="http://jackycode.github.io/images/artical/artical9.jpg" alt="aritical 9" />
<!-- more --></p>

<p><em>“文章原创，转载请注明出处”</em></p>

<hr />

<h4 id="section">二. 可视化</h4>
<p>开头我们就说过，描述性统计分析包括计算统计量的值，也可以进行制表画图。首先我们看看如何在R中绘制列联表：</p>

<h5 id="section-1">1. 频数表和列联表</h5>
<p>如果数据集中对应的变量都是定性变量，即是上一节中我们所说的分类数据（还记得分组数据的描述性统计量的计算吗）。对于这种数据，作图很多时候并没有太大的意义。一般，我们会采取绘制列联表的方式去描述数据。</p>

<p>在数据集<code>mtcars</code>中，有不少定性变量，这里取出其中的<code>am</code>,<code>gear</code>和<code>carb</code>作演示。首先看看一维的情况：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>descriptvie_statistics2.R</span><a href="https://github.com/JackyCode/RSeries">link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
</pre></td><td class="code"><pre><code class="r"><span class="line"><span class="o">&gt;</span> dataSub <span class="o">&lt;-</span> data.frame<span class="p">(</span>am<span class="o">=</span>mtcars<span class="o">$</span>am<span class="p">,</span> gear<span class="o">=</span>mtcars<span class="o">$</span>gear<span class="p">,</span> carb<span class="o">=</span>mtcars<span class="o">$</span>carb<span class="p">)</span>
</span><span class="line"><span class="o">&gt;</span> head<span class="p">(</span>dataSub<span class="p">)</span>
</span><span class="line">  am gear carb
</span><span class="line"><span class="m">1</span>  <span class="m">1</span>    <span class="m">4</span>    <span class="m">4</span>
</span><span class="line"><span class="m">2</span>  <span class="m">1</span>    <span class="m">4</span>    <span class="m">4</span>
</span><span class="line"><span class="m">3</span>  <span class="m">1</span>    <span class="m">4</span>    <span class="m">1</span>
</span><span class="line"><span class="m">4</span>  <span class="m">0</span>    <span class="m">3</span>    <span class="m">1</span>
</span><span class="line"><span class="m">5</span>  <span class="m">0</span>    <span class="m">3</span>    <span class="m">2</span>
</span><span class="line"><span class="m">6</span>  <span class="m">0</span>    <span class="m">3</span>    <span class="m">1</span>
</span><span class="line"><span class="o">&gt;</span> with<span class="p">(</span>dataSub<span class="p">,</span> <span class="p">{</span>
</span><span class="line"><span class="o">+</span> 	mytable <span class="o">&lt;-</span> list<span class="p">(</span>table<span class="p">(</span>am<span class="p">),</span> table<span class="p">(</span>gear<span class="p">),</span> table<span class="p">(</span>carb<span class="p">))</span>
</span><span class="line"><span class="o">+</span> 	mytable
</span><span class="line"><span class="o">+</span> <span class="p">})</span>
</span><span class="line"><span class="p">[[</span><span class="m">1</span><span class="p">]]</span>
</span><span class="line">am
</span><span class="line"> <span class="m">0</span>  <span class="m">1</span>
</span><span class="line"><span class="m">19</span> <span class="m">13</span>
</span><span class="line">
</span><span class="line"><span class="p">[[</span><span class="m">2</span><span class="p">]]</span>
</span><span class="line">gear
</span><span class="line"> <span class="m">3</span>  <span class="m">4</span>  <span class="m">5</span>
</span><span class="line"><span class="m">15</span> <span class="m">12</span>  <span class="m">5</span>
</span><span class="line">
</span><span class="line"><span class="p">[[</span><span class="m">3</span><span class="p">]]</span>
</span><span class="line">carb
</span><span class="line"> <span class="m">1</span>  <span class="m">2</span>  <span class="m">3</span>  <span class="m">4</span>  <span class="m">6</span>  <span class="m">8</span>
</span><span class="line"> <span class="m">7</span> <span class="m">10</span>  <span class="m">3</span> <span class="m">10</span>  <span class="m">1</span>  <span class="m">1</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>一维的情况，其实就是统计频数，把每个类别各自的频数计算出来就可以了。像<code>am</code>变量，其结果告诉我们，用自动挡的有19人，用手动挡的是13人(0 -&gt; 19; 1 -&gt; 13)。再来看看二维的：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>descriptvie_statistics2.R</span><a href="https://github.com/JackyCode/RSeries">link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class="r"><span class="line"><span class="o">&gt;</span> with<span class="p">(</span>dataSub<span class="p">,</span> <span class="p">{</span>
</span><span class="line"><span class="o">+</span> 	mytable2 <span class="o">&lt;-</span> list<span class="p">(</span>table<span class="p">(</span>am<span class="p">,</span> carb<span class="p">),</span> table<span class="p">(</span>carb<span class="p">,</span> am<span class="p">))</span>
</span><span class="line"><span class="o">+</span> 	mytable2
</span><span class="line"><span class="o">+</span> <span class="p">})</span>
</span><span class="line"><span class="p">[[</span><span class="m">1</span><span class="p">]]</span>
</span><span class="line">   carb
</span><span class="line">am  <span class="m">1</span> <span class="m">2</span> <span class="m">3</span> <span class="m">4</span> <span class="m">6</span> <span class="m">8</span>
</span><span class="line">  <span class="m">0</span> <span class="m">3</span> <span class="m">6</span> <span class="m">3</span> <span class="m">7</span> <span class="m">0</span> <span class="m">0</span>
</span><span class="line">  <span class="m">1</span> <span class="m">4</span> <span class="m">4</span> <span class="m">0</span> <span class="m">3</span> <span class="m">1</span> <span class="m">1</span>
</span><span class="line">
</span><span class="line"><span class="p">[[</span><span class="m">2</span><span class="p">]]</span>
</span><span class="line">    am
</span><span class="line">carb <span class="m">0</span> <span class="m">1</span>
</span><span class="line">   <span class="m">1</span> <span class="m">3</span> <span class="m">4</span>
</span><span class="line">   <span class="m">2</span> <span class="m">6</span> <span class="m">4</span>
</span><span class="line">   <span class="m">3</span> <span class="m">3</span> <span class="m">0</span>
</span><span class="line">   <span class="m">4</span> <span class="m">7</span> <span class="m">3</span>
</span><span class="line">   <span class="m">6</span> <span class="m">0</span> <span class="m">1</span>
</span><span class="line">   <span class="m">8</span> <span class="m">0</span> <span class="m">1</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>可以看到，对于二维来说，绘制的方法与一维类似。但是，这里有个可以深入的东西，那就是边际列表。也就是利用二维列联表得到一维列联表：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>descriptvie_statistics2.R</span><a href="https://github.com/JackyCode/RSeries">link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="r"><span class="line"><span class="o">&gt;</span> with<span class="p">(</span>dataSub<span class="p">,</span> <span class="p">{</span>
</span><span class="line"><span class="o">+</span> 	mytable2 <span class="o">&lt;-</span> list<span class="p">(</span>table<span class="p">(</span>am<span class="p">,</span> carb<span class="p">),</span> table<span class="p">(</span>carb<span class="p">,</span> am<span class="p">))</span>
</span><span class="line"><span class="o">+</span> 	mytableConvert <span class="o">&lt;-</span> list<span class="p">(</span>margin.table<span class="p">(</span>mytable2<span class="p">[[</span><span class="m">1</span><span class="p">]],</span> <span class="m">1</span><span class="p">),</span>
</span><span class="line"><span class="o">+</span> 		margin.table<span class="p">(</span>mytable2<span class="p">[[</span><span class="m">1</span><span class="p">]],</span> <span class="m">2</span><span class="p">))</span> <span class="c1"># 选项1和2控制按行和按列</span>
</span><span class="line"><span class="o">+</span> 	mytableConvert
</span><span class="line"><span class="o">+</span> <span class="p">})</span>
</span><span class="line"><span class="p">[[</span><span class="m">1</span><span class="p">]]</span>
</span><span class="line">am
</span><span class="line"> <span class="m">0</span>  <span class="m">1</span>
</span><span class="line"><span class="m">19</span> <span class="m">13</span>
</span><span class="line">
</span><span class="line"><span class="p">[[</span><span class="m">2</span><span class="p">]]</span>
</span><span class="line">carb
</span><span class="line"> <span class="m">1</span>  <span class="m">2</span>  <span class="m">3</span>  <span class="m">4</span>  <span class="m">6</span>  <span class="m">8</span>
</span><span class="line"> <span class="m">7</span> <span class="m">10</span>  <span class="m">3</span> <span class="m">10</span>  <span class="m">1</span>  <span class="m">1</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>可以看到，使用<code>margin.table</code>函数可以很容易得到一个列表的边际列表。下面看看三维的情况：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>descriptvie_statistics2.R</span><a href="https://github.com/JackyCode/RSeries">link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
</pre></td><td class="code"><pre><code class="r"><span class="line"><span class="o">&gt;</span> with<span class="p">(</span>dataSub<span class="p">,</span> <span class="p">{</span>
</span><span class="line"><span class="o">+</span> 	mytable3 <span class="o">&lt;-</span> table<span class="p">(</span>am<span class="p">,</span> carb<span class="p">,</span> gear<span class="p">)</span>
</span><span class="line"><span class="o">+</span> 	mytable3
</span><span class="line"><span class="o">+</span> <span class="p">})</span>
</span><span class="line"><span class="p">,</span> <span class="p">,</span> gear <span class="o">=</span> <span class="m">3</span>
</span><span class="line">
</span><span class="line">   carb
</span><span class="line">am  <span class="m">1</span> <span class="m">2</span> <span class="m">3</span> <span class="m">4</span> <span class="m">6</span> <span class="m">8</span>
</span><span class="line">  <span class="m">0</span> <span class="m">3</span> <span class="m">4</span> <span class="m">3</span> <span class="m">5</span> <span class="m">0</span> <span class="m">0</span>
</span><span class="line">  <span class="m">1</span> <span class="m">0</span> <span class="m">0</span> <span class="m">0</span> <span class="m">0</span> <span class="m">0</span> <span class="m">0</span>
</span><span class="line">
</span><span class="line"><span class="p">,</span> <span class="p">,</span> gear <span class="o">=</span> <span class="m">4</span>
</span><span class="line">
</span><span class="line">   carb
</span><span class="line">am  <span class="m">1</span> <span class="m">2</span> <span class="m">3</span> <span class="m">4</span> <span class="m">6</span> <span class="m">8</span>
</span><span class="line">  <span class="m">0</span> <span class="m">0</span> <span class="m">2</span> <span class="m">0</span> <span class="m">2</span> <span class="m">0</span> <span class="m">0</span>
</span><span class="line">  <span class="m">1</span> <span class="m">4</span> <span class="m">2</span> <span class="m">0</span> <span class="m">2</span> <span class="m">0</span> <span class="m">0</span>
</span><span class="line">
</span><span class="line"><span class="p">,</span> <span class="p">,</span> gear <span class="o">=</span> <span class="m">5</span>
</span><span class="line">
</span><span class="line">   carb
</span><span class="line">am  <span class="m">1</span> <span class="m">2</span> <span class="m">3</span> <span class="m">4</span> <span class="m">6</span> <span class="m">8</span>
</span><span class="line">  <span class="m">0</span> <span class="m">0</span> <span class="m">0</span> <span class="m">0</span> <span class="m">0</span> <span class="m">0</span> <span class="m">0</span>
</span><span class="line">  <span class="m">1</span> <span class="m">0</span> <span class="m">2</span> <span class="m">0</span> <span class="m">1</span> <span class="m">1</span> <span class="m">1</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>其实<code>table</code>函数可以处理三维以及三维以上的列联表，你可以自己试一试。现在我们已经能够使用R轻松地绘制出频数表了，但很多时候，我们希望得到的是频率表，那应该怎么绘制呢？试试这个函数<code>prop.table()</code>：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>descriptvie_statistics2.R</span><a href="https://github.com/JackyCode/RSeries">link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="r"><span class="line"><span class="o">&gt;</span> with<span class="p">(</span>dataSub<span class="p">,</span> <span class="p">{</span>
</span><span class="line"><span class="o">+</span> 	mytable <span class="o">&lt;-</span> list<span class="p">(</span>table<span class="p">(</span>am<span class="p">),</span> table<span class="p">(</span>gear<span class="p">),</span> table<span class="p">(</span>carb<span class="p">))</span>
</span><span class="line"><span class="o">+</span> 	prop.table<span class="p">(</span>mytable<span class="p">[[</span><span class="m">1</span><span class="p">]])</span>
</span><span class="line"><span class="o">+</span> <span class="p">})</span>
</span><span class="line">am
</span><span class="line">      <span class="m">0</span>       <span class="m">1</span>
</span><span class="line"><span class="m">0.59375</span> <span class="m">0.40625</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>二维以及以上都可以这么处理。那么，如果需要求的是全局相对频率列联表呢？想想，那不就是频数除以总数嘛，直接一句代码不就搞定了嘛：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>descriptvie_statistics2.R</span><a href="https://github.com/JackyCode/RSeries">link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="r"><span class="line"><span class="o">&gt;</span> with<span class="p">(</span>dataSub<span class="p">,</span> <span class="p">{</span>
</span><span class="line"><span class="o">+</span> 	mytable2 <span class="o">&lt;-</span> list<span class="p">(</span>table<span class="p">(</span>am<span class="p">,</span> carb<span class="p">),</span> table<span class="p">(</span>carb<span class="p">,</span> am<span class="p">))</span>
</span><span class="line"><span class="o">+</span> 	mytable2<span class="p">[[</span><span class="m">1</span><span class="p">]]</span><span class="o">/</span>sum<span class="p">(</span>mytable2<span class="p">[[</span><span class="m">1</span><span class="p">]])</span>
</span><span class="line"><span class="o">+</span> <span class="p">})</span>
</span><span class="line">   carb
</span><span class="line">am        <span class="m">1</span>       <span class="m">2</span>       <span class="m">3</span>       <span class="m">4</span>       <span class="m">6</span>       <span class="m">8</span>
</span><span class="line">  <span class="m">0</span> <span class="m">0.09375</span> <span class="m">0.18750</span> <span class="m">0.09375</span> <span class="m">0.21875</span> <span class="m">0.00000</span> <span class="m">0.00000</span>
</span><span class="line">  <span class="m">1</span> <span class="m">0.12500</span> <span class="m">0.12500</span> <span class="m">0.00000</span> <span class="m">0.09375</span> <span class="m">0.03125</span> <span class="m">0.03125</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h5 id="section-2">2. 图形</h5>
<p>常用的图形一般有：直方图，散点图，框须图等等。我们一个一个来看一下：</p>

<h6 id="a-">a. 直方图</h6>
<p>我们使用<code>mtcars$mpg</code>数据作演示，首先你可以检查一下<code>mpg</code>的范围，然后确定频数直方图的分割大小(使用参数<code>break</code>设定)，这里我们不设定，让R自动生成：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>descriptvie_statistics2.R</span><a href="https://github.com/JackyCode/RSeries">link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="r"><span class="line"><span class="o">&gt;</span> range<span class="p">(</span>mtcars<span class="o">$</span>mpg<span class="p">)</span>
</span><span class="line"><span class="p">[</span><span class="m">1</span><span class="p">]</span> <span class="m">10.4</span> <span class="m">33.9</span>
</span><span class="line"><span class="o">&gt;</span> hist<span class="p">(</span>mtcars<span class="o">$</span>mpg<span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>得到如下的图形：</p>

<p><img src="http://jackycode.github.io/images/RSeries6/Histogram1.jpg" alt="Histogram1" /></p>

<p>其实更多地，我们希望得到频率直方图，并且给出其核密度曲线以及正态密度曲线。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>descriptvie_statistics2.R</span><a href="https://github.com/JackyCode/RSeries">link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="r"><span class="line"><span class="o">&gt;</span> hist<span class="p">(</span>mtcars<span class="o">$</span>mpg<span class="p">,</span> probability<span class="o">=</span><span class="kc">TRUE</span><span class="p">)</span>
</span><span class="line"><span class="o">&gt;</span> dens <span class="o">&lt;-</span> density<span class="p">(</span>mtcars<span class="o">$</span>mpg<span class="p">)</span>
</span><span class="line"><span class="o">&gt;</span> mean <span class="o">&lt;-</span> mean<span class="p">(</span>mtcars<span class="o">$</span>mpg<span class="p">)</span>
</span><span class="line"><span class="o">&gt;</span> sd <span class="o">&lt;-</span> sd<span class="p">(</span>mtcars<span class="o">$</span>mpg<span class="p">)</span>
</span><span class="line"><span class="o">&gt;</span> lines<span class="p">(</span>dens<span class="p">,</span> col<span class="o">=</span><span class="s">&#39;red&#39;</span><span class="p">,</span> lty<span class="o">=</span><span class="m">2</span><span class="p">)</span>
</span><span class="line"><span class="o">&gt;</span> curve<span class="p">(</span>dnorm<span class="p">(</span>x<span class="p">,</span> mean<span class="p">,</span> sd<span class="p">),</span> col<span class="o">=</span><span class="s">&#39;blue&#39;</span><span class="p">,</span> add<span class="o">=</span><span class="kc">TRUE</span><span class="p">)</span>
</span><span class="line"><span class="o">&gt;</span> legend<span class="p">(</span><span class="s">&quot;topright&quot;</span><span class="p">,</span> inset <span class="o">=</span> <span class="m">0.05</span><span class="p">,</span> c<span class="p">(</span><span class="s">&quot;density&quot;</span><span class="p">,</span> <span class="s">&quot;normal&quot;</span><span class="p">),</span>
</span><span class="line"><span class="o">+</span>   lty <span class="o">=</span> c<span class="p">(</span><span class="m">2</span><span class="p">,</span> <span class="m">1</span><span class="p">),</span> col <span class="o">=</span> c<span class="p">(</span><span class="s">&quot;red&quot;</span><span class="p">,</span> <span class="s">&quot;blue&quot;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>得到图形如下：</p>

<p><img src="http://jackycode.github.io/images/RSeries6/Histogram2.jpg" alt="Histogram2" /></p>

<h6 id="b-">b. 散点图</h6>
<p>我们可以使用<code>plot</code>函数直接画出散点图，此外，我这里还给散点图加上了一条拟合曲线。<code>lowess()</code>函数可以用特殊的曲线对二维数据进行非线性拟合(多维的情况需要使用<code>loess()</code>函数)。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>descriptvie_statistics2.R</span><a href="https://github.com/JackyCode/RSeries">link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="r"><span class="line"><span class="o">&gt;</span> plot<span class="p">(</span>mtcars<span class="o">$</span>disp <span class="o">~</span> mtcars<span class="o">$</span>mpg<span class="p">)</span>
</span><span class="line"><span class="o">&gt;</span> lines<span class="p">(</span>lowess<span class="p">(</span>mtcars<span class="o">$</span>mpg<span class="p">,</span> mtcars<span class="o">$</span>disp<span class="p">),</span> lwd<span class="o">=</span><span class="m">2</span><span class="p">,</span> col<span class="o">=</span><span class="s">&#39;blue&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><img src="http://jackycode.github.io/images/RSeries6/Scatter.jpg" alt="Scatter" /></p>

<h6 id="c-">c. 框须图</h6>
<p>框须图,也称为盒形图、箱线图。其通过绘制连续型变量的五数(最小最大值，中位数以及上下侧四分位数)来描述变量的分布。可以使用<code>boxplot</code>函数来得到：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>descriptvie_statistics2.R</span><a href="https://github.com/JackyCode/RSeries">link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="r"><span class="line"><span class="o">&gt;</span> boxplot<span class="p">(</span>mtcars<span class="o">$</span>mpg<span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><img src="http://jackycode.github.io/images/RSeries6/box1.jpg" alt="box1" /></p>

<p>也可以使用<code>boxplot</code>函数展示分组变量，例如这里<code>mtcars</code>中有<code>am</code>变量，可以使用该函数画出不同的<code>am</code>值对应的箱线图：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>descriptvie_statistics2.R</span><a href="https://github.com/JackyCode/RSeries">link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="r"><span class="line"><span class="o">&gt;</span> boxplot<span class="p">(</span>mpg <span class="o">~</span> am<span class="p">,</span> data<span class="o">=</span>mtcars<span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><img src="http://jackycode.github.io/images/RSeries6/box2.jpg" alt="box2" /></p>

<p>到这边，就基本上把描述统计的一些主体内容说了一下。不过，描述统计并不是只有这点东西，此外，我讲的这些作图啊，制表啊其实都没有深入地去讲。而且对于R语言的研究学习来说，我上面做的图还太简单了，没有给图起名称，也没有横纵轴的名称等等。这些在R语言的帮助文档里有详细的讲解说明，有兴趣的话可以看看。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[R语言记录5：描述统计1]]></title>
    <link href="http://jackycode.github.io/blog/2014/03/12/rseries5/"/>
    <updated>2014-03-12T15:57:02+08:00</updated>
    <id>http://jackycode.github.io/blog/2014/03/12/rseries5</id>
    <content type="html"><![CDATA[<p><img src="http://jackycode.github.io/images/artical/artical8.jpg" alt="aritical 8" />
<!-- more --></p>

<p><em>“文章原创，转载请注明出处”</em></p>

<hr />

<p>数据的统计分析分为：<strong><em>描述性统计分析</em></strong>和<strong><em>统计推断</em></strong>两个部分。描述性统计分析，一般又称为探索性统计分析。简单来讲，描述统计就是用简单直观的方法给出数据的一种易于理解的描述，比如说散点图，频率直方图；又或者计算简单的统计量，如均值方差等等。下面先来看看如何计算常用的描述性统计量：</p>

<h4 id="section">一. 描述性统计量</h4>

<h5 id="section-1">1. 单组数据</h5>
<p>常用的描述性统计量大致有这么几个：</p>

<h6 id="n">1. 样本大小。即样本的个数，一般用$n$表示；</h6>

<h6 id="overlinexfrac1nsumi1nxi">2. 样本均值。即$\overline{X}=\frac{1}{n}\sum_{i=1}^{n}{X_i}$；</h6>

<h6 id="s2frac1nsumi1nxi-overlinex2">3. 样本方差。即$s^2=\frac{1}{n}\sum_{i=1}^{n}{(X_i-\overline{X})^2}$;</h6>

<h6 id="section-2">4. 样本分位数、偏度、峰度等等。</h6>

<p>在R语言中，<code>summary()</code>函数可以得到样本数据的最小值、最大值、四分位数以及均值。这里我们使用R语言自带的数据集<code>mtcars</code>作演示，你可以使用我们之前教过的方法先看看<code>mtcars</code>中的数据长什么样子(<code>head</code>函数，<code>??</code>得到帮助)。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>descriptive_statistics1.R</span><a href="https://github.com/JackyCode/RSeries">link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="r"><span class="line"><span class="o">&gt;</span> str<span class="p">(</span>mtcars<span class="p">)</span> <span class="c1"># 可以查看数据集的一些基本信息</span>
</span><span class="line"><span class="s">&#39;data.frame&#39;</span><span class="o">:</span>	<span class="m">32</span> obs. of  <span class="m">11</span> variables<span class="o">:</span>
</span><span class="line"> <span class="o">$</span> mpg <span class="o">:</span> num  <span class="m">21</span> <span class="m">21</span> <span class="m">22.8</span> <span class="m">21.4</span> <span class="m">18.7</span> <span class="m">18.1</span> <span class="m">14.3</span> <span class="m">24.4</span> <span class="m">22.8</span> <span class="m">19.2</span> <span class="kc">...</span>
</span><span class="line"> <span class="o">$</span> cyl <span class="o">:</span> num  <span class="m">6</span> <span class="m">6</span> <span class="m">4</span> <span class="m">6</span> <span class="m">8</span> <span class="m">6</span> <span class="m">8</span> <span class="m">4</span> <span class="m">4</span> <span class="m">6</span> <span class="kc">...</span>
</span><span class="line"> <span class="o">$</span> disp<span class="o">:</span> num  <span class="m">160</span> <span class="m">160</span> <span class="m">108</span> <span class="m">258</span> <span class="m">360</span> <span class="kc">...</span>
</span><span class="line"> <span class="o">$</span> hp  <span class="o">:</span> num  <span class="m">110</span> <span class="m">110</span> <span class="m">93</span> <span class="m">110</span> <span class="m">175</span> <span class="m">105</span> <span class="m">245</span> <span class="m">62</span> <span class="m">95</span> <span class="m">123</span> <span class="kc">...</span>
</span><span class="line"> <span class="o">$</span> drat<span class="o">:</span> num  <span class="m">3.9</span> <span class="m">3.9</span> <span class="m">3.85</span> <span class="m">3.08</span> <span class="m">3.15</span> <span class="m">2.76</span> <span class="m">3.21</span> <span class="m">3.69</span> <span class="m">3.92</span> <span class="m">3.92</span> <span class="kc">...</span>
</span><span class="line"> <span class="o">$</span> wt  <span class="o">:</span> num  <span class="m">2.62</span> <span class="m">2.88</span> <span class="m">2.32</span> <span class="m">3.21</span> <span class="m">3.44</span> <span class="kc">...</span>
</span><span class="line"> <span class="o">$</span> qsec<span class="o">:</span> num  <span class="m">16.5</span> <span class="m">17</span> <span class="m">18.6</span> <span class="m">19.4</span> <span class="m">17</span> <span class="kc">...</span>
</span><span class="line"> <span class="o">$</span> vs  <span class="o">:</span> num  <span class="m">0</span> <span class="m">0</span> <span class="m">1</span> <span class="m">1</span> <span class="m">0</span> <span class="m">1</span> <span class="m">0</span> <span class="m">1</span> <span class="m">1</span> <span class="m">1</span> <span class="kc">...</span>
</span><span class="line"> <span class="o">$</span> am  <span class="o">:</span> num  <span class="m">1</span> <span class="m">1</span> <span class="m">1</span> <span class="m">0</span> <span class="m">0</span> <span class="m">0</span> <span class="m">0</span> <span class="m">0</span> <span class="m">0</span> <span class="m">0</span> <span class="kc">...</span>
</span><span class="line"> <span class="o">$</span> gear<span class="o">:</span> num  <span class="m">4</span> <span class="m">4</span> <span class="m">4</span> <span class="m">3</span> <span class="m">3</span> <span class="m">3</span> <span class="m">3</span> <span class="m">4</span> <span class="m">4</span> <span class="m">4</span> <span class="kc">...</span>
</span><span class="line"> <span class="o">$</span> carb<span class="o">:</span> num  <span class="m">4</span> <span class="m">4</span> <span class="m">1</span> <span class="m">1</span> <span class="m">2</span> <span class="m">1</span> <span class="m">4</span> <span class="m">2</span> <span class="m">2</span> <span class="m">4</span> <span class="kc">...</span>
</span><span class="line"><span class="o">&gt;</span> summary<span class="p">(</span>mtcars<span class="o">$</span>mpg<span class="p">)</span>
</span><span class="line">   Min. <span class="m">1</span>st Qu.  Median    Mean <span class="m">3</span>rd Qu.    Max.
</span><span class="line">  <span class="m">10.40</span>   <span class="m">15.42</span>   <span class="m">19.20</span>   <span class="m">20.09</span>   <span class="m">22.80</span>   <span class="m">33.90</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>可以使用<code>mean</code>和<code>sd</code>函数得到样本均值和样本标准差，<code>quantile</code>函数计算样本分位数：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>descriptive_statistics1.R</span><a href="https://github.com/JackyCode/RSeries">link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="r"><span class="line"><span class="o">&gt;</span> mean<span class="p">(</span>mtcars<span class="o">$</span>mpg<span class="p">)</span>
</span><span class="line"><span class="p">[</span><span class="m">1</span><span class="p">]</span> <span class="m">20.09062</span>
</span><span class="line"><span class="o">&gt;</span> sd<span class="p">(</span>mtcars<span class="o">$</span>mpg<span class="p">)</span>
</span><span class="line"><span class="p">[</span><span class="m">1</span><span class="p">]</span> <span class="m">6.026948</span>
</span><span class="line"><span class="o">&gt;</span> quantile<span class="p">(</span>mtcars<span class="o">$</span>mpg<span class="p">,</span> <span class="m">0.25</span><span class="p">)</span>
</span><span class="line">   <span class="m">25</span><span class="o">% </span>
</span><span class="line"><span class="o">15.425 </span>
</span><span class="line"><span class="o">&gt; quantile(mtcars$mpg, c(0.25, 0.75))</span>
</span><span class="line"><span class="o">   25%</span>    <span class="m">75</span>%
</span><span class="line"><span class="m">15.425</span> <span class="m">22.800</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>但是在R的基础包里面并没有计算偏度(skewness)和峰度(kurtosis)的函数，我们可以自定义一个函数，用来计算常用的描述性统计量：</p>

<p>首先给出偏度$\beta_s$与峰度$\beta_k$的计算公式：</p>

<script type="math/tex; mode=display">\beta_s = \frac{E(X-E(X))^3}{[E(X-E(X))^2]^{3/2}}</script>

<script type="math/tex; mode=display">\beta_k = \frac{E(X-E(X))^4}{[E(X-E(X))^2]^2} - 3</script>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>descriptive_statistics1.R</span><a href="https://github.com/JackyCode/RSeries">link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
</pre></td><td class="code"><pre><code class="r"><span class="line"><span class="o">&gt;</span> desc.stats <span class="o">&lt;-</span> <span class="kr">function</span><span class="p">(</span>x<span class="p">,</span> na.omit<span class="o">=</span><span class="kc">FALSE</span><span class="p">)</span> <span class="p">{</span> <span class="c1"># na.omit=TRUE 表示忽略缺失值</span>
</span><span class="line"><span class="o">+</span> 	<span class="kr">if</span> <span class="p">(</span>na.omit<span class="p">)</span>
</span><span class="line"><span class="o">+</span> 		x <span class="o">&lt;-</span> x<span class="p">[</span><span class="o">!</span>is.na<span class="p">(</span>x<span class="p">)]</span>
</span><span class="line"><span class="o">+</span> 	
</span><span class="line"><span class="o">+</span> 	n <span class="o">&lt;-</span> length<span class="p">(</span>x<span class="p">)</span>
</span><span class="line"><span class="o">+</span> 	mean <span class="o">&lt;-</span> mean<span class="p">(</span>x<span class="p">)</span>
</span><span class="line"><span class="o">+</span> 	var <span class="o">&lt;-</span> var<span class="p">(</span>x<span class="p">)</span>
</span><span class="line"><span class="o">+</span> 	sd <span class="o">&lt;-</span> sd<span class="p">(</span>x<span class="p">)</span>
</span><span class="line"><span class="o">+</span> 	skew <span class="o">&lt;-</span> sum<span class="p">((</span>x<span class="o">-</span>mean<span class="p">)</span><span class="o">^</span><span class="m">3</span><span class="o">/</span>sd<span class="o">^</span><span class="m">3</span><span class="p">)</span><span class="o">/</span>n
</span><span class="line"><span class="o">+</span> 	kurt <span class="o">&lt;-</span> sum<span class="p">((</span>x<span class="o">-</span>mean<span class="p">)</span><span class="o">^</span><span class="m">4</span><span class="o">/</span>sd<span class="o">^</span><span class="m">4</span><span class="p">)</span><span class="o">/</span>n <span class="o">-</span> <span class="m">3</span>
</span><span class="line"><span class="o">+</span> 	
</span><span class="line"><span class="o">+</span> 	<span class="kr">return</span><span class="p">(</span>list<span class="p">(</span>mean<span class="o">=</span>mean<span class="p">,</span> Variance<span class="o">=</span>var<span class="p">,</span> skewness<span class="o">=</span>skew<span class="p">,</span> kurtosis<span class="o">=</span>kurt<span class="p">))</span>
</span><span class="line"><span class="o">+</span> <span class="p">}</span>
</span><span class="line"><span class="o">&gt;</span> desc.stats<span class="p">(</span>mtcars<span class="o">$</span>mpg<span class="p">)</span>
</span><span class="line"><span class="o">$</span>mean
</span><span class="line"><span class="p">[</span><span class="m">1</span><span class="p">]</span> <span class="m">20.09062</span>
</span><span class="line">
</span><span class="line"><span class="o">$</span>Variance
</span><span class="line"><span class="p">[</span><span class="m">1</span><span class="p">]</span> <span class="m">36.3241</span>
</span><span class="line">
</span><span class="line"><span class="o">$</span>skewness
</span><span class="line"><span class="p">[</span><span class="m">1</span><span class="p">]</span> <span class="m">0.610655</span>
</span><span class="line">
</span><span class="line"><span class="o">$</span>kurtosis
</span><span class="line"><span class="p">[</span><span class="m">1</span><span class="p">]</span> <span class="m">-0.372766</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>到此为止，我们就可以使用R语言对一组数据进行简单的探索性分析了。其实，在R语言的很多扩展包里面，都有计算描述性统计量的函数，例如Hmisc包中有<code>describe()</code>函数，可以返回变量数目，缺失值数目，均值，分位数等等信息；在fBasic包中有<code>skewness()</code>和<code>kurtosis()</code>函数，可以分别求偏度与峰度，在该包内还有一个函数，<code>basicStats()</code>可以得到大部分的描述性统计量。</p>

<h5 id="section-3">2. 多组数据</h5>
<p>若是存在多组数据，那么在R中如何对数据进行统计量的计算呢？我们不妨先来试试<code>summary</code>函数能否对多组数据做出很好的处理：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>descriptive_statistics1.R</span><a href="https://github.com/JackyCode/RSeries">link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="r"><span class="line"><span class="o">&gt;</span> mtcars.sub <span class="o">&lt;-</span> data.frame<span class="p">(</span>mpg<span class="o">=</span>mtcars<span class="o">$</span>mpg<span class="p">,</span> wt<span class="o">=</span>mtcars<span class="o">$</span>wt<span class="p">)</span> <span class="c1"># 取出两个变量</span>
</span><span class="line"><span class="o">&gt;</span> summary<span class="p">(</span>mtcars.sub<span class="p">)</span>
</span><span class="line">      mpg              wt
</span><span class="line"> Min.   <span class="o">:</span><span class="m">10.40</span>   Min.   <span class="o">:</span><span class="m">1.513</span>
</span><span class="line"> <span class="m">1</span>st Qu.<span class="o">:</span><span class="m">15.43</span>   <span class="m">1</span>st Qu.<span class="o">:</span><span class="m">2.581</span>
</span><span class="line"> Median <span class="o">:</span><span class="m">19.20</span>   Median <span class="o">:</span><span class="m">3.325</span>
</span><span class="line"> Mean   <span class="o">:</span><span class="m">20.09</span>   Mean   <span class="o">:</span><span class="m">3.217</span>
</span><span class="line"> <span class="m">3</span>rd Qu.<span class="o">:</span><span class="m">22.80</span>   <span class="m">3</span>rd Qu.<span class="o">:</span><span class="m">3.610</span>
</span><span class="line"> Max.   <span class="o">:</span><span class="m">33.90</span>   Max.   <span class="o">:</span><span class="m">5.424</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>显然，<code>summary</code>函数能够直接对多组数据进行计算。那么怎么批量地对多组数据使用我们自定义的函数<code>desc.stats</code>呢？还记得我们曾经介绍过<code>sapply</code>函数吗，想想它的功能就知道如何解决这个问题了吧。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>descriptive_statistics1.R</span><a href="https://github.com/JackyCode/RSeries">link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="r"><span class="line"><span class="o">&gt;</span> sapply<span class="p">(</span>mtcars.sub<span class="p">,</span> desc.stats<span class="p">)</span>
</span><span class="line">         mpg       wt
</span><span class="line">mean     <span class="m">20.09062</span>  <span class="m">3.21725</span>
</span><span class="line">Variance <span class="m">36.3241</span>   <span class="m">0.957379</span>
</span><span class="line">skewness <span class="m">0.610655</span>  <span class="m">0.4231465</span>
</span><span class="line">kurtosis <span class="m">-0.372766</span> <span class="m">-0.02271075</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h5 id="section-4">3. 分组数据</h5>
<p>我们知道，很多时候我们会对数据进行分类。像这里的数据<code>mtcars</code>，其有变量<code>am</code>用来表示自动挡(0)和手动挡(1)。那么我们就需要对其进行分组，然后求出各组的描述性统计量。还记得<code>tapply()</code>,<code>by()</code>和<code>aggregate()</code>函数吗?试试看：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>descriptive_statistics1.R</span><a href="https://github.com/JackyCode/RSeries">link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
</pre></td><td class="code"><pre><code class="r"><span class="line"><span class="o">&gt;</span> mtcars.sub2 <span class="o">&lt;-</span> data.frame<span class="p">(</span>mpg<span class="o">=</span>mtcars<span class="o">$</span>mpg<span class="p">,</span> am<span class="o">=</span>mtcars<span class="o">$</span>am<span class="p">,</span> carb<span class="o">=</span>mtcars<span class="o">$</span>carb<span class="p">)</span>
</span><span class="line"><span class="o">&gt;</span> tapply<span class="p">(</span>mtcars.sub2<span class="o">$</span>mpg<span class="p">,</span> mtcars.sub2<span class="o">$</span>am<span class="p">,</span> summary<span class="p">)</span>
</span><span class="line"><span class="o">$</span><span class="sb">`0`</span>
</span><span class="line">   Min. <span class="m">1</span>st Qu.  Median    Mean <span class="m">3</span>rd Qu.    Max.
</span><span class="line">  <span class="m">10.40</span>   <span class="m">14.95</span>   <span class="m">17.30</span>   <span class="m">17.15</span>   <span class="m">19.20</span>   <span class="m">24.40</span>
</span><span class="line">
</span><span class="line"><span class="o">$</span><span class="sb">`1`</span>
</span><span class="line">   Min. <span class="m">1</span>st Qu.  Median    Mean <span class="m">3</span>rd Qu.    Max.
</span><span class="line">  <span class="m">15.00</span>   <span class="m">21.00</span>   <span class="m">22.80</span>   <span class="m">24.39</span>   <span class="m">30.40</span>   <span class="m">33.90</span>
</span><span class="line">
</span><span class="line"><span class="o">&gt;</span> by<span class="p">(</span>mtcars.sub2<span class="o">$</span>mpg<span class="p">,</span> mtcars.sub2<span class="o">$</span>am<span class="p">,</span> summary<span class="p">)</span>
</span><span class="line">mtcars.sub2<span class="o">$</span>am<span class="o">:</span> <span class="m">0</span>
</span><span class="line">   Min. <span class="m">1</span>st Qu.  Median    Mean <span class="m">3</span>rd Qu.    Max.
</span><span class="line">  <span class="m">10.40</span>   <span class="m">14.95</span>   <span class="m">17.30</span>   <span class="m">17.15</span>   <span class="m">19.20</span>   <span class="m">24.40</span>
</span><span class="line"><span class="o">------------------------------------------------------------</span>
</span><span class="line">mtcars.sub2<span class="o">$</span>am<span class="o">:</span> <span class="m">1</span>
</span><span class="line">   Min. <span class="m">1</span>st Qu.  Median    Mean <span class="m">3</span>rd Qu.    Max.
</span><span class="line">  <span class="m">15.00</span>   <span class="m">21.00</span>   <span class="m">22.80</span>   <span class="m">24.39</span>   <span class="m">30.40</span>   <span class="m">33.90</span>
</span><span class="line"><span class="o">&gt;</span>
</span><span class="line"><span class="o">&gt;</span> aggregate<span class="p">(</span>mpg <span class="o">~</span> am<span class="p">,</span> mtcars.sub2<span class="p">,</span> summary<span class="p">)</span>
</span><span class="line">  am mpg.Min. mpg.1st Qu. mpg.Median mpg.Mean mpg.3rd Qu. mpg.Max.
</span><span class="line"><span class="m">1</span>  <span class="m">0</span>    <span class="m">10.40</span>       <span class="m">14.95</span>      <span class="m">17.30</span>    <span class="m">17.15</span>       <span class="m">19.20</span>    <span class="m">24.40</span>
</span><span class="line"><span class="m">2</span>  <span class="m">1</span>    <span class="m">15.00</span>       <span class="m">21.00</span>      <span class="m">22.80</span>    <span class="m">24.39</span>       <span class="m">30.40</span>    <span class="m">33.90</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>同样的，如果存在多个分类，我们依旧可以使用上面的函数作出处理：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>descriptive_statistics1.R</span><a href="https://github.com/JackyCode/RSeries">link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="r"><span class="line"><span class="o">&gt;</span> aggregate<span class="p">(</span>mpg <span class="o">~</span> am<span class="o">+</span>carb<span class="p">,</span> mtcars.sub2<span class="p">,</span> summary<span class="p">)</span>
</span><span class="line">  am carb mpg.Min. mpg.1st Qu. mpg.Median mpg.Mean mpg.3rd Qu. mpg.Max.
</span><span class="line"><span class="m">1</span>  <span class="m">0</span>    <span class="m">1</span>    <span class="m">18.10</span>       <span class="m">19.75</span>      <span class="m">21.40</span>    <span class="m">20.33</span>       <span class="m">21.45</span>    <span class="m">21.50</span>
</span><span class="line"><span class="m">2</span>  <span class="m">1</span>    <span class="m">1</span>    <span class="m">22.80</span>       <span class="m">26.18</span>      <span class="m">29.85</span>    <span class="m">29.10</span>       <span class="m">32.78</span>    <span class="m">33.90</span>
</span><span class="line"><span class="m">3</span>  <span class="m">0</span>    <span class="m">2</span>    <span class="m">15.20</span>       <span class="m">16.30</span>      <span class="m">18.95</span>    <span class="m">19.30</span>       <span class="m">21.90</span>    <span class="m">24.40</span>
</span><span class="line"><span class="m">4</span>  <span class="m">1</span>    <span class="m">2</span>    <span class="m">21.40</span>       <span class="m">24.85</span>      <span class="m">28.20</span>    <span class="m">27.05</span>       <span class="m">30.40</span>    <span class="m">30.40</span>
</span><span class="line"><span class="m">5</span>  <span class="m">0</span>    <span class="m">3</span>    <span class="m">15.20</span>       <span class="m">15.80</span>      <span class="m">16.40</span>    <span class="m">16.30</span>       <span class="m">16.85</span>    <span class="m">17.30</span>
</span><span class="line"><span class="m">6</span>  <span class="m">0</span>    <span class="m">4</span>    <span class="m">10.40</span>       <span class="m">11.85</span>      <span class="m">14.30</span>    <span class="m">14.30</span>       <span class="m">16.25</span>    <span class="m">19.20</span>
</span><span class="line"><span class="m">7</span>  <span class="m">1</span>    <span class="m">4</span>    <span class="m">15.80</span>       <span class="m">18.40</span>      <span class="m">21.00</span>    <span class="m">19.27</span>       <span class="m">21.00</span>    <span class="m">21.00</span>
</span><span class="line"><span class="m">8</span>  <span class="m">1</span>    <span class="m">6</span>    <span class="m">19.70</span>       <span class="m">19.70</span>      <span class="m">19.70</span>    <span class="m">19.70</span>       <span class="m">19.70</span>    <span class="m">19.70</span>
</span><span class="line"><span class="m">9</span>  <span class="m">1</span>    <span class="m">8</span>    <span class="m">15.00</span>       <span class="m">15.00</span>      <span class="m">15.00</span>    <span class="m">15.00</span>       <span class="m">15.00</span>    <span class="m">15.00</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>到此为止，就介绍完了如何使用R计算描述性统计量的内容。下一次我们讲看看如何将数据可视化，也就是如何在R中作图以及制表。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[R语言记录4：自定义函数的深入]]></title>
    <link href="http://jackycode.github.io/blog/2014/03/10/rseries4/"/>
    <updated>2014-03-10T16:50:29+08:00</updated>
    <id>http://jackycode.github.io/blog/2014/03/10/rseries4</id>
    <content type="html"><![CDATA[<p><img src="http://jackycode.github.io/images/artical/artical7.jpg" alt="aritical 7" />
<!-- more --></p>

<p><em>“文章原创，转载请注明出处”</em></p>

<hr />

<p>在第一份笔记中，已经介绍过控制语句以及自定义函数。但是当时讲的很简单，只是讲了语法。这次打算深入介绍一下，如何在R中写出一个稳健的自定义函数。首先先介绍一个常用的控制语句<code>ifelse</code>。</p>

<h4 id="ifelse">一. 善用<code>ifelse</code></h4>

<h6 id="section">1. 首先生成一组成绩数据</h6>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>ifelse_use</span><a href="https://github.com/JackyCode/RSeries">link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="r"><span class="line"><span class="o">&gt;</span> scoreList <span class="o">&lt;-</span> list<span class="p">()</span>
</span><span class="line"><span class="o">&gt;</span> scoreList<span class="o">$</span>name <span class="o">&lt;-</span> c<span class="p">(</span><span class="s">&quot;Wang&quot;</span><span class="p">,</span> <span class="s">&quot;Li&quot;</span><span class="p">,</span> <span class="s">&quot;Sun&quot;</span><span class="p">)</span>
</span><span class="line"><span class="o">&gt;</span> scoreList<span class="o">$</span>score <span class="o">&lt;-</span> c<span class="p">(</span><span class="m">90</span><span class="p">,</span> <span class="m">50</span><span class="p">,</span> <span class="m">70</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h6 id="section-1">2. 然后对成绩进行分级</h6>
<p>一般来说，可能我们会想到利用循环，在学生成绩中一个一个比较。大于$60$及格，小于就不及格。但是循环相对而言是费资源的，在R语言中，处理像这种问题，完全可以避开循环去做。回想一下，之前讲<code>any</code>和<code>all</code>函数时，可以使用<code>which</code>函数取出满足条件的元素的位置。当然这也是一个不错的方式，但其实还有更好的方法，那就是利用<code>ifelse</code>函数：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>ifelse_use</span><a href="https://github.com/JackyCode/RSeries">link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="r"><span class="line"><span class="o">&gt;</span> con <span class="o">&lt;-</span> scoreList<span class="o">$</span>score <span class="o">&gt;</span> <span class="m">60</span>
</span><span class="line"><span class="o">&gt;</span> scoreList<span class="o">$</span>level <span class="o">&lt;-</span> ifelse<span class="p">(</span>con<span class="p">,</span> <span class="s">&quot;good&quot;</span><span class="p">,</span> <span class="s">&quot;not good&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>如果使用<code>which</code>函数的话，也不复杂：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>ifelse_use</span><a href="https://github.com/JackyCode/RSeries">link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="r"><span class="line"><span class="o">&gt;</span> scoreList<span class="o">$</span>level2 <span class="o">&lt;-</span> rep<span class="p">(</span><span class="s">&quot;good&quot;</span><span class="p">,</span> <span class="m">3</span><span class="p">)</span>
</span><span class="line"><span class="o">&gt;</span> scoreList<span class="o">$</span>level2<span class="p">[</span>which<span class="p">(</span>scoreList<span class="o">$</span>score<span class="o">&lt;</span><span class="m">60</span><span class="p">)]</span> <span class="o">&lt;-</span> <span class="s">&quot;not good&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>上面两种方式比较起来的话，当然个人更喜欢第一种啦。便于理解逻辑性也强。不过第二种方式怎么看怎么觉得牛，哈哈。</p>

<h4 id="section-2">二. 自定义函数的深入</h4>

<h6 id="section-3">1. 首先先设计一个计算简单的函数</h6>
<p>R语言是统计软件，那么就设计一个函数，能够输出一组值的均值，方差好了。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>custome_function</span><a href="https://github.com/JackyCode/RSeries">link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="r"><span class="line">Summary.MeanAndSd <span class="o">&lt;-</span> <span class="kr">function</span> <span class="p">(</span>x<span class="p">)</span> <span class="p">{</span>
</span><span class="line">  mean <span class="o">&lt;-</span> mean<span class="p">(</span>x<span class="p">)</span>
</span><span class="line">  sd <span class="o">&lt;-</span> sd<span class="p">(</span>x<span class="p">)</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>这样看起来程序已经写好了，但其实是有问题的。我们来测试一下。</p>

<h6 id="n01">2. 生成一组服从$N(0,1)$的随机数用来测试</h6>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>custom_function</span><a href="https://github.com/JackyCode/RSeries">link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="r"><span class="line"><span class="o">&gt;</span> set.seed<span class="p">(</span><span class="m">10</span><span class="p">)</span>	<span class="c1"># 设定种子</span>
</span><span class="line"><span class="o">&gt;</span> x <span class="o">&lt;-</span> rnorm<span class="p">(</span><span class="m">20</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">1</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">Summary.MeanAndSd<span class="p">(</span>x<span class="p">)</span>
</span><span class="line">result <span class="o">&lt;-</span> Summary.MeanAndSd<span class="p">(</span>x<span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>运行可以发现，直接调用函数<code>Summary.MeanAndSd</code>函数没有任何输出；即使赋值给<code>result</code>，<code>result</code>也只得到了方差。</p>

<h6 id="return">3. 选择返回值(<code>return</code>函数):</h6>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>custom_function</span><a href="https://github.com/JackyCode/RSeries">link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="r"><span class="line">Summary.MeanAndSd <span class="o">&lt;-</span> <span class="kr">function</span> <span class="p">(</span>x<span class="p">)</span> <span class="p">{</span>
</span><span class="line">  mean <span class="o">&lt;-</span> mean<span class="p">(</span>x<span class="p">)</span>
</span><span class="line">  sd <span class="o">&lt;-</span> sd<span class="p">(</span>x<span class="p">)</span>
</span><span class="line">
</span><span class="line">  <span class="kr">return</span><span class="p">(</span>c<span class="p">(</span>mean<span class="p">,</span> sd<span class="p">))</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="o">&gt;</span> Summary.MeanAndSd<span class="p">(</span>x<span class="p">)</span>
</span><span class="line"><span class="p">[</span><span class="m">1</span><span class="p">]</span> <span class="m">-0.06053267</span>  <span class="m">0.79990931</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这次就可以得到输出，赋值给<code>result</code>也就可以成功了。下面我们来将程序加一个功能，那就是计算置信区间。</p>

<h6 id="section-4">4. 函数参数：</h6>
<p>计算置信区间，那就需要知道置信度$\alpha$的大小。这个时候函数就必须能够接受参数：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>custom_function</span><a href="https://github.com/JackyCode/RSeries">link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="r"><span class="line">Summary.MeanAndSd <span class="o">&lt;-</span> <span class="kr">function</span> <span class="p">(</span>x<span class="p">,</span> alpha<span class="p">)</span> <span class="p">{</span>
</span><span class="line">  mean <span class="o">&lt;-</span> mean<span class="p">(</span>x<span class="p">)</span>
</span><span class="line">  sd <span class="o">&lt;-</span> sd<span class="p">(</span>x<span class="p">)</span>
</span><span class="line">  upper <span class="o">&lt;-</span> <span class="m">1</span> <span class="o">-</span> alpha<span class="o">/</span><span class="m">2</span>
</span><span class="line">  ci <span class="o">&lt;-</span> mean <span class="o">+</span> c<span class="p">(</span><span class="m">-1</span><span class="p">,</span> <span class="m">1</span><span class="p">)</span> <span class="o">*</span> qnorm<span class="p">(</span>alpha<span class="o">/</span><span class="m">2</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">1</span><span class="p">)</span><span class="o">*</span>sd<span class="o">/</span>sqrt<span class="p">(</span>length<span class="p">(</span>x<span class="p">))</span> <span class="c1"># qnorm计算正态分布的分位数</span>
</span><span class="line">
</span><span class="line">  <span class="kr">return</span><span class="p">(</span>list<span class="p">(</span>mean <span class="o">=</span> mean<span class="p">,</span> sd <span class="o">=</span> sd<span class="p">,</span> ci <span class="o">=</span> ci<span class="p">))</span> <span class="c1"># 使用列表输出结果是常用方式</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line">Summary.MeanAndSd<span class="p">(</span>x<span class="p">,</span> <span class="m">0.05</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>运行上面的程序能够很轻松地得到结果。但是，如果我们运行<code>Summary.MeanAndSd(x)</code>，程序就会报错，它会提醒你没有键入<code>alpha</code>。但实际上，大部分默认情况下，$\alpha=0.05$，完全可以将其设定成默认值：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>custom_function</span><a href="https://github.com/JackyCode/RSeries">link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="r"><span class="line">Summary.MeanAndSd <span class="o">&lt;-</span> <span class="kr">function</span> <span class="p">(</span>x<span class="p">,</span> alpha<span class="o">=</span><span class="m">0.05</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  mean <span class="o">&lt;-</span> mean<span class="p">(</span>x<span class="p">)</span>
</span><span class="line">  sd <span class="o">&lt;-</span> sd<span class="p">(</span>x<span class="p">)</span>
</span><span class="line">  upper <span class="o">&lt;-</span> <span class="m">1</span> <span class="o">-</span> alpha<span class="o">/</span><span class="m">2</span>
</span><span class="line">  ci <span class="o">&lt;-</span> mean <span class="o">+</span> c<span class="p">(</span><span class="m">-1</span><span class="p">,</span> <span class="m">1</span><span class="p">)</span> <span class="o">*</span> qnorm<span class="p">(</span>alpha<span class="o">/</span><span class="m">2</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">1</span><span class="p">)</span><span class="o">*</span>sd<span class="o">/</span>sqrt<span class="p">(</span>length<span class="p">(</span>x<span class="p">))</span> <span class="c1"># qnorm计算正态分布的分位数</span>
</span><span class="line">
</span><span class="line">  <span class="kr">return</span><span class="p">(</span>list<span class="p">(</span>mean <span class="o">=</span> mean<span class="p">,</span> sd <span class="o">=</span> sd<span class="p">,</span> ci <span class="o">=</span> ci<span class="p">))</span> <span class="c1"># 使用列表输出结果是常用方式</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这回再运行<code>Summary.MeanAndSd(x)</code>可以发现没有问题了。这里我们选取了列表作为输出的方式，这是一个常用的方式，利于查看保存。</p>

<h6 id="section-5">5. 参数的合法性：</h6>
<p>我们知道$\alpha$是介于$(0,1)$之间的值，而且一般来说，$\alpha&lt;0.5$。但上面的程序并不能够处理这类的问题，当参数不合法时，它依然能够计算出一个结果：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>custom_function</span><a href="https://github.com/JackyCode/RSeries">link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class="r"><span class="line"><span class="o">&gt;</span> Summary.MeanAndSd<span class="p">(</span>x<span class="p">,</span> <span class="m">1.5</span><span class="p">)</span>
</span><span class="line"><span class="o">$</span>mean
</span><span class="line"><span class="p">[</span><span class="m">1</span><span class="p">]</span> <span class="m">-0.06053267</span>
</span><span class="line">
</span><span class="line"><span class="o">$</span>sd
</span><span class="line"><span class="p">[</span><span class="m">1</span><span class="p">]</span> <span class="m">0.7999093</span>
</span><span class="line">
</span><span class="line"><span class="o">$</span>ci
</span><span class="line"><span class="p">[</span><span class="m">1</span><span class="p">]</span> <span class="m">-0.18117539</span>  <span class="m">0.06011005</span>
</span><span class="line">
</span><span class="line"><span class="o">&gt;</span> Summary.MeanAndSd<span class="p">(</span>x<span class="p">,</span> <span class="m">0.8</span><span class="p">)</span>
</span><span class="line"><span class="o">$</span>mean
</span><span class="line"><span class="p">[</span><span class="m">1</span><span class="p">]</span> <span class="m">-0.06053267</span>
</span><span class="line">
</span><span class="line"><span class="o">$</span>sd
</span><span class="line"><span class="p">[</span><span class="m">1</span><span class="p">]</span> <span class="m">0.7999093</span>
</span><span class="line">
</span><span class="line"><span class="o">$</span>ci
</span><span class="line"><span class="p">[</span><span class="m">1</span><span class="p">]</span> <span class="m">-0.0152177</span> <span class="m">-0.1058476</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这样的结果显然是不合理的，函数并不具备一定的报错能力。对于用户不合法的输入参数，程序要能够及时停止程序的运行，并且告诉用户哪里错了。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>custom_function</span><a href="https://github.com/JackyCode/RSeries">link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="r"><span class="line">Summary.MeanAndSd <span class="o">&lt;-</span> <span class="kr">function</span> <span class="p">(</span>x<span class="p">,</span> alpha<span class="o">=</span><span class="m">0.05</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="kr">if</span> <span class="p">(</span>alpha <span class="o">&lt;=</span> <span class="m">0</span> <span class="o">||</span> alpha <span class="o">&gt;=</span> <span class="m">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    stop<span class="p">(</span><span class="s">&quot;The argument &#39;alpha&#39; should be between 0 and 1!&quot;</span> <span class="p">)</span>
</span><span class="line">  <span class="p">}</span> <span class="kr">else</span> <span class="kr">if</span> <span class="p">(</span>alpha <span class="o">&gt;</span> <span class="m">0.5</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    warning<span class="p">(</span><span class="s">&quot;The argument &#39;alpha&#39; is often smaller than 0.5 and  close to 0!&quot;</span><span class="p">)</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">
</span><span class="line">  mean <span class="o">&lt;-</span> mean<span class="p">(</span>x<span class="p">)</span>
</span><span class="line">  sd <span class="o">&lt;-</span> sd<span class="p">(</span>x<span class="p">)</span>
</span><span class="line">  upper <span class="o">&lt;-</span> <span class="m">1</span> <span class="o">-</span> alpha<span class="o">/</span><span class="m">2</span>
</span><span class="line">  ci <span class="o">&lt;-</span> mean <span class="o">+</span> c<span class="p">(</span><span class="m">-1</span><span class="p">,</span> <span class="m">1</span><span class="p">)</span> <span class="o">*</span> qnorm<span class="p">(</span>alpha<span class="o">/</span><span class="m">2</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">1</span><span class="p">)</span><span class="o">*</span>sd<span class="o">/</span>sqrt<span class="p">(</span>length<span class="p">(</span>x<span class="p">))</span> <span class="c1"># qnorm计算正态分布的分位数</span>
</span><span class="line">
</span><span class="line">  <span class="kr">return</span><span class="p">(</span>list<span class="p">(</span>mean <span class="o">=</span> mean<span class="p">,</span> sd <span class="o">=</span> sd<span class="p">,</span> ci <span class="o">=</span> ci<span class="p">))</span> <span class="c1"># 使用列表输出结果是常用方式</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>运行一下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>custom_function</span><a href="https://github.com/JackyCode/RSeries">link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="r"><span class="line"><span class="o">&gt;</span> Summary.MeanAndSd<span class="p">(</span>x<span class="p">,</span> <span class="m">1.5</span><span class="p">)</span>
</span><span class="line">Error <span class="kr">in</span> Summary.MeanAndSd<span class="p">(</span>x<span class="p">,</span> <span class="m">1.5</span><span class="p">)</span> <span class="o">:</span>
</span><span class="line">  The argument <span class="s">&#39;alpha&#39;</span> should be between <span class="m">0</span> and <span class="m">1</span><span class="o">!</span>
</span><span class="line"><span class="o">&gt;</span> Summary.MeanAndSd<span class="p">(</span>x<span class="p">,</span> <span class="m">0.8</span><span class="p">)</span>
</span><span class="line"><span class="o">$</span>mean
</span><span class="line"><span class="p">[</span><span class="m">1</span><span class="p">]</span> <span class="m">-0.06053267</span>
</span><span class="line">
</span><span class="line"><span class="o">$</span>sd
</span><span class="line"><span class="p">[</span><span class="m">1</span><span class="p">]</span> <span class="m">0.7999093</span>
</span><span class="line">
</span><span class="line"><span class="o">$</span>ci
</span><span class="line"><span class="p">[</span><span class="m">1</span><span class="p">]</span> <span class="m">-0.0152177</span> <span class="m">-0.1058476</span>
</span><span class="line">
</span><span class="line">Warning message<span class="o">:</span>
</span><span class="line">In Summary.MeanAndSd<span class="p">(</span>x<span class="p">,</span> <span class="m">0.8</span><span class="p">)</span> <span class="o">:</span>
</span><span class="line">  The argument <span class="s">&#39;alpha&#39;</span> is often smaller than <span class="m">0.5</span> and  close to <span class="m">0</span><span class="o">!</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这样程序就具备了一定的稳健性，能够具备一些报错的能力。但是在实际处理数据的时候，往往还会遇到一种情况，那就是缺失值。想想看，上面写的程序能够很好地应付存在缺失值的数据吗？显然是不行的。</p>

<h6 id="section-6">6. 注意缺失值</h6>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>custom_function</span><a href="https://github.com/JackyCode/RSeries">link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="r"><span class="line"><span class="c1"># 生成一组具有缺失值的数据</span>
</span><span class="line"><span class="o">&gt;</span> set.seed<span class="p">(</span><span class="m">10</span><span class="p">)</span>
</span><span class="line"><span class="o">&gt;</span> y <span class="o">&lt;-</span> rnorm<span class="p">(</span><span class="m">20</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">1</span><span class="p">)</span>
</span><span class="line"><span class="o">&gt;</span> y <span class="o">&lt;-</span> c<span class="p">(</span>y<span class="p">,</span> <span class="kc">NA</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>试试上面的程序，能否得到结果:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>custom_function</span><a href="https://github.com/JackyCode/RSeries">link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="r"><span class="line"><span class="o">&gt;</span> Summary.MeanAndSd<span class="p">(</span>y<span class="p">)</span>
</span><span class="line"><span class="o">$</span>mean
</span><span class="line"><span class="p">[</span><span class="m">1</span><span class="p">]</span> <span class="kc">NA</span>
</span><span class="line">
</span><span class="line"><span class="o">$</span>sd
</span><span class="line"><span class="p">[</span><span class="m">1</span><span class="p">]</span> <span class="kc">NA</span>
</span><span class="line">
</span><span class="line"><span class="o">$</span>ci
</span><span class="line"><span class="p">[</span><span class="m">1</span><span class="p">]</span> <span class="kc">NA</span> <span class="kc">NA</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>显然上面的程序无法处理存在缺失值的数据。回想一下，我们之前学过<code>na.rm</code>参数，我们可以通过设定此参数剔除缺失值：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>custom_function</span><a href="https://github.com/JackyCode/RSeries">link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class="r"><span class="line">Summary.MeanAndSd <span class="o">&lt;-</span> <span class="kr">function</span> <span class="p">(</span>x<span class="p">,</span> alpha<span class="o">=</span><span class="m">0.05</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="kr">if</span> <span class="p">(</span>alpha <span class="o">&lt;=</span> <span class="m">0</span> <span class="o">||</span> alpha <span class="o">&gt;=</span> <span class="m">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    stop<span class="p">(</span><span class="s">&quot;The argument &#39;alpha&#39; should be between 0 and 1!&quot;</span> <span class="p">)</span>
</span><span class="line">  <span class="p">}</span> <span class="kr">else</span> <span class="kr">if</span> <span class="p">(</span>alpha <span class="o">&gt;</span> <span class="m">0.5</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    warning<span class="p">(</span><span class="s">&quot;The argument &#39;alpha&#39; is often smaller than 0.5 and  close to 0!&quot;</span><span class="p">)</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">  <span class="kr">if</span> <span class="p">(</span>any<span class="p">(</span>is.na<span class="p">(</span>y<span class="p">)))</span> <span class="p">{</span>
</span><span class="line">    warning<span class="p">(</span><span class="s">&quot;There are any &#39;NA&#39; in the data, we&#39;ll ignore these datas!&quot;</span><span class="p">)</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">
</span><span class="line">  mean <span class="o">&lt;-</span> mean<span class="p">(</span>x<span class="p">,</span> na.rm<span class="o">=</span><span class="kc">TRUE</span><span class="p">)</span>
</span><span class="line">  sd <span class="o">&lt;-</span> sd<span class="p">(</span>x<span class="p">,</span> na.rm<span class="o">=</span><span class="kc">TRUE</span><span class="p">)</span>
</span><span class="line">  n <span class="o">&lt;-</span> ifelse<span class="p">(</span>any<span class="p">(</span>is.na<span class="p">(</span>y<span class="p">)),</span> length<span class="p">(</span>x<span class="p">)</span><span class="o">-</span>sum<span class="p">(</span>is.na<span class="p">(</span>x<span class="p">)),</span> length<span class="p">(</span>x<span class="p">))</span> <span class="c1"># n &lt;- length(x)-sum(is.na(x)) 也可以</span>
</span><span class="line">  upper <span class="o">&lt;-</span> <span class="m">1</span> <span class="o">-</span> alpha<span class="o">/</span><span class="m">2</span>
</span><span class="line">  ci <span class="o">&lt;-</span> mean <span class="o">+</span> c<span class="p">(</span><span class="m">-1</span><span class="p">,</span> <span class="m">1</span><span class="p">)</span> <span class="o">*</span> qnorm<span class="p">(</span>alpha<span class="o">/</span><span class="m">2</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">1</span><span class="p">)</span><span class="o">*</span>sd<span class="o">/</span>sqrt<span class="p">(</span>n<span class="p">)</span> <span class="c1"># qnorm计算正态分布的分位数</span>
</span><span class="line">
</span><span class="line">  <span class="kr">return</span><span class="p">(</span>list<span class="p">(</span>mean <span class="o">=</span> mean<span class="p">,</span> sd <span class="o">=</span> sd<span class="p">,</span> ci <span class="o">=</span> ci<span class="p">))</span> <span class="c1"># 使用列表输出结果是常用方式</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>现在运行一下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>custom_function</span><a href="https://github.com/JackyCode/RSeries">link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="r"><span class="line"><span class="o">&gt;</span> Summary.MeanAndSd<span class="p">(</span>y<span class="p">)</span>
</span><span class="line"><span class="o">$</span>mean
</span><span class="line"><span class="p">[</span><span class="m">1</span><span class="p">]</span> <span class="m">-0.06053267</span>
</span><span class="line">
</span><span class="line"><span class="o">$</span>sd
</span><span class="line"><span class="p">[</span><span class="m">1</span><span class="p">]</span> <span class="m">0.7999093</span>
</span><span class="line">
</span><span class="line"><span class="o">$</span>ci
</span><span class="line"><span class="p">[</span><span class="m">1</span><span class="p">]</span>  <span class="m">0.2900366</span> <span class="m">-0.4111019</span>
</span><span class="line">
</span><span class="line">Warning message<span class="o">:</span>
</span><span class="line">In Summary.MeanAndSd<span class="p">(</span>y<span class="p">)</span> <span class="o">:</span>
</span><span class="line">  There are any <span class="s">&#39;NA&#39;</span> <span class="kr">in</span> the data<span class="p">,</span> we<span class="s">&#39;</span><span class="err">ll ignore these datas!</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这样上面的程序就具备了处理缺失值的能力，它能够自动识别数据中是否存在缺失值，如果存在的话就剔除缺失值再进行计算，并且提醒用户存在缺失值。</p>

<p>但其实R语言中存在另外一个方式，可以使得程序具备处理缺失值等等的问题。可以使用使用<code>...</code>参数，使得自定义函数能够接受其它某些函数的参数，想象一下，如果可以这样调用我们的函数，<code>Summary.MeanAndSd(y, na.rm=TRUE)</code>，是不是perfect。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>custom_function</span><a href="https://github.com/JackyCode/RSeries">link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="r"><span class="line">Summary.MeanAndSd <span class="o">&lt;-</span> <span class="kr">function</span> <span class="p">(</span>x<span class="p">,</span> alpha<span class="o">=</span><span class="m">0.05</span><span class="p">,</span> <span class="kc">...</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="kr">if</span> <span class="p">(</span>alpha <span class="o">&lt;=</span> <span class="m">0</span> <span class="o">||</span> alpha <span class="o">&gt;=</span> <span class="m">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    stop<span class="p">(</span><span class="s">&quot;The argument &#39;alpha&#39; should be between 0 and 1!&quot;</span> <span class="p">)</span>
</span><span class="line">  <span class="p">}</span> <span class="kr">else</span> <span class="kr">if</span> <span class="p">(</span>alpha <span class="o">&gt;</span> <span class="m">0.5</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    warning<span class="p">(</span><span class="s">&quot;The argument &#39;alpha&#39; is often smaller than 0.5 and  close to 0!&quot;</span><span class="p">)</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">  <span class="c1"># ellipsis.arguments &lt;- list(...)</span>
</span><span class="line">
</span><span class="line">  mean <span class="o">&lt;-</span> mean<span class="p">(</span>x<span class="p">,</span> <span class="kc">...</span><span class="p">)</span>
</span><span class="line">  sd <span class="o">&lt;-</span> sd<span class="p">(</span>x<span class="p">,</span> <span class="kc">...</span><span class="p">)</span>
</span><span class="line">  n <span class="o">&lt;-</span> ifelse<span class="p">(</span>any<span class="p">(</span>is.na<span class="p">(</span>y<span class="p">)),</span> length<span class="p">(</span>x<span class="p">)</span><span class="o">-</span>sum<span class="p">(</span>is.na<span class="p">(</span>x<span class="p">)),</span> length<span class="p">(</span>x<span class="p">))</span>
</span><span class="line">  upper <span class="o">&lt;-</span> <span class="m">1</span> <span class="o">-</span> alpha<span class="o">/</span><span class="m">2</span>
</span><span class="line">  ci <span class="o">&lt;-</span> mean <span class="o">+</span> c<span class="p">(</span><span class="m">-1</span><span class="p">,</span> <span class="m">1</span><span class="p">)</span> <span class="o">*</span> qnorm<span class="p">(</span>alpha<span class="o">/</span><span class="m">2</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">1</span><span class="p">)</span><span class="o">*</span>sd<span class="o">/</span>sqrt<span class="p">(</span>n<span class="p">)</span> <span class="c1"># qnorm计算正态分布的分位数</span>
</span><span class="line">
</span><span class="line">  <span class="kr">return</span><span class="p">(</span>list<span class="p">(</span>mean <span class="o">=</span> mean<span class="p">,</span> sd <span class="o">=</span> sd<span class="p">,</span> ci <span class="o">=</span> ci<span class="p">))</span> <span class="c1"># 使用列表输出结果是常用方式</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这样就可以直接使用<code>Summary.MeanAndSd(y, na.rm=TRUE)</code>来计算了。</p>

<h6 id="section-7">7. 递归函数</h6>
<p>递归函数即自调用函数，有些时候我们会使用到，这里举个例子：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Recall_use</span><a href="https://github.com/JackyCode/RSeries">link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="r"><span class="line">plusFun1 <span class="o">&lt;-</span> <span class="kr">function</span> <span class="p">(</span>x<span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="kr">return</span><span class="p">(</span>ifelse<span class="p">(</span>x <span class="o">&lt;</span> <span class="m">10</span><span class="p">,</span> plusFun<span class="p">(</span>x <span class="o">+</span> <span class="m">1</span><span class="p">),</span> x<span class="p">))</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>当然也可以使用R的内置函数<code>Recall</code>：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Recall_use</span><a href="https://github.com/JackyCode/RSeries">link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="r"><span class="line">plusFun2 <span class="o">&lt;-</span> <span class="kr">function</span> <span class="p">(</span>x<span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="kr">return</span><span class="p">(</span>ifelse<span class="p">(</span>x <span class="o">&lt;</span> <span class="m">10</span><span class="p">,</span> Recall<span class="p">(</span>x<span class="m">+1</span><span class="p">),</span> x<span class="p">))</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="section-8">三. 小结</h4>
<p>今天讲了如何在R语言里面构造一个稳健的函数，以及<code>ifelse</code>和<code>Recall</code>函数的使用。写完这些，基本上R语言的基础就结束了。下面就开始写如何使用R语言去解决统计问题。由于我是概率统计专业的，而且是数学系出生，所以写的东西会有不少的理论。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[R语言记录3:数据的导入及复杂操作]]></title>
    <link href="http://jackycode.github.io/blog/2014/03/09/rseries3/"/>
    <updated>2014-03-09T11:16:58+08:00</updated>
    <id>http://jackycode.github.io/blog/2014/03/09/rseries3</id>
    <content type="html"><![CDATA[<p><img src="http://jackycode.github.io/images/artical/artical6.jpg" alt="aritical 6" />
<!-- more --></p>

<p><em>“文章原创，转载请注明出处”</em></p>

<hr />

<p>上一节介绍了R语言中常用的数据类型，并且介绍了R语言中对数据的一些简单操作，如创建查看向量或者矩阵等等。今天就介绍一下如何从文件中导入数据，以及对数据进行一些较为复杂的操作。</p>

<h4 id="section">一. 读取数据</h4>

<p>R语言读取数据有很多方式，如<code>scan</code>函数，<code>read.table</code>函数等等。我这里还想介绍另外两个函数，<code>read.csv</code>和<code>read.delim</code>函数，因为处理数据，大部分时候遇到的文件是csv文件或者txt文件，而这两个函数可以很好的读取此类型的文件。</p>

<h5 id="scan">1. <code>scan</code>函数</h5>
<p>首先简单说说<code>scan</code>函数，这个函数在默认的情况下，希望所有输入的数据都是数值型的。<code>scan</code>函数读取的数据必须是同一模式的，如果没有指定参数，scan将从R控制台读取数据，直到遇到一个空白行停止。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>loadData</span><a href="https://github.com/JackyCode/RSeries">link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="r"><span class="line"><span class="o">&gt;</span> x <span class="o">&lt;-</span> scan<span class="p">()</span>
</span><span class="line"><span class="m">1</span><span class="o">:</span> <span class="m">1</span> <span class="m">2</span> <span class="m">3</span>
</span><span class="line"><span class="m">4</span><span class="o">:</span> <span class="m">2</span> <span class="m">3</span> <span class="m">4</span>
</span><span class="line"><span class="m">7</span><span class="o">:</span>
</span><span class="line">Read <span class="m">6</span> items
</span><span class="line"><span class="o">&gt;</span> x
</span><span class="line"><span class="p">[</span><span class="m">1</span><span class="p">]</span> <span class="m">1</span> <span class="m">2</span> <span class="m">3</span> <span class="m">2</span> <span class="m">3</span> <span class="m">4</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>也可以通过设定参数，设定读取的数据类型：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>loadData</span><a href="https://github.com/JackyCode/RSeries">link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="r"><span class="line"><span class="o">&gt;</span> y <span class="o">&lt;-</span> scan<span class="p">(</span>what<span class="o">=</span><span class="s">&quot;&quot;</span><span class="p">)</span> <span class="c1"># 读取字符型数据</span>
</span><span class="line"><span class="m">1</span><span class="o">:</span> <span class="m">1</span> <span class="m">2</span> <span class="m">3</span>
</span><span class="line"><span class="m">4</span><span class="o">:</span> <span class="m">2</span> <span class="m">3</span> <span class="m">4</span>
</span><span class="line"><span class="m">7</span><span class="o">:</span>
</span><span class="line">Read <span class="m">6</span> items
</span><span class="line"><span class="o">&gt;</span> y
</span><span class="line"><span class="p">[</span><span class="m">1</span><span class="p">]</span> <span class="s">&quot;1&quot;</span> <span class="s">&quot;2&quot;</span> <span class="s">&quot;3&quot;</span> <span class="s">&quot;2&quot;</span> <span class="s">&quot;3&quot;</span> <span class="s">&quot;4&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>也可以直接读取一个同一模式的数据文件：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>loadData</span><a href="https://github.com/JackyCode/RSeries">link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="r"><span class="line"><span class="o">&gt;</span> z <span class="o">&lt;-</span> scan<span class="p">(</span><span class="s">&quot;example.txt&quot;</span><span class="p">)</span>
</span><span class="line">Read <span class="m">9</span> items
</span><span class="line"><span class="o">&gt;</span> z
</span><span class="line"><span class="p">[</span><span class="m">1</span><span class="p">]</span> <span class="m">1</span> <span class="m">2</span> <span class="m">3</span> <span class="m">4</span> <span class="m">5</span> <span class="m">6</span> <span class="m">7</span> <span class="m">8</span> <span class="m">9</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>其中<code>example.txt</code>的内容如下：</p>

<pre><code>1	2	3
4	5	6
7	8	9
</code></pre>

<p>注意最后留一个空白行，以便R读取数据时可以找到终止位置(否则会出现<code>warning</code>)。</p>

<h5 id="readtable">2. <code>read.table</code>函数</h5>
<p>顾名思义，<code>read.table</code>函数即是以<strong>数据框</strong>的格式在R中读取数据。这里就涉及到一个新的概念，<strong>数据框</strong>。前一节我们提到过，可以使用列表和数据框去存储具有不同模式的数据。<strong>数据框</strong>可以存储具有相同长度的变量，并且在统计中，其每一行就是样本的一个观测值，有多少行就有多少次观测。我们可以使用<code>data.frame</code>函数来生成一个数据框：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>loadData</span><a href="https://github.com/JackyCode/RSeries">link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="r"><span class="line"><span class="o">&gt;</span> name <span class="o">&lt;-</span> c<span class="p">(</span><span class="s">&quot;Li&quot;</span><span class="p">,</span> <span class="s">&quot;Wang&quot;</span><span class="p">,</span> <span class="s">&quot;Sun&quot;</span><span class="p">)</span>
</span><span class="line"><span class="o">&gt;</span> age <span class="o">&lt;-</span> c<span class="p">(</span><span class="m">21</span><span class="p">,</span> <span class="m">22</span><span class="p">,</span> <span class="m">23</span><span class="p">)</span>
</span><span class="line"><span class="o">&gt;</span> Datafr <span class="o">&lt;-</span> data.frame<span class="p">(</span>name <span class="o">=</span> name<span class="p">,</span> age <span class="o">=</span> age<span class="p">)</span>
</span><span class="line"><span class="o">&gt;</span> Datafr
</span><span class="line">  name age
</span><span class="line"><span class="m">1</span>   Li  <span class="m">21</span>
</span><span class="line"><span class="m">2</span> Wang  <span class="m">22</span>
</span><span class="line"><span class="m">3</span>  Sun  <span class="m">23</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>此外，数据框还有一个优点：可以在不影响原始数据的情况下，改变数据。比如我想知道，数据里面每个人的年龄比18大多少：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>loadData</span><a href="https://github.com/JackyCode/RSeries">link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="r"><span class="line"><span class="o">&gt;</span> Datafr2 <span class="o">&lt;-</span> data.frame<span class="p">(</span>name <span class="o">=</span> name<span class="p">,</span> age <span class="o">=</span> age<span class="p">,</span> age.u <span class="o">=</span> age<span class="m">-18</span><span class="p">)</span>
</span><span class="line"><span class="o">&gt;</span> Datafr2
</span><span class="line">  name age age.u
</span><span class="line"><span class="m">1</span>   Li  <span class="m">21</span>     <span class="m">3</span>
</span><span class="line"><span class="m">2</span> Wang  <span class="m">22</span>     <span class="m">4</span>
</span><span class="line"><span class="m">3</span>  Sun  <span class="m">23</span>     <span class="m">5</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>那么如何使用<code>read.table</code>函数呢，看看如下示例：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>loadData</span><a href="https://github.com/JackyCode/RSeries">link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="r"><span class="line"><span class="o">&gt;</span> example <span class="o">&lt;-</span> read.table<span class="p">(</span><span class="s">&quot;example.txt&quot;</span><span class="p">,</span> header<span class="o">=</span><span class="kc">FALSE</span><span class="p">)</span>
</span><span class="line"><span class="o">&gt;</span> example
</span><span class="line">  V1 V2 V3
</span><span class="line"><span class="m">1</span>  <span class="m">1</span>  <span class="m">2</span>  <span class="m">3</span>
</span><span class="line"><span class="m">2</span>  <span class="m">4</span>  <span class="m">5</span>  <span class="m">6</span>
</span><span class="line"><span class="m">3</span>  <span class="m">7</span>  <span class="m">8</span>  <span class="m">9</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>其中<code>header</code>参数指定数据文件的第一行是否为变量名。当没有变量名时，可以使用参数<code>col.names</code>来指定：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>loadData</span><a href="https://github.com/JackyCode/RSeries">link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="r"><span class="line"><span class="o">&gt;</span> example <span class="o">&lt;-</span> read.table<span class="p">(</span><span class="s">&quot;example.txt&quot;</span><span class="p">,</span> header<span class="o">=</span><span class="kc">FALSE</span><span class="p">,</span> col.names<span class="o">=</span>c<span class="p">(</span><span class="s">&quot;x1&quot;</span><span class="p">,</span> <span class="s">&quot;x2&quot;</span><span class="p">,</span> <span class="s">&quot;x3&quot;</span><span class="p">))</span>
</span><span class="line"><span class="o">&gt;</span> example
</span><span class="line">  x1 x2 x3
</span><span class="line"><span class="m">1</span>  <span class="m">1</span>  <span class="m">2</span>  <span class="m">3</span>
</span><span class="line"><span class="m">2</span>  <span class="m">4</span>  <span class="m">5</span>  <span class="m">6</span>
</span><span class="line"><span class="m">3</span>  <span class="m">7</span>  <span class="m">8</span>  <span class="m">9</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>当然<code>read.table</code>函数读取数据时，可以使用<code>sep=参数</code>指定分隔符。这些可以使用<code>?read.table</code>查看。</p>

<h5 id="readcsvreaddelim">3. <code>read.csv</code>和<code>read.delim</code>函数</h5>

<p>使用方法与<code>read.table</code>函数类似，可以直接读取csv文件和txt文件。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>loadData</span><a href="https://github.com/JackyCode/RSeries">link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="r"><span class="line">dataCsv <span class="o">&lt;-</span> read.csv<span class="p">(</span><span class="s">&quot;example.csv&quot;</span><span class="p">,</span> header<span class="o">=</span><span class="kc">FALSE</span><span class="p">)</span>
</span><span class="line">dataTxt <span class="o">&lt;-</span> read.delim<span class="p">(</span><span class="s">&quot;example.txt&quot;</span><span class="p">,</span> header<span class="o">=</span><span class="kc">FALSE</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="section-1">二. 数据操作</h4>
<p>上一节介绍了一些简单的数据操作，这次讲一讲较为复杂的数据操作。</p>

<h6 id="sample">1. 首先从$-5$到$5$中随机取出不重复的$10$个数据(<code>sample</code>函数)：</h6>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>dataManipulation</span><a href="https://github.com/JackyCode/RSeries">link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="r"><span class="line"><span class="o">&gt;</span> x <span class="o">&lt;-</span> sample<span class="p">(</span><span class="m">-5</span><span class="o">:</span><span class="m">5</span><span class="p">,</span> <span class="m">10</span><span class="p">)</span>
</span><span class="line"><span class="o">&gt;</span> y <span class="o">&lt;-</span> sample<span class="p">(</span><span class="m">-5</span><span class="o">:</span><span class="m">5</span><span class="p">,</span> <span class="m">10</span><span class="p">)</span>
</span><span class="line"><span class="o">&gt;</span> x
</span><span class="line"> <span class="p">[</span><span class="m">1</span><span class="p">]</span> <span class="m">-2</span>  <span class="m">3</span> <span class="m">-3</span>  <span class="m">0</span> <span class="m">-5</span>  <span class="m">5</span>  <span class="m">1</span>  <span class="m">4</span> <span class="m">-1</span>  <span class="m">2</span>
</span><span class="line"><span class="o">&gt;</span> y
</span><span class="line"> <span class="p">[</span><span class="m">1</span><span class="p">]</span> <span class="m">-1</span>  <span class="m">3</span> <span class="m">-3</span>  <span class="m">1</span> <span class="m">-4</span>  <span class="m">5</span>  <span class="m">0</span>  <span class="m">2</span> <span class="m">-5</span> <span class="m">-2</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h6 id="x0allany">2. 判断$x$中的数据是否大于$0$(<code>all</code>和<code>any</code>函数)：</h6>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>dataManipulation</span><a href="https://github.com/JackyCode/RSeries">link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="r"><span class="line"><span class="o">&gt;</span> x<span class="o">&gt;</span><span class="m">0</span>
</span><span class="line"><span class="p">[</span><span class="m">1</span><span class="p">]</span> <span class="kc">FALSE</span>  <span class="kc">TRUE</span> <span class="kc">FALSE</span> <span class="kc">FALSE</span> <span class="kc">FALSE</span>  <span class="kc">TRUE</span>  <span class="kc">TRUE</span>  <span class="kc">TRUE</span> <span class="kc">FALSE</span>  <span class="kc">TRUE</span>
</span><span class="line"><span class="o">&gt;</span> all<span class="p">(</span>x<span class="o">&gt;</span><span class="m">0</span><span class="p">)</span>
</span><span class="line"><span class="p">[</span><span class="m">1</span><span class="p">]</span> <span class="kc">FALSE</span>
</span><span class="line"><span class="o">&gt;</span> any<span class="p">(</span>x<span class="o">&gt;</span><span class="m">0</span><span class="p">)</span>
</span><span class="line"><span class="p">[</span><span class="m">1</span><span class="p">]</span> <span class="kc">TRUE</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h6 id="section-2">3. 试试更多的逻辑运算(<code>&amp;, |, !</code>)：</h6>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>dataManipulation</span><a href="https://github.com/JackyCode/RSeries">link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="r"><span class="line"><span class="o">&gt;</span> x <span class="o">&gt;</span> <span class="m">0</span> <span class="o">&amp;</span> y <span class="o">&gt;</span> <span class="m">0</span>
</span><span class="line">	 <span class="p">[</span><span class="m">1</span><span class="p">]</span> <span class="kc">FALSE</span>  <span class="kc">TRUE</span> <span class="kc">FALSE</span> <span class="kc">FALSE</span> <span class="kc">FALSE</span>  <span class="kc">TRUE</span> <span class="kc">FALSE</span>  <span class="kc">TRUE</span> <span class="kc">FALSE</span> <span class="kc">FALSE</span>
</span><span class="line"><span class="o">&gt;</span> x <span class="o">&gt;</span> <span class="m">0</span> <span class="o">|</span> y <span class="o">&gt;</span> <span class="m">0</span>
</span><span class="line"> <span class="p">[</span><span class="m">1</span><span class="p">]</span> <span class="kc">FALSE</span>  <span class="kc">TRUE</span> <span class="kc">FALSE</span>  <span class="kc">TRUE</span> <span class="kc">FALSE</span>  <span class="kc">TRUE</span>  <span class="kc">TRUE</span>  <span class="kc">TRUE</span> <span class="kc">FALSE</span>  <span class="kc">TRUE</span>
</span><span class="line"><span class="o">&gt;</span> <span class="o">!</span><span class="p">(</span>x<span class="o">&gt;</span><span class="m">0</span><span class="p">)</span>
</span><span class="line">	 <span class="p">[</span><span class="m">1</span><span class="p">]</span>  <span class="kc">TRUE</span> <span class="kc">FALSE</span>  <span class="kc">TRUE</span>  <span class="kc">TRUE</span>  <span class="kc">TRUE</span> <span class="kc">FALSE</span> <span class="kc">FALSE</span> <span class="kc">FALSE</span>  <span class="kc">TRUE</span> <span class="kc">FALSE</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h6 id="xywhich">4. 找出$x$与$y$相等的元素(<code>which</code>函数):</h6>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>dataManipulation</span><a href="https://github.com/JackyCode/RSeries">link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="r"><span class="line"><span class="o">&gt;</span> x <span class="o">==</span> y
</span><span class="line"> <span class="p">[</span><span class="m">1</span><span class="p">]</span> <span class="kc">FALSE</span>  <span class="kc">TRUE</span>  <span class="kc">TRUE</span> <span class="kc">FALSE</span> <span class="kc">FALSE</span>  <span class="kc">TRUE</span> <span class="kc">FALSE</span> <span class="kc">FALSE</span> <span class="kc">FALSE</span> <span class="kc">FALSE</span>
</span><span class="line"><span class="o">&gt;</span> which<span class="p">(</span>x <span class="o">==</span> y<span class="p">)</span> <span class="c1"># 取出满足条件的位置</span>
</span><span class="line"> <span class="p">[</span><span class="m">1</span><span class="p">]</span> <span class="m">2</span> <span class="m">3</span> <span class="m">6</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h6 id="sample-1">5. 从$-5$到$5$中随机取出允许重复的$10$个数据(<code>sample</code>函数)：</h6>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>dataManipulation</span><a href="https://github.com/JackyCode/RSeries">link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="r"><span class="line"><span class="o">&gt;</span> z <span class="o">&lt;-</span> sample<span class="p">(</span><span class="m">-5</span><span class="o">:</span><span class="m">5</span><span class="p">,</span> <span class="m">10</span><span class="p">,</span> replace<span class="o">=</span><span class="kc">TRUE</span><span class="p">)</span>
</span><span class="line"><span class="o">&gt;</span> z
</span><span class="line"> <span class="p">[</span><span class="m">1</span><span class="p">]</span>  <span class="m">4</span> <span class="m">-4</span> <span class="m">-1</span> <span class="m">-2</span>  <span class="m">4</span>  <span class="m">5</span> <span class="m">-3</span> <span class="m">-3</span>  <span class="m">1</span>  <span class="m">2</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h6 id="zunique">6. 取出$z$中不同的元素(<code>unique</code>函数)：</h6>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>dataManipulation</span><a href="https://github.com/JackyCode/RSeries">link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="r"><span class="line"><span class="o">&gt;</span> z.unique <span class="o">&lt;-</span> unique<span class="p">(</span>z<span class="p">)</span>
</span><span class="line"><span class="o">&gt;</span> z.unique
</span><span class="line"><span class="p">[</span><span class="m">1</span><span class="p">]</span>  <span class="m">4</span> <span class="m">-4</span> <span class="m">-1</span> <span class="m">-2</span>  <span class="m">5</span> <span class="m">-3</span>  <span class="m">1</span>  <span class="m">2</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h6 id="na">7. 生成存在缺失数据的一列数据(<code>NA</code>)：</h6>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>dataManipulation</span><a href="https://github.com/JackyCode/RSeries">link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="r"><span class="line"><span class="o">&gt;</span> x.na <span class="o">&lt;-</span> c<span class="p">(</span><span class="m">1</span><span class="o">:</span><span class="m">5</span><span class="p">,</span> <span class="kc">NA</span><span class="p">,</span> <span class="m">2</span><span class="p">,</span> <span class="kc">NA</span><span class="p">,</span> <span class="m">3</span><span class="o">:</span><span class="m">5</span><span class="p">)</span>
</span><span class="line"><span class="o">&gt;</span> x.na
</span><span class="line"> <span class="p">[</span><span class="m">1</span><span class="p">]</span>  <span class="m">1</span>  <span class="m">2</span>  <span class="m">3</span>  <span class="m">4</span>  <span class="m">5</span> <span class="kc">NA</span>  <span class="m">2</span> <span class="kc">NA</span>  <span class="m">3</span>  <span class="m">4</span>  <span class="m">5</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h6 id="xisna">8. 对$x$求和(<code>is.na</code>函数):</h6>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>dataManipulation</span><a href="https://github.com/JackyCode/RSeries">link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="r"><span class="line"><span class="o">&gt;</span> sum<span class="p">(</span>x.na<span class="p">)</span> <span class="c1"># 带着缺失数据计算</span>
</span><span class="line"><span class="p">[</span><span class="m">1</span><span class="p">]</span> <span class="kc">NA</span>
</span><span class="line"><span class="o">&gt;</span> sum<span class="p">(</span>is.na<span class="p">(</span>x.na<span class="p">))</span> <span class="c1"># 统计缺失数据的个数</span>
</span><span class="line"><span class="p">[</span><span class="m">1</span><span class="p">]</span> <span class="m">2</span>
</span><span class="line"><span class="o">&gt;</span> sum<span class="p">(</span>x.na<span class="p">,</span> na.rm<span class="o">=</span><span class="kc">TRUE</span><span class="p">)</span> <span class="c1"># 剔除缺失数据后求和</span>
</span><span class="line"><span class="p">[</span><span class="m">1</span><span class="p">]</span> <span class="m">29</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h6 id="xappend">9. 向变量$x$中添加数据(<code>append</code>函数)：</h6>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>dataManipulation</span><a href="https://github.com/JackyCode/RSeries">link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="r"><span class="line"><span class="o">&gt;</span> x <span class="o">&lt;-</span> append<span class="p">(</span>x<span class="p">,</span> sample<span class="p">(</span><span class="m">-5</span><span class="o">:</span><span class="m">5</span><span class="p">,</span> <span class="m">2</span><span class="p">))</span>
</span><span class="line"><span class="o">&gt;</span> x
</span><span class="line"><span class="p">[</span><span class="m">1</span><span class="p">]</span> <span class="m">-2</span>  <span class="m">3</span> <span class="m">-3</span>  <span class="m">0</span> <span class="m">-5</span>  <span class="m">5</span>  <span class="m">1</span>  <span class="m">4</span> <span class="m">-1</span>  <span class="m">2</span> <span class="m">-1</span> <span class="m">-5</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h6 id="xascharacterasfactorasnumeric">10. 更改$x$的数据类型(<code>as.character</code>,<code>as.factor</code>,<code>as.numeric</code>函数)：</h6>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>dataManipulation</span><a href="https://github.com/JackyCode/RSeries">link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="r"><span class="line"><span class="o">&gt;</span> x <span class="o">&lt;-</span> as.character<span class="p">(</span>x<span class="p">)</span>
</span><span class="line"><span class="o">&gt;</span> x
</span><span class="line"> <span class="p">[</span><span class="m">1</span><span class="p">]</span> <span class="s">&quot;2&quot;</span>  <span class="s">&quot;8&quot;</span>  <span class="s">&quot;3&quot;</span>  <span class="s">&quot;5&quot;</span>  <span class="s">&quot;4&quot;</span>  <span class="s">&quot;10&quot;</span> <span class="s">&quot;6&quot;</span>  <span class="s">&quot;9&quot;</span>  <span class="s">&quot;1&quot;</span>  <span class="s">&quot;7&quot;</span>  <span class="s">&quot;1&quot;</span>  <span class="s">&quot;4&quot;</span>
</span><span class="line"><span class="o">&gt;</span> x <span class="o">&lt;-</span> as.factor<span class="p">(</span>x<span class="p">)</span>
</span><span class="line"><span class="o">&gt;</span> x
</span><span class="line"> <span class="p">[</span><span class="m">1</span><span class="p">]</span> <span class="m">2</span>  <span class="m">8</span>  <span class="m">3</span>  <span class="m">5</span>  <span class="m">4</span>  <span class="m">10</span> <span class="m">6</span>  <span class="m">9</span>  <span class="m">1</span>  <span class="m">7</span>  <span class="m">1</span>  <span class="m">4</span>
</span><span class="line">Levels<span class="o">:</span> <span class="m">1</span> <span class="m">10</span> <span class="m">2</span> <span class="m">3</span> <span class="m">4</span> <span class="m">5</span> <span class="m">6</span> <span class="m">7</span> <span class="m">8</span> <span class="m">9</span>
</span><span class="line"><span class="o">&gt;</span> x <span class="o">&lt;-</span> as.numeric<span class="p">(</span>as.character<span class="p">(</span>x<span class="p">))</span> <span class="c1"># 如果一组因子变量是用数字表示，一般先将数字因子转换成字符后再转换成数值。</span>
</span><span class="line"><span class="o">&gt;</span> x
</span><span class="line"> <span class="p">[</span><span class="m">1</span><span class="p">]</span>  <span class="m">2</span>  <span class="m">8</span>  <span class="m">3</span>  <span class="m">5</span>  <span class="m">4</span> <span class="m">10</span>  <span class="m">6</span>  <span class="m">9</span>  <span class="m">1</span>  <span class="m">7</span>  <span class="m">1</span>  <span class="m">4</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h6 id="unlistasdataframe">11. 数据类型更改(<code>unlist</code>,<code>as.data.frame</code>)：</h6>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>dataManipulation</span><a href="https://github.com/JackyCode/RSeries">link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
</pre></td><td class="code"><pre><code class="r"><span class="line"><span class="o">&gt;</span> myList <span class="o">&lt;-</span> list<span class="p">()</span>
</span><span class="line"><span class="o">&gt;</span> myList<span class="o">$</span>x1 <span class="o">&lt;-</span> c<span class="p">(</span><span class="m">1</span><span class="p">,</span> <span class="m">2</span><span class="p">,</span> <span class="m">3</span><span class="p">)</span>
</span><span class="line"><span class="o">&gt;</span> myList<span class="o">$</span>x2 <span class="o">&lt;-</span> c<span class="p">(</span><span class="m">2</span><span class="p">,</span> <span class="m">4</span><span class="p">,</span> <span class="m">6</span><span class="p">)</span>
</span><span class="line"><span class="o">&gt;</span> myList
</span><span class="line"><span class="o">$</span>x1
</span><span class="line"><span class="p">[</span><span class="m">1</span><span class="p">]</span> <span class="m">1</span> <span class="m">2</span> <span class="m">3</span>
</span><span class="line">
</span><span class="line"><span class="o">$</span>x2
</span><span class="line"><span class="p">[</span><span class="m">1</span><span class="p">]</span> <span class="m">2</span> <span class="m">4</span> <span class="m">6</span>
</span><span class="line">
</span><span class="line"><span class="c1"># unlist</span>
</span><span class="line"><span class="o">&gt;</span> uList <span class="o">&lt;-</span> unlist<span class="p">(</span>myList<span class="p">)</span>
</span><span class="line"><span class="o">&gt;</span> uList
</span><span class="line">x11 x12 x13 x21 x22 x23
</span><span class="line">  <span class="m">1</span>   <span class="m">2</span>   <span class="m">3</span>   <span class="m">2</span>   <span class="m">4</span>   <span class="m">6</span>
</span><span class="line">
</span><span class="line"><span class="c1"># matrix</span>
</span><span class="line"><span class="o">&gt;</span> mList <span class="o">&lt;-</span> matrix<span class="p">(</span>uList<span class="p">,</span> <span class="m">2</span><span class="p">,</span> <span class="m">3</span><span class="p">,</span> byrow<span class="o">=</span><span class="kc">TRUE</span><span class="p">)</span>
</span><span class="line"><span class="o">&gt;</span> mList
</span><span class="line">     <span class="p">[,</span><span class="m">1</span><span class="p">]</span> <span class="p">[,</span><span class="m">2</span><span class="p">]</span> <span class="p">[,</span><span class="m">3</span><span class="p">]</span>
</span><span class="line"><span class="p">[</span><span class="m">1</span><span class="p">,]</span>    <span class="m">1</span>    <span class="m">2</span>    <span class="m">3</span>
</span><span class="line"><span class="p">[</span><span class="m">2</span><span class="p">,]</span>    <span class="m">2</span>    <span class="m">4</span>    <span class="m">6</span>
</span><span class="line">
</span><span class="line"><span class="c1"># dataframe</span>
</span><span class="line"><span class="o">&gt;</span> dfList <span class="o">&lt;-</span> as.data.frame<span class="p">(</span>mList<span class="p">)</span>
</span><span class="line"><span class="o">&gt;</span> dfList
</span><span class="line">  V1 V2 V3
</span><span class="line"><span class="m">1</span>  <span class="m">1</span>  <span class="m">2</span>  <span class="m">3</span>
</span><span class="line"><span class="m">2</span>  <span class="m">2</span>  <span class="m">4</span>  <span class="m">6</span>
</span><span class="line"><span class="o">&gt;</span> colnames<span class="p">(</span>dfList<span class="p">)</span> <span class="o">&lt;-</span> c<span class="p">(</span><span class="s">&quot;x1&quot;</span><span class="p">,</span> <span class="s">&quot;x2&quot;</span><span class="p">,</span> <span class="s">&quot;x3&quot;</span><span class="p">)</span>
</span><span class="line"><span class="o">&gt;</span> dfList
</span><span class="line">  x1 x2 x3
</span><span class="line"><span class="m">1</span>  <span class="m">1</span>  <span class="m">2</span>  <span class="m">3</span>
</span><span class="line"><span class="m">2</span>  <span class="m">2</span>  <span class="m">4</span>  <span class="m">6</span>
</span><span class="line"><span class="o">&gt;</span> rownames<span class="p">(</span>dfList<span class="p">)</span> <span class="o">&lt;-</span> c<span class="p">(</span><span class="s">&quot;o1&quot;</span><span class="p">,</span> <span class="s">&quot;o2&quot;</span><span class="p">)</span>
</span><span class="line"><span class="o">&gt;</span> dfList
</span><span class="line">   x1 x2 x3
</span><span class="line">o1  <span class="m">1</span>  <span class="m">2</span>  <span class="m">3</span>
</span><span class="line">o2  <span class="m">2</span>  <span class="m">4</span>  <span class="m">6</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h6 id="tabletapplybyaggregate">12. 按条件整理计算数据(<code>table</code>,<code>tapply</code>,<code>by</code>,<code>aggregate</code>函数)：</h6>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>dataManipulation</span><a href="https://github.com/JackyCode/RSeries">link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
</pre></td><td class="code"><pre><code class="r"><span class="line"><span class="o">&gt;</span> x <span class="o">&lt;-</span> list<span class="p">()</span>
</span><span class="line"><span class="o">&gt;</span> x<span class="o">$</span>a <span class="o">&lt;-</span> sample<span class="p">(</span><span class="m">-10</span><span class="o">:</span><span class="m">10</span><span class="p">,</span> <span class="m">20</span><span class="p">,</span> replace<span class="o">=</span><span class="kc">TRUE</span><span class="p">)</span>
</span><span class="line"><span class="o">&gt;</span> x<span class="o">$</span>b <span class="o">&lt;-</span> as.factor<span class="p">(</span>sample<span class="p">(</span><span class="m">1</span><span class="o">:</span><span class="m">4</span><span class="p">,</span> <span class="m">20</span><span class="p">,</span> replace<span class="o">=</span><span class="kc">TRUE</span><span class="p">))</span>
</span><span class="line"><span class="o">&gt;</span> x<span class="o">$</span>c <span class="o">&lt;-</span> as.factor<span class="p">(</span>sample<span class="p">(</span><span class="m">-3</span><span class="o">:</span><span class="m">-1</span><span class="p">,</span> <span class="m">20</span><span class="p">,</span> replace<span class="o">=</span><span class="kc">TRUE</span><span class="p">))</span>
</span><span class="line"><span class="o">&gt;</span> x
</span><span class="line">
</span><span class="line"><span class="c1"># 统计因子出现的频数</span>
</span><span class="line"><span class="o">&gt;</span> table<span class="p">(</span>x<span class="o">$</span>b<span class="p">)</span>
</span><span class="line">
</span><span class="line"> <span class="m">1</span>  <span class="m">2</span>  <span class="m">3</span>  <span class="m">4</span>
</span><span class="line"> <span class="m">5</span>  <span class="m">3</span>  <span class="m">1</span> <span class="m">11</span>
</span><span class="line"><span class="o">&gt;</span> table<span class="p">(</span>x<span class="o">$</span>c<span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="m">-3</span> <span class="m">-2</span> <span class="m">-1</span>
</span><span class="line"> <span class="m">9</span>  <span class="m">7</span>  <span class="m">4</span>
</span><span class="line"><span class="o">&gt;</span> table<span class="p">(</span>x<span class="o">$</span>b<span class="p">,</span> x<span class="o">$</span>c<span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="m">-3</span> <span class="m">-2</span> <span class="m">-1</span>
</span><span class="line">  <span class="m">1</span>  <span class="m">1</span>  <span class="m">3</span>  <span class="m">1</span>
</span><span class="line">  <span class="m">2</span>  <span class="m">1</span>  <span class="m">2</span>  <span class="m">0</span>
</span><span class="line">  <span class="m">3</span>  <span class="m">0</span>  <span class="m">1</span>  <span class="m">0</span>
</span><span class="line">  <span class="m">4</span>  <span class="m">7</span>  <span class="m">1</span>  <span class="m">3</span>
</span><span class="line">
</span><span class="line"><span class="c1"># 使用tapply，by以及aggregate函数根据不同因子对数据进行计算</span>
</span><span class="line"><span class="o">&gt;</span> tapply<span class="p">(</span>x<span class="o">$</span>a<span class="p">,</span> x<span class="o">$</span>b<span class="p">,</span> sum<span class="p">)</span>
</span><span class="line"> <span class="m">1</span>  <span class="m">2</span>  <span class="m">3</span>  <span class="m">4</span>
</span><span class="line"> <span class="m">8</span> <span class="m">11</span>  <span class="m">2</span> <span class="m">-5</span>
</span><span class="line"><span class="o">&gt;</span> tapply<span class="p">(</span>x<span class="o">$</span>a<span class="p">,</span> x<span class="o">$</span>c<span class="p">,</span> sum<span class="p">)</span>
</span><span class="line"><span class="m">-3</span> <span class="m">-2</span> <span class="m">-1</span>
</span><span class="line"><span class="m">-7</span> <span class="m">16</span>  <span class="m">7</span>
</span><span class="line"><span class="o">&gt;</span> tapply<span class="p">(</span>x<span class="o">$</span>a<span class="p">,</span> list<span class="p">(</span>x<span class="o">$</span>b<span class="p">,</span> x<span class="o">$</span>c<span class="p">),</span> sum<span class="p">)</span> <span class="c1"># 可以看到，由于b=2且c=-1的数据不存在，所有计算结果为NA(其它类似)</span>
</span><span class="line">  <span class="m">-3</span> <span class="m">-2</span> <span class="m">-1</span>
</span><span class="line"><span class="m">1</span> <span class="m">-3</span>  <span class="m">6</span>  <span class="m">5</span>
</span><span class="line"><span class="m">2</span>  <span class="m">5</span>  <span class="m">6</span> <span class="kc">NA</span>
</span><span class="line"><span class="m">3</span> <span class="kc">NA</span>  <span class="m">2</span> <span class="kc">NA</span>
</span><span class="line"><span class="m">4</span> <span class="m">-9</span>  <span class="m">2</span>  <span class="m">2</span>
</span><span class="line">
</span><span class="line"><span class="o">&gt;</span> by<span class="p">(</span>x<span class="o">$</span>a<span class="p">,</span> list<span class="p">(</span>x<span class="o">$</span>b<span class="p">,</span> x<span class="o">$</span>c<span class="p">),</span> sum<span class="p">)</span> <span class="c1"># 输出结果太长就不给出了，可以观察一下与tapply输出的区别</span>
</span><span class="line">
</span><span class="line"><span class="o">&gt;</span> aggregate<span class="p">(</span>a <span class="o">~</span> b<span class="o">+</span>c<span class="p">,</span> x<span class="p">,</span> sum<span class="p">)</span> <span class="c1"># 第一个参数为要计算的量，中间的参数为条件，第三个参数为数据集名称，最后一个为函数</span>
</span><span class="line">  b  c  a
</span><span class="line"><span class="m">1</span> <span class="m">1</span> <span class="m">-3</span> <span class="m">-3</span>
</span><span class="line"><span class="m">2</span> <span class="m">2</span> <span class="m">-3</span>  <span class="m">5</span>
</span><span class="line"><span class="m">3</span> <span class="m">4</span> <span class="m">-3</span> <span class="m">-9</span>
</span><span class="line"><span class="m">4</span> <span class="m">1</span> <span class="m">-2</span>  <span class="m">6</span>
</span><span class="line"><span class="m">5</span> <span class="m">2</span> <span class="m">-2</span>  <span class="m">6</span>
</span><span class="line"><span class="m">6</span> <span class="m">3</span> <span class="m">-2</span>  <span class="m">2</span>
</span><span class="line"><span class="m">7</span> <span class="m">4</span> <span class="m">-2</span>  <span class="m">2</span>
</span><span class="line"><span class="m">8</span> <span class="m">1</span> <span class="m">-1</span>  <span class="m">5</span>
</span><span class="line"><span class="m">9</span> <span class="m">4</span> <span class="m">-1</span>  <span class="m">2</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="section-3">三. 小节</h4>
<p>这次我们介绍了R语言如何从外部读取数据，以及对得到的数据如何进行一些复杂点的操作。当然这还不是全部，比如我这里还没有讲到如何将数据集按行按列去进行合并(<code>rbind</code>,<code>cbind</code>函数)等等，这些都可以通过help文档得到。我觉得学习一门语言一定要学会使用<code>help</code>，还有善用Google很重要。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[R语言记录2 ：R语言中的数据]]></title>
    <link href="http://jackycode.github.io/blog/2014/03/07/rseries2/"/>
    <updated>2014-03-07T17:03:58+08:00</updated>
    <id>http://jackycode.github.io/blog/2014/03/07/rseries2</id>
    <content type="html"><![CDATA[<p><img src="http://jackycode.github.io/images/artical/artical5.jpg" alt="aritical 5" />
<!-- more --></p>

<p><em>“文章原创，转载请注明出处”</em></p>

<hr />

<p>上一次简单地讲了一下R语言编程的一些控制语句，这次来看一看R中的数据。</p>

<h4 id="section">一. 数据类型简介</h4>

<p>首先，要记住，R语言中的一切都是对象，<code>Everything in R is an Object</code>。那么对象就存在其属性，R中每一个对象包含多个属性用来描述该对象。最重要的两个属性是<strong>模式</strong>和<strong>类</strong>。可以使用函数<code>mode()</code>和函数<code>class()</code>去查看对象的模式和类。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>datamode</span><a href="https://github.com/JackyCode/RSeries">link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="r"><span class="line"><span class="c1"># 比如查看函数sum的模式和类</span>
</span><span class="line">mode<span class="p">(</span>sum<span class="p">)</span>	<span class="c1"># function</span>
</span><span class="line">class<span class="p">(</span>sum<span class="p">)</span>	<span class="c1"># function</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>我们用R语言来处理数据，遇到的最多的对象模式应该是<em>数值型</em>，<em>字符型</em>，<em>逻辑型</em>，<em>因子</em>和<em>日期时间</em>。而我们正常处理的数据中往往会存在不止一种数据模式，比如一批数据中有变量：姓名和年龄，显然姓名是字符型而年龄是数值型。那么在存储这些变量的时候，就出现一个对象需要对应多个模式。R语言中<strong>像矩阵，数组等等的对象只能存储相同模式的数据；而像数据框，列表等等的对象则可存储多种模式的数据</strong>。</p>

<p>在R中最常遇到的数据模式是<strong><em>列表</em></strong>，因为其可以存储具有不同模式和不同长度的对象。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>datamode</span><a href="https://github.com/JackyCode/RSeries">link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="r"><span class="line">create.list <span class="o">&lt;-</span> list<span class="p">(</span>name <span class="o">=</span> c<span class="p">(</span><span class="s">&quot;Li&quot;</span><span class="p">,</span> <span class="s">&quot;Wang&quot;</span><span class="p">,</span><span class="s">&quot; Xue&quot;</span><span class="p">),</span> age <span class="o">=</span> c<span class="p">(</span><span class="m">21</span><span class="p">,</span> <span class="m">22</span><span class="p">,</span> <span class="m">24</span><span class="p">),</span> sex <span class="o">=</span> factor<span class="p">(</span><span class="s">&quot;b&quot;</span><span class="p">,</span> <span class="s">&quot;g&quot;</span><span class="p">,</span> <span class="s">&quot;b&quot;</span><span class="p">))</span>
</span><span class="line"><span class="c1"># 使用sapply查看模式和类（回想上一节内容）</span>
</span><span class="line">sapply<span class="p">(</span>create.list<span class="p">,</span> mode<span class="p">)</span>
</span><span class="line">sapply<span class="p">(</span>create.list<span class="p">,</span> class<span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="section-1">二. 简单的数据操作</h4>

<h6 id="r">1. 进入R程序，更改工作空间：</h6>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>data_manipulation</span><a href="https://github.com/JackyCode/RSeries">link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="r"><span class="line"><span class="c1"># 获取当前的路径</span>
</span><span class="line">getwd<span class="p">()</span>
</span><span class="line"><span class="c1"># 更改到目标路径</span>
</span><span class="line">setwd<span class="p">(</span><span class="s">&quot;~/DataInR&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h6 id="section-2">2. 向量</h6>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>data_manipulation</span><a href="https://github.com/JackyCode/RSeries">link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
</pre></td><td class="code"><pre><code class="r"><span class="line"><span class="c1"># c函数：连接或合并数据</span>
</span><span class="line">x <span class="o">&lt;-</span> c<span class="p">(</span><span class="m">1</span><span class="p">,</span> <span class="m">2</span><span class="p">,</span> <span class="m">3</span><span class="p">)</span>
</span><span class="line">y <span class="o">&lt;-</span> c<span class="p">(</span><span class="s">&quot;abc&quot;</span><span class="p">,</span> <span class="s">&quot;bc&quot;</span><span class="p">,</span> <span class="s">&quot;c&quot;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c1"># 使用seq函数创建数据</span>
</span><span class="line">z <span class="o">&lt;-</span> seq<span class="p">(</span><span class="m">1</span><span class="p">,</span> <span class="m">21</span><span class="p">,</span> <span class="m">1</span><span class="p">)</span> <span class="c1"># 或 z &lt;- 1:21</span>
</span><span class="line">
</span><span class="line"><span class="c1"># 查看数据</span>
</span><span class="line">head<span class="p">(</span>z<span class="p">)</span>
</span><span class="line">tail<span class="p">(</span>z<span class="p">)</span>
</span><span class="line">head<span class="p">(</span>z<span class="p">,</span> <span class="m">3</span><span class="p">)</span>
</span><span class="line">tail<span class="p">(</span>z<span class="p">,</span> <span class="m">3</span><span class="p">)</span>
</span><span class="line">nchar<span class="p">(</span>y<span class="p">)</span> <span class="c1"># 注意空格</span>
</span><span class="line">z<span class="p">[</span><span class="m">1</span><span class="p">]</span>
</span><span class="line">z<span class="p">[</span><span class="m">1</span><span class="o">:</span><span class="m">5</span><span class="p">]</span>
</span><span class="line">
</span><span class="line"><span class="c1"># 合并数据</span>
</span><span class="line">mode<span class="p">(</span>x<span class="p">)</span>
</span><span class="line">mode<span class="p">(</span>y<span class="p">)</span>
</span><span class="line">xy <span class="o">&lt;-</span> c<span class="p">(</span>x<span class="p">,</span> y<span class="p">)</span>
</span><span class="line">mode<span class="p">(</span>xy<span class="p">)</span>
</span><span class="line"><span class="c1">## c函数合并不同模式的数据：logical &lt; integer &lt; numeric &lt; complex &lt; character &lt; list</span>
</span><span class="line"><span class="c1">## 当级别低的遇到级别高的，则转为级别高的</span>
</span><span class="line"><span class="c1">## 比如logical与integer合并，则logical类型中TRUE转成1，FALSE转成0，全部转成integer</span>
</span><span class="line">
</span><span class="line"><span class="c1"># 简单运算</span>
</span><span class="line">z <span class="o">+</span> <span class="m">1</span>
</span><span class="line">z <span class="o">+</span> x <span class="c1"># 注意长度不同</span>
</span><span class="line">k <span class="o">&lt;-</span> <span class="m">1</span><span class="o">:</span><span class="m">20</span>
</span><span class="line">z <span class="o">+</span> k <span class="c1"># 注意warning</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h6 id="section-3">3. 矩阵</h6>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>data_manipulation</span><a href="https://github.com/JackyCode/RSeries">link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
</pre></td><td class="code"><pre><code class="r"><span class="line"><span class="c1"># 创建矩阵</span>
</span><span class="line">v <span class="o">&lt;-</span> <span class="m">1</span><span class="o">:</span><span class="m">12</span>
</span><span class="line">m <span class="o">&lt;-</span> matrix<span class="p">(</span>v<span class="p">,</span> nrow <span class="o">=</span> <span class="m">3</span><span class="p">,</span> ncol <span class="o">=</span> <span class="m">4</span><span class="p">)</span>
</span><span class="line">m1 <span class="o">&lt;-</span> matrix<span class="p">(</span>v<span class="p">,</span> <span class="m">3</span><span class="p">,</span> <span class="m">4</span><span class="p">)</span>
</span><span class="line">m2 <span class="o">&lt;-</span> matrix<span class="p">(</span>v<span class="p">,</span> <span class="m">3</span><span class="p">)</span>
</span><span class="line">m3 <span class="o">&lt;-</span> matrix<span class="p">(</span>v<span class="p">,</span> <span class="m">4</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">m4 <span class="o">&lt;-</span> matrix<span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="m">3</span><span class="p">,</span> <span class="m">4</span><span class="p">)</span> <span class="c1"># 创建零矩阵</span>
</span><span class="line">m5 <span class="o">&lt;-</span> matrix<span class="p">(</span><span class="m">1</span><span class="p">,</span> <span class="m">3</span><span class="p">,</span> <span class="m">4</span><span class="p">)</span> <span class="c1"># 全一矩阵</span>
</span><span class="line">m6 <span class="o">&lt;-</span> matrix<span class="p">(</span><span class="m">1</span><span class="o">:</span><span class="m">3</span><span class="p">,</span> <span class="m">3</span><span class="p">,</span> <span class="m">4</span><span class="p">)</span> <span class="c1"># 行相同矩阵</span>
</span><span class="line">m7 <span class="o">&lt;-</span> matrix<span class="p">(</span><span class="m">1</span><span class="o">:</span><span class="m">4</span><span class="p">,</span> <span class="m">3</span><span class="p">,</span> <span class="m">4</span><span class="p">)</span> <span class="c1"># 列相同矩阵</span>
</span><span class="line">m8 <span class="o">&lt;-</span> matrix<span class="p">(</span><span class="m">1</span><span class="o">:</span><span class="m">5</span><span class="p">,</span> <span class="m">3</span><span class="p">,</span> <span class="m">4</span><span class="p">)</span> <span class="c1"># 注意warning</span>
</span><span class="line">
</span><span class="line"><span class="c1"># 查看数据</span>
</span><span class="line">m<span class="p">[</span><span class="m">1</span><span class="p">,</span> <span class="m">1</span><span class="p">]</span>
</span><span class="line">m<span class="p">[</span><span class="m">2</span><span class="o">:</span><span class="m">3</span><span class="p">,</span> <span class="m">3</span><span class="o">:</span><span class="m">4</span><span class="p">]</span>
</span><span class="line">dim<span class="p">(</span>m<span class="p">)</span>
</span><span class="line">length<span class="p">(</span>m<span class="p">)</span>
</span><span class="line">head<span class="p">(</span>m<span class="p">,</span> <span class="m">2</span><span class="p">)</span>
</span><span class="line">tail<span class="p">(</span>m<span class="p">,</span> <span class="m">1</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>#### 三. 小节	 
到此为止，我们就可以在R语言中创建录入一些数据，并对数据进行一些简单的操作。利用上一节中所讲的控制语句，我们就可以编写R语言的小程序了。试试用R语言解决一些你在学习中遇到的小问题吧。下一次我将讲讲如何从文件中导入数据，以及一些其他的处理。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[R语言记录1 ：基础]]></title>
    <link href="http://jackycode.github.io/blog/2014/03/06/rseries1/"/>
    <updated>2014-03-06T15:27:28+08:00</updated>
    <id>http://jackycode.github.io/blog/2014/03/06/rseries1</id>
    <content type="html"><![CDATA[<p><img src="http://jackycode.github.io/images/artical/artical4.jpg" alt="aritical 4" /></p>

<!-- more -->

<p><em>“文章原创，转载请注明出处”</em></p>

<hr />

<h3 id="section">一. 配置与帮助</h3>

<p>很多时候我们希望软件可以根据我们的需要输出结果，比如我想将所有的结果小数都保留三位，那么就需要自己去更改设置，这时候就需要使用函数：<code>options(...)</code>。这个函数可以用来<strong><em>显示或设置当前的选项</em></strong>。运行<code>options()</code>，可以查看选项当前的设置，<code>help(options)</code>可以显示可用选项的说明。如果想要单独查看某一个设置，则需要使用函数<code>getOption(x, default=NULL)</code>。</p>

<p>可以运行这些代码以查看：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>config_set.R</span><a href="https://github.com/JackyCode/RSeries">link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="r"><span class="line">options<span class="p">()</span>
</span><span class="line">getOption<span class="p">(</span><span class="s">&quot;digits&quot;</span><span class="p">)</span>
</span><span class="line">options<span class="p">(</span>digits<span class="o">=</span><span class="m">3</span><span class="p">)</span>
</span><span class="line">getOption<span class="p">(</span><span class="s">&quot;digits&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>在学习一个软件之前，最重要的是知道在哪里才能获取帮助。R语言提供了强大的帮助系统，提供了已安装包中所有函数的细节、参考文献以及使用示例。以和函数<code>sum()</code>为例，你可以直接输入<code>help(sum)或?sum</code>查看函数<code>sum</code>的帮助，也可以输入<code>help.search(sum)或??sum</code>在本地以关键词<code>sum</code>进行搜索。你甚至可以直接输入<code>sum</code>得到该函数的源代码细节（这对于学习编程来说实在是太棒了）。</p>

<p>试试这些：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>help_use.R</span><a href="https://github.com/JackyCode/RSeries">link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="r"><span class="line">help.start<span class="p">()</span> <span class="c1"># 打开帮助文档首页</span>
</span><span class="line"><span class="o">?</span>sum
</span><span class="line"><span class="o">??</span>sum
</span><span class="line">sum<span class="p">()</span>
</span><span class="line">sum
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="section-1">二. 控制语句</h3>

<h4 id="section-2">1. 循环语句</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="r"><span class="line"><span class="kr">for</span> <span class="p">(</span>var <span class="kr">in</span> seq<span class="p">)</span> expr
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>即变量<em>var</em>从<em>seq</em>中依次取值，计算<em>expr</em>直到结束。例如：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>controlSentence_use</span><a href="https://github.com/JackyCode/RSeries">link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="r"><span class="line">x <span class="o">&lt;-</span> c<span class="p">()</span>
</span><span class="line"><span class="kr">for</span> <span class="p">(</span>i <span class="kr">in</span> c<span class="p">(</span><span class="m">1</span><span class="p">,</span> <span class="m">2</span><span class="p">,</span> <span class="m">3</span><span class="p">))</span> x<span class="p">[</span>i<span class="p">]</span><span class="o">&lt;-</span>i<span class="o">*</span>i
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>当然，R语言也支持<code>while</code>和<code>repeat</code>这类C语言风格的循环：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>controlSentence_use</span><a href="https://github.com/JackyCode/RSeries">link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
</pre></td><td class="code"><pre><code class="r"><span class="line"><span class="c1"># while loop</span>
</span><span class="line">i <span class="o">&lt;-</span> <span class="m">1</span>
</span><span class="line"><span class="kr">while</span> <span class="p">(</span>i <span class="o">&lt;=</span> <span class="m">3</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">	x<span class="p">[</span>i<span class="p">]</span> <span class="o">&lt;-</span> i<span class="o">*</span>i
</span><span class="line">	i <span class="o">&lt;-</span> i<span class="m">+1</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="c1"># another while loop</span>
</span><span class="line">i <span class="o">&lt;-</span> <span class="m">1</span>
</span><span class="line"><span class="kr">while</span> <span class="p">(</span><span class="kc">TRUE</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    x<span class="p">[</span>i<span class="p">]</span> <span class="o">&lt;-</span> i<span class="o">*</span>i
</span><span class="line">    i <span class="o">&lt;-</span> i<span class="m">+1</span>
</span><span class="line">    <span class="kr">if</span> <span class="p">(</span>i <span class="o">&gt;</span> <span class="m">3</span><span class="p">)</span> <span class="kr">break</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="c1"># repeat loop</span>
</span><span class="line">i <span class="o">&lt;-</span> <span class="m">1</span>
</span><span class="line"><span class="kr">repeat</span> <span class="p">{</span>
</span><span class="line">    x<span class="p">[</span>i<span class="p">]</span> <span class="o">&lt;-</span> i<span class="o">*</span>i
</span><span class="line">    i <span class="o">&lt;-</span> i<span class="m">+1</span>
</span><span class="line">    <span class="kr">if</span> <span class="p">(</span>i <span class="o">&gt;</span> <span class="m">3</span><span class="p">)</span> <span class="kr">break</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="o">==========================</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h5 id="section-3">非向量集合上的循环</h5>
<p>R语言并不直接支持在非向量结合上做循环，但是我们可以用函数<code>apply()</code>,<code>sapply()</code>,<code>lapply()</code>以及<code>tapply</code>来避开循环得到想要的结果。</p>

<p>比如上面的例子，对集合{1, 2, 3}中每一个元素求平方得到新的集合：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>controlSentence_use</span><a href="https://github.com/JackyCode/RSeries">link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="r"><span class="line">i <span class="o">&lt;-</span> c<span class="p">(</span><span class="m">1</span><span class="p">,</span> <span class="m">2</span><span class="p">,</span> <span class="m">3</span><span class="p">)</span>
</span><span class="line">Fun <span class="o">&lt;-</span> <span class="kr">function</span><span class="p">(</span>x<span class="p">)</span> <span class="p">{</span>
</span><span class="line">	y <span class="o">&lt;-</span> x<span class="o">*</span>x
</span><span class="line"><span class="p">}</span>
</span><span class="line">x <span class="o">&lt;-</span> lapply<span class="p">(</span>i<span class="p">,</span> Fun<span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>使用<code>apply()</code>函数，还可以简单地对一个矩阵按行(按列)求和(任意函数)。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>controlSentence_use</span><a href="https://github.com/JackyCode/RSeries">link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="r"><span class="line">a <span class="o">&lt;-</span> matrix<span class="p">(</span><span class="m">1</span><span class="o">:</span><span class="m">12</span><span class="p">,</span> nrow<span class="o">=</span><span class="m">4</span><span class="p">)</span>
</span><span class="line">b <span class="o">&lt;-</span> apply<span class="p">(</span>a<span class="p">,</span> <span class="m">1</span><span class="p">,</span> sum<span class="p">)</span>
</span><span class="line">c <span class="o">&lt;-</span> apply<span class="p">(</span>a<span class="p">,</span> <span class="m">2</span><span class="p">,</span> sum<span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="section-4">2. 条件语句</h4>

<p>跟C语言类似：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>controlSentence_use</span><a href="https://github.com/JackyCode/RSeries">link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="r"><span class="line">r <span class="o">&lt;-</span> <span class="m">3</span>
</span><span class="line"><span class="kr">if</span> <span class="p">(</span>r <span class="o">==</span> <span class="m">4</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    x <span class="o">&lt;-</span> <span class="m">1</span>
</span><span class="line"><span class="p">}</span> <span class="kr">else</span> <span class="p">{</span>
</span><span class="line">    x <span class="o">&lt;-</span> <span class="m">3</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="section-5">3. 自定义函数</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="r"><span class="line"><span class="kr">function</span> <span class="p">(</span><span class="o">&lt;</span>formal arguments<span class="o">&gt;</span><span class="p">)</span> body
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>使用上面的例子：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>controlSentence_use</span><a href="https://github.com/JackyCode/RSeries">link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="r"><span class="line">Fun <span class="o">&lt;-</span> <span class="kr">function</span><span class="p">(</span>x<span class="p">)</span> <span class="p">{</span>
</span><span class="line">	y <span class="o">&lt;-</span> x<span class="o">*</span>x
</span><span class="line"><span class="p">}</span>
</span><span class="line">a <span class="o">&lt;-</span> <span class="m">2</span>
</span><span class="line">b <span class="o">&lt;-</span> Fun<span class="p">(</span>a<span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>学习这么多之后，我们就可以使用R做点小事情了。但是这还没有涉及到R语言自身的东西，毕竟上面的这些能力哪个编程语言没有。</p>

]]></content>
  </entry>
  
</feed>
